"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AccessDeniedException: () => AccessDeniedException,
  AggregateType: () => AggregateType,
  AssetErrorCode: () => AssetErrorCode,
  AssetModelState: () => AssetModelState,
  AssetModelType: () => AssetModelType,
  AssetModelVersionType: () => AssetModelVersionType,
  AssetRelationshipType: () => AssetRelationshipType,
  AssetState: () => AssetState,
  AssociateAssetsCommand: () => AssociateAssetsCommand,
  AssociateTimeSeriesToAssetPropertyCommand: () => AssociateTimeSeriesToAssetPropertyCommand,
  AuthMode: () => AuthMode,
  BatchAssociateProjectAssetsCommand: () => BatchAssociateProjectAssetsCommand,
  BatchDisassociateProjectAssetsCommand: () => BatchDisassociateProjectAssetsCommand,
  BatchEntryCompletionStatus: () => BatchEntryCompletionStatus,
  BatchGetAssetPropertyAggregatesCommand: () => BatchGetAssetPropertyAggregatesCommand,
  BatchGetAssetPropertyAggregatesErrorCode: () => BatchGetAssetPropertyAggregatesErrorCode,
  BatchGetAssetPropertyValueCommand: () => BatchGetAssetPropertyValueCommand,
  BatchGetAssetPropertyValueErrorCode: () => BatchGetAssetPropertyValueErrorCode,
  BatchGetAssetPropertyValueHistoryCommand: () => BatchGetAssetPropertyValueHistoryCommand,
  BatchGetAssetPropertyValueHistoryErrorCode: () => BatchGetAssetPropertyValueHistoryErrorCode,
  BatchPutAssetPropertyValueCommand: () => BatchPutAssetPropertyValueCommand,
  BatchPutAssetPropertyValueErrorCode: () => BatchPutAssetPropertyValueErrorCode,
  CapabilitySyncStatus: () => CapabilitySyncStatus,
  ColumnName: () => ColumnName,
  ComputeLocation: () => ComputeLocation,
  ConfigurationState: () => ConfigurationState,
  ConflictingOperationException: () => ConflictingOperationException,
  CreateAccessPolicyCommand: () => CreateAccessPolicyCommand,
  CreateAssetCommand: () => CreateAssetCommand,
  CreateAssetModelCommand: () => CreateAssetModelCommand,
  CreateAssetModelCompositeModelCommand: () => CreateAssetModelCompositeModelCommand,
  CreateBulkImportJobCommand: () => CreateBulkImportJobCommand,
  CreateDashboardCommand: () => CreateDashboardCommand,
  CreateDatasetCommand: () => CreateDatasetCommand,
  CreateGatewayCommand: () => CreateGatewayCommand,
  CreatePortalCommand: () => CreatePortalCommand,
  CreatePortalRequestFilterSensitiveLog: () => CreatePortalRequestFilterSensitiveLog,
  CreateProjectCommand: () => CreateProjectCommand,
  DatasetSourceFormat: () => DatasetSourceFormat,
  DatasetSourceType: () => DatasetSourceType,
  DatasetState: () => DatasetState,
  DeleteAccessPolicyCommand: () => DeleteAccessPolicyCommand,
  DeleteAssetCommand: () => DeleteAssetCommand,
  DeleteAssetModelCommand: () => DeleteAssetModelCommand,
  DeleteAssetModelCompositeModelCommand: () => DeleteAssetModelCompositeModelCommand,
  DeleteDashboardCommand: () => DeleteDashboardCommand,
  DeleteDatasetCommand: () => DeleteDatasetCommand,
  DeleteGatewayCommand: () => DeleteGatewayCommand,
  DeletePortalCommand: () => DeletePortalCommand,
  DeleteProjectCommand: () => DeleteProjectCommand,
  DeleteTimeSeriesCommand: () => DeleteTimeSeriesCommand,
  DescribeAccessPolicyCommand: () => DescribeAccessPolicyCommand,
  DescribeActionCommand: () => DescribeActionCommand,
  DescribeAssetCommand: () => DescribeAssetCommand,
  DescribeAssetCompositeModelCommand: () => DescribeAssetCompositeModelCommand,
  DescribeAssetModelCommand: () => DescribeAssetModelCommand,
  DescribeAssetModelCompositeModelCommand: () => DescribeAssetModelCompositeModelCommand,
  DescribeAssetPropertyCommand: () => DescribeAssetPropertyCommand,
  DescribeBulkImportJobCommand: () => DescribeBulkImportJobCommand,
  DescribeDashboardCommand: () => DescribeDashboardCommand,
  DescribeDatasetCommand: () => DescribeDatasetCommand,
  DescribeDefaultEncryptionConfigurationCommand: () => DescribeDefaultEncryptionConfigurationCommand,
  DescribeGatewayCapabilityConfigurationCommand: () => DescribeGatewayCapabilityConfigurationCommand,
  DescribeGatewayCommand: () => DescribeGatewayCommand,
  DescribeLoggingOptionsCommand: () => DescribeLoggingOptionsCommand,
  DescribePortalCommand: () => DescribePortalCommand,
  DescribePortalResponseFilterSensitiveLog: () => DescribePortalResponseFilterSensitiveLog,
  DescribeProjectCommand: () => DescribeProjectCommand,
  DescribeStorageConfigurationCommand: () => DescribeStorageConfigurationCommand,
  DescribeTimeSeriesCommand: () => DescribeTimeSeriesCommand,
  DetailedErrorCode: () => DetailedErrorCode,
  DisassociateAssetsCommand: () => DisassociateAssetsCommand,
  DisassociateTimeSeriesFromAssetPropertyCommand: () => DisassociateTimeSeriesFromAssetPropertyCommand,
  DisassociatedDataStorageState: () => DisassociatedDataStorageState,
  EncryptionType: () => EncryptionType,
  ErrorCode: () => ErrorCode,
  ExecuteActionCommand: () => ExecuteActionCommand,
  ExecuteQueryCommand: () => ExecuteQueryCommand,
  ForwardingConfigState: () => ForwardingConfigState,
  GetAssetPropertyAggregatesCommand: () => GetAssetPropertyAggregatesCommand,
  GetAssetPropertyValueCommand: () => GetAssetPropertyValueCommand,
  GetAssetPropertyValueHistoryCommand: () => GetAssetPropertyValueHistoryCommand,
  GetInterpolatedAssetPropertyValuesCommand: () => GetInterpolatedAssetPropertyValuesCommand,
  IdentityType: () => IdentityType,
  ImageFileType: () => ImageFileType,
  InternalFailureException: () => InternalFailureException,
  InvalidRequestException: () => InvalidRequestException,
  InvokeAssistantCommand: () => InvokeAssistantCommand,
  InvokeAssistantRequestFilterSensitiveLog: () => InvokeAssistantRequestFilterSensitiveLog,
  InvokeAssistantResponseFilterSensitiveLog: () => InvokeAssistantResponseFilterSensitiveLog,
  IoTSiteWise: () => IoTSiteWise,
  IoTSiteWiseClient: () => IoTSiteWiseClient,
  IoTSiteWiseServiceException: () => IoTSiteWiseServiceException,
  JobStatus: () => JobStatus,
  LimitExceededException: () => LimitExceededException,
  ListAccessPoliciesCommand: () => ListAccessPoliciesCommand,
  ListActionsCommand: () => ListActionsCommand,
  ListAssetModelCompositeModelsCommand: () => ListAssetModelCompositeModelsCommand,
  ListAssetModelPropertiesCommand: () => ListAssetModelPropertiesCommand,
  ListAssetModelPropertiesFilter: () => ListAssetModelPropertiesFilter,
  ListAssetModelsCommand: () => ListAssetModelsCommand,
  ListAssetPropertiesCommand: () => ListAssetPropertiesCommand,
  ListAssetPropertiesFilter: () => ListAssetPropertiesFilter,
  ListAssetRelationshipsCommand: () => ListAssetRelationshipsCommand,
  ListAssetsCommand: () => ListAssetsCommand,
  ListAssetsFilter: () => ListAssetsFilter,
  ListAssociatedAssetsCommand: () => ListAssociatedAssetsCommand,
  ListBulkImportJobsCommand: () => ListBulkImportJobsCommand,
  ListBulkImportJobsFilter: () => ListBulkImportJobsFilter,
  ListCompositionRelationshipsCommand: () => ListCompositionRelationshipsCommand,
  ListDashboardsCommand: () => ListDashboardsCommand,
  ListDatasetsCommand: () => ListDatasetsCommand,
  ListGatewaysCommand: () => ListGatewaysCommand,
  ListPortalsCommand: () => ListPortalsCommand,
  ListProjectAssetsCommand: () => ListProjectAssetsCommand,
  ListProjectsCommand: () => ListProjectsCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListTimeSeriesCommand: () => ListTimeSeriesCommand,
  ListTimeSeriesType: () => ListTimeSeriesType,
  LoggingLevel: () => LoggingLevel,
  MonitorErrorCode: () => MonitorErrorCode,
  Permission: () => Permission,
  PortalState: () => PortalState,
  PortalType: () => PortalType,
  PreconditionFailedException: () => PreconditionFailedException,
  PropertyDataType: () => PropertyDataType,
  PropertyNotificationState: () => PropertyNotificationState,
  PutDefaultEncryptionConfigurationCommand: () => PutDefaultEncryptionConfigurationCommand,
  PutLoggingOptionsCommand: () => PutLoggingOptionsCommand,
  PutStorageConfigurationCommand: () => PutStorageConfigurationCommand,
  Quality: () => Quality,
  QueryTimeoutException: () => QueryTimeoutException,
  ResourceAlreadyExistsException: () => ResourceAlreadyExistsException,
  ResourceNotFoundException: () => ResourceNotFoundException,
  ResourceType: () => ResourceType,
  ResponseStream: () => ResponseStream,
  ResponseStreamFilterSensitiveLog: () => ResponseStreamFilterSensitiveLog,
  ScalarType: () => ScalarType,
  ServiceUnavailableException: () => ServiceUnavailableException,
  StorageType: () => StorageType,
  TagResourceCommand: () => TagResourceCommand,
  TargetResourceType: () => TargetResourceType,
  ThrottlingException: () => ThrottlingException,
  TimeOrdering: () => TimeOrdering,
  TooManyTagsException: () => TooManyTagsException,
  TraversalDirection: () => TraversalDirection,
  TraversalType: () => TraversalType,
  UnauthorizedException: () => UnauthorizedException,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateAccessPolicyCommand: () => UpdateAccessPolicyCommand,
  UpdateAssetCommand: () => UpdateAssetCommand,
  UpdateAssetModelCommand: () => UpdateAssetModelCommand,
  UpdateAssetModelCompositeModelCommand: () => UpdateAssetModelCompositeModelCommand,
  UpdateAssetPropertyCommand: () => UpdateAssetPropertyCommand,
  UpdateDashboardCommand: () => UpdateDashboardCommand,
  UpdateDatasetCommand: () => UpdateDatasetCommand,
  UpdateGatewayCapabilityConfigurationCommand: () => UpdateGatewayCapabilityConfigurationCommand,
  UpdateGatewayCommand: () => UpdateGatewayCommand,
  UpdatePortalCommand: () => UpdatePortalCommand,
  UpdatePortalRequestFilterSensitiveLog: () => UpdatePortalRequestFilterSensitiveLog,
  UpdateProjectCommand: () => UpdateProjectCommand,
  ValidationException: () => ValidationException,
  WarmTierState: () => WarmTierState,
  __Client: () => import_smithy_client.Client,
  paginateBatchGetAssetPropertyAggregates: () => paginateBatchGetAssetPropertyAggregates,
  paginateBatchGetAssetPropertyValue: () => paginateBatchGetAssetPropertyValue,
  paginateBatchGetAssetPropertyValueHistory: () => paginateBatchGetAssetPropertyValueHistory,
  paginateExecuteQuery: () => paginateExecuteQuery,
  paginateGetAssetPropertyAggregates: () => paginateGetAssetPropertyAggregates,
  paginateGetAssetPropertyValueHistory: () => paginateGetAssetPropertyValueHistory,
  paginateGetInterpolatedAssetPropertyValues: () => paginateGetInterpolatedAssetPropertyValues,
  paginateListAccessPolicies: () => paginateListAccessPolicies,
  paginateListAssetModelCompositeModels: () => paginateListAssetModelCompositeModels,
  paginateListAssetModelProperties: () => paginateListAssetModelProperties,
  paginateListAssetModels: () => paginateListAssetModels,
  paginateListAssetProperties: () => paginateListAssetProperties,
  paginateListAssetRelationships: () => paginateListAssetRelationships,
  paginateListAssets: () => paginateListAssets,
  paginateListAssociatedAssets: () => paginateListAssociatedAssets,
  paginateListBulkImportJobs: () => paginateListBulkImportJobs,
  paginateListCompositionRelationships: () => paginateListCompositionRelationships,
  paginateListDashboards: () => paginateListDashboards,
  paginateListDatasets: () => paginateListDatasets,
  paginateListGateways: () => paginateListGateways,
  paginateListPortals: () => paginateListPortals,
  paginateListProjectAssets: () => paginateListProjectAssets,
  paginateListProjects: () => paginateListProjects,
  paginateListTimeSeries: () => paginateListTimeSeries,
  waitForAssetActive: () => waitForAssetActive,
  waitForAssetModelActive: () => waitForAssetModelActive,
  waitForAssetModelNotExists: () => waitForAssetModelNotExists,
  waitForAssetNotExists: () => waitForAssetNotExists,
  waitForPortalActive: () => waitForPortalActive,
  waitForPortalNotExists: () => waitForPortalNotExists,
  waitUntilAssetActive: () => waitUntilAssetActive,
  waitUntilAssetModelActive: () => waitUntilAssetModelActive,
  waitUntilAssetModelNotExists: () => waitUntilAssetModelNotExists,
  waitUntilAssetNotExists: () => waitUntilAssetNotExists,
  waitUntilPortalActive: () => waitUntilPortalActive,
  waitUntilPortalNotExists: () => waitUntilPortalNotExists
});
module.exports = __toCommonJS(src_exports);

// src/IoTSiteWiseClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_eventstream_serde_config_resolver = require("@smithy/eventstream-serde-config-resolver");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return {
    ...options,
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "iotsitewise"
  };
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/IoTSiteWiseClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var asPartial = /* @__PURE__ */ __name((t) => t, "asPartial");
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = {
    ...asPartial((0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig)),
    ...asPartial((0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig)),
    ...asPartial(getHttpAuthExtensionConfiguration(runtimeConfig))
  };
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return {
    ...runtimeConfig,
    ...(0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    ...(0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    ...(0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    ...resolveHttpAuthRuntimeConfig(extensionConfiguration)
  };
}, "resolveRuntimeExtensions");

// src/IoTSiteWiseClient.ts
var IoTSiteWiseClient = class extends import_smithy_client.Client {
  static {
    __name(this, "IoTSiteWiseClient");
  }
  /**
   * The resolved configuration of IoTSiteWiseClient class. This is resolved and normalized from the {@link IoTSiteWiseClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_eventstream_serde_config_resolver.resolveEventStreamSerdeConfig)(_config_6);
    const _config_8 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_7);
    const _config_9 = resolveRuntimeExtensions(_config_8, configuration?.extensions || []);
    super(_config_9);
    this.config = _config_9;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultIoTSiteWiseHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        })
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/IoTSiteWise.ts


// src/commands/AssociateAssetsCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");



var import_uuid = require("uuid");

// src/models/IoTSiteWiseServiceException.ts

var IoTSiteWiseServiceException = class _IoTSiteWiseServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "IoTSiteWiseServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _IoTSiteWiseServiceException.prototype);
  }
};

// src/models/models_0.ts

var AccessDeniedException = class _AccessDeniedException extends IoTSiteWiseServiceException {
  static {
    __name(this, "AccessDeniedException");
  }
  name = "AccessDeniedException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "AccessDeniedException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _AccessDeniedException.prototype);
  }
};
var Permission = {
  ADMINISTRATOR: "ADMINISTRATOR",
  VIEWER: "VIEWER"
};
var Quality = {
  BAD: "BAD",
  GOOD: "GOOD",
  UNCERTAIN: "UNCERTAIN"
};
var AggregateType = {
  AVERAGE: "AVERAGE",
  COUNT: "COUNT",
  MAXIMUM: "MAXIMUM",
  MINIMUM: "MINIMUM",
  STANDARD_DEVIATION: "STANDARD_DEVIATION",
  SUM: "SUM"
};
var PropertyDataType = {
  BOOLEAN: "BOOLEAN",
  DOUBLE: "DOUBLE",
  INTEGER: "INTEGER",
  STRING: "STRING",
  STRUCT: "STRUCT"
};
var PropertyNotificationState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AssetErrorCode = {
  INTERNAL_FAILURE: "INTERNAL_FAILURE"
};
var ForwardingConfigState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ComputeLocation = {
  CLOUD: "CLOUD",
  EDGE: "EDGE"
};
var AssetModelState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  PROPAGATING: "PROPAGATING",
  UPDATING: "UPDATING"
};
var ErrorCode = {
  INTERNAL_FAILURE: "INTERNAL_FAILURE",
  VALIDATION_ERROR: "VALIDATION_ERROR"
};
var DetailedErrorCode = {
  INCOMPATIBLE_COMPUTE_LOCATION: "INCOMPATIBLE_COMPUTE_LOCATION",
  INCOMPATIBLE_FORWARDING_CONFIGURATION: "INCOMPATIBLE_FORWARDING_CONFIGURATION"
};
var AssetModelType = {
  ASSET_MODEL: "ASSET_MODEL",
  COMPONENT_MODEL: "COMPONENT_MODEL"
};
var AssetModelVersionType = {
  ACTIVE: "ACTIVE",
  LATEST: "LATEST"
};
var AssetRelationshipType = {
  HIERARCHY: "HIERARCHY"
};
var AssetState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  UPDATING: "UPDATING"
};
var ConflictingOperationException = class _ConflictingOperationException extends IoTSiteWiseServiceException {
  static {
    __name(this, "ConflictingOperationException");
  }
  name = "ConflictingOperationException";
  $fault = "client";
  /**
   * <p>The ID of the resource that conflicts with this operation.</p>
   * @public
   */
  resourceId;
  /**
   * <p>The ARN of the resource that conflicts with this operation.</p>
   * @public
   */
  resourceArn;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictingOperationException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConflictingOperationException.prototype);
    this.resourceId = opts.resourceId;
    this.resourceArn = opts.resourceArn;
  }
};
var InternalFailureException = class _InternalFailureException extends IoTSiteWiseServiceException {
  static {
    __name(this, "InternalFailureException");
  }
  name = "InternalFailureException";
  $fault = "server";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalFailureException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalFailureException.prototype);
  }
};
var InvalidRequestException = class _InvalidRequestException extends IoTSiteWiseServiceException {
  static {
    __name(this, "InvalidRequestException");
  }
  name = "InvalidRequestException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InvalidRequestException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _InvalidRequestException.prototype);
  }
};
var LimitExceededException = class _LimitExceededException extends IoTSiteWiseServiceException {
  static {
    __name(this, "LimitExceededException");
  }
  name = "LimitExceededException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "LimitExceededException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _LimitExceededException.prototype);
  }
};
var ResourceAlreadyExistsException = class _ResourceAlreadyExistsException extends IoTSiteWiseServiceException {
  static {
    __name(this, "ResourceAlreadyExistsException");
  }
  name = "ResourceAlreadyExistsException";
  $fault = "client";
  /**
   * <p>The ID of the resource that already exists.</p>
   * @public
   */
  resourceId;
  /**
   * <p>The ARN of the resource that already exists.</p>
   * @public
   */
  resourceArn;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceAlreadyExistsException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceAlreadyExistsException.prototype);
    this.resourceId = opts.resourceId;
    this.resourceArn = opts.resourceArn;
  }
};
var ResourceNotFoundException = class _ResourceNotFoundException extends IoTSiteWiseServiceException {
  static {
    __name(this, "ResourceNotFoundException");
  }
  name = "ResourceNotFoundException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ResourceNotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ResourceNotFoundException.prototype);
  }
};
var ThrottlingException = class _ThrottlingException extends IoTSiteWiseServiceException {
  static {
    __name(this, "ThrottlingException");
  }
  name = "ThrottlingException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ThrottlingException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ThrottlingException.prototype);
  }
};
var AuthMode = {
  IAM: "IAM",
  SSO: "SSO"
};
var TimeOrdering = {
  ASCENDING: "ASCENDING",
  DESCENDING: "DESCENDING"
};
var BatchGetAssetPropertyAggregatesErrorCode = {
  AccessDeniedException: "AccessDeniedException",
  InvalidRequestException: "InvalidRequestException",
  ResourceNotFoundException: "ResourceNotFoundException"
};
var BatchEntryCompletionStatus = {
  ERROR: "ERROR",
  SUCCESS: "SUCCESS"
};
var ServiceUnavailableException = class _ServiceUnavailableException extends IoTSiteWiseServiceException {
  static {
    __name(this, "ServiceUnavailableException");
  }
  name = "ServiceUnavailableException";
  $fault = "server";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ServiceUnavailableException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _ServiceUnavailableException.prototype);
  }
};
var BatchGetAssetPropertyValueErrorCode = {
  AccessDeniedException: "AccessDeniedException",
  InvalidRequestException: "InvalidRequestException",
  ResourceNotFoundException: "ResourceNotFoundException"
};
var BatchGetAssetPropertyValueHistoryErrorCode = {
  AccessDeniedException: "AccessDeniedException",
  InvalidRequestException: "InvalidRequestException",
  ResourceNotFoundException: "ResourceNotFoundException"
};
var BatchPutAssetPropertyValueErrorCode = {
  AccessDeniedException: "AccessDeniedException",
  ConflictingOperationException: "ConflictingOperationException",
  InternalFailureException: "InternalFailureException",
  InvalidRequestException: "InvalidRequestException",
  LimitExceededException: "LimitExceededException",
  ResourceNotFoundException: "ResourceNotFoundException",
  ServiceUnavailableException: "ServiceUnavailableException",
  ThrottlingException: "ThrottlingException",
  TimestampOutOfRangeException: "TimestampOutOfRangeException"
};
var PreconditionFailedException = class _PreconditionFailedException extends IoTSiteWiseServiceException {
  static {
    __name(this, "PreconditionFailedException");
  }
  name = "PreconditionFailedException";
  $fault = "client";
  /**
   * <p>The ID of the resource on which precondition failed with this operation.</p>
   * @public
   */
  resourceId;
  /**
   * <p>The ARN of the resource on which precondition failed with this operation.</p>
   * @public
   */
  resourceArn;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "PreconditionFailedException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _PreconditionFailedException.prototype);
    this.resourceId = opts.resourceId;
    this.resourceArn = opts.resourceArn;
  }
};
var ColumnName = {
  ALIAS: "ALIAS",
  ASSET_ID: "ASSET_ID",
  DATA_TYPE: "DATA_TYPE",
  PROPERTY_ID: "PROPERTY_ID",
  QUALITY: "QUALITY",
  TIMESTAMP_NANO_OFFSET: "TIMESTAMP_NANO_OFFSET",
  TIMESTAMP_SECONDS: "TIMESTAMP_SECONDS",
  VALUE: "VALUE"
};
var JobStatus = {
  CANCELLED: "CANCELLED",
  COMPLETED: "COMPLETED",
  COMPLETED_WITH_FAILURES: "COMPLETED_WITH_FAILURES",
  FAILED: "FAILED",
  PENDING: "PENDING",
  RUNNING: "RUNNING"
};
var DatasetSourceFormat = {
  KNOWLEDGE_BASE: "KNOWLEDGE_BASE"
};
var DatasetSourceType = {
  KENDRA: "KENDRA"
};
var DatasetState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  UPDATING: "UPDATING"
};
var ImageFileType = {
  PNG: "PNG"
};
var PortalType = {
  SITEWISE_PORTAL_V1: "SITEWISE_PORTAL_V1",
  SITEWISE_PORTAL_V2: "SITEWISE_PORTAL_V2"
};
var MonitorErrorCode = {
  INTERNAL_FAILURE: "INTERNAL_FAILURE",
  LIMIT_EXCEEDED: "LIMIT_EXCEEDED",
  VALIDATION_ERROR: "VALIDATION_ERROR"
};
var PortalState = {
  ACTIVE: "ACTIVE",
  CREATING: "CREATING",
  DELETING: "DELETING",
  FAILED: "FAILED",
  PENDING: "PENDING",
  UPDATING: "UPDATING"
};
var ConfigurationState = {
  ACTIVE: "ACTIVE",
  UPDATE_FAILED: "UPDATE_FAILED",
  UPDATE_IN_PROGRESS: "UPDATE_IN_PROGRESS"
};
var EncryptionType = {
  KMS_BASED_ENCRYPTION: "KMS_BASED_ENCRYPTION",
  SITEWISE_DEFAULT_ENCRYPTION: "SITEWISE_DEFAULT_ENCRYPTION"
};
var CapabilitySyncStatus = {
  IN_SYNC: "IN_SYNC",
  NOT_APPLICABLE: "NOT_APPLICABLE",
  OUT_OF_SYNC: "OUT_OF_SYNC",
  SYNC_FAILED: "SYNC_FAILED",
  UNKNOWN: "UNKNOWN"
};
var LoggingLevel = {
  ERROR: "ERROR",
  INFO: "INFO",
  OFF: "OFF"
};
var DisassociatedDataStorageState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var StorageType = {
  MULTI_LAYER_STORAGE: "MULTI_LAYER_STORAGE",
  SITEWISE_DEFAULT_STORAGE: "SITEWISE_DEFAULT_STORAGE"
};
var WarmTierState = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ScalarType = {
  BOOLEAN: "BOOLEAN",
  DOUBLE: "DOUBLE",
  INT: "INT",
  STRING: "STRING",
  TIMESTAMP: "TIMESTAMP"
};
var QueryTimeoutException = class _QueryTimeoutException extends IoTSiteWiseServiceException {
  static {
    __name(this, "QueryTimeoutException");
  }
  name = "QueryTimeoutException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "QueryTimeoutException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _QueryTimeoutException.prototype);
  }
};
var ValidationException = class _ValidationException extends IoTSiteWiseServiceException {
  static {
    __name(this, "ValidationException");
  }
  name = "ValidationException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ValidationException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ValidationException.prototype);
  }
};
var ResponseStream;
((ResponseStream3) => {
  ResponseStream3.visit = /* @__PURE__ */ __name((value, visitor) => {
    if (value.trace !== void 0)
      return visitor.trace(value.trace);
    if (value.output !== void 0)
      return visitor.output(value.output);
    if (value.accessDeniedException !== void 0)
      return visitor.accessDeniedException(value.accessDeniedException);
    if (value.conflictingOperationException !== void 0)
      return visitor.conflictingOperationException(value.conflictingOperationException);
    if (value.internalFailureException !== void 0)
      return visitor.internalFailureException(value.internalFailureException);
    if (value.invalidRequestException !== void 0)
      return visitor.invalidRequestException(value.invalidRequestException);
    if (value.limitExceededException !== void 0)
      return visitor.limitExceededException(value.limitExceededException);
    if (value.resourceNotFoundException !== void 0)
      return visitor.resourceNotFoundException(value.resourceNotFoundException);
    if (value.throttlingException !== void 0)
      return visitor.throttlingException(value.throttlingException);
    return visitor._(value.$unknown[0], value.$unknown[1]);
  }, "visit");
})(ResponseStream || (ResponseStream = {}));
var IdentityType = {
  GROUP: "GROUP",
  IAM: "IAM",
  USER: "USER"
};
var ResourceType = {
  PORTAL: "PORTAL",
  PROJECT: "PROJECT"
};
var TargetResourceType = {
  ASSET: "ASSET"
};
var ListAssetModelPropertiesFilter = {
  ALL: "ALL",
  BASE: "BASE"
};
var ListAssetPropertiesFilter = {
  ALL: "ALL",
  BASE: "BASE"
};
var TraversalType = {
  PATH_TO_ROOT: "PATH_TO_ROOT"
};
var ListAssetsFilter = {
  ALL: "ALL",
  TOP_LEVEL: "TOP_LEVEL"
};
var TraversalDirection = {
  CHILD: "CHILD",
  PARENT: "PARENT"
};
var CreatePortalRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.portalContactEmail && { portalContactEmail: import_smithy_client.SENSITIVE_STRING },
  ...obj.notificationSenderEmail && { notificationSenderEmail: import_smithy_client.SENSITIVE_STRING }
}), "CreatePortalRequestFilterSensitiveLog");
var DescribePortalResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.portalContactEmail && { portalContactEmail: import_smithy_client.SENSITIVE_STRING },
  ...obj.notificationSenderEmail && { notificationSenderEmail: import_smithy_client.SENSITIVE_STRING }
}), "DescribePortalResponseFilterSensitiveLog");
var InvokeAssistantRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.message && { message: import_smithy_client.SENSITIVE_STRING }
}), "InvokeAssistantRequestFilterSensitiveLog");
var ResponseStreamFilterSensitiveLog = /* @__PURE__ */ __name((obj) => {
  if (obj.trace !== void 0)
    return { trace: obj.trace };
  if (obj.output !== void 0)
    return { output: obj.output };
  if (obj.accessDeniedException !== void 0)
    return { accessDeniedException: obj.accessDeniedException };
  if (obj.conflictingOperationException !== void 0)
    return { conflictingOperationException: obj.conflictingOperationException };
  if (obj.internalFailureException !== void 0)
    return { internalFailureException: obj.internalFailureException };
  if (obj.invalidRequestException !== void 0)
    return { invalidRequestException: obj.invalidRequestException };
  if (obj.limitExceededException !== void 0)
    return { limitExceededException: obj.limitExceededException };
  if (obj.resourceNotFoundException !== void 0)
    return { resourceNotFoundException: obj.resourceNotFoundException };
  if (obj.throttlingException !== void 0)
    return { throttlingException: obj.throttlingException };
  if (obj.$unknown !== void 0)
    return { [obj.$unknown[0]]: "UNKNOWN" };
}, "ResponseStreamFilterSensitiveLog");
var InvokeAssistantResponseFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.body && { body: "STREAMING_CONTENT" }
}), "InvokeAssistantResponseFilterSensitiveLog");

// src/models/models_1.ts

var ListBulkImportJobsFilter = {
  ALL: "ALL",
  CANCELLED: "CANCELLED",
  COMPLETED: "COMPLETED",
  COMPLETED_WITH_FAILURES: "COMPLETED_WITH_FAILURES",
  FAILED: "FAILED",
  PENDING: "PENDING",
  RUNNING: "RUNNING"
};
var UnauthorizedException = class _UnauthorizedException extends IoTSiteWiseServiceException {
  static {
    __name(this, "UnauthorizedException");
  }
  name = "UnauthorizedException";
  $fault = "client";
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "UnauthorizedException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _UnauthorizedException.prototype);
  }
};
var ListTimeSeriesType = {
  ASSOCIATED: "ASSOCIATED",
  DISASSOCIATED: "DISASSOCIATED"
};
var TooManyTagsException = class _TooManyTagsException extends IoTSiteWiseServiceException {
  static {
    __name(this, "TooManyTagsException");
  }
  name = "TooManyTagsException";
  $fault = "client";
  /**
   * <p>The name of the resource with too many tags.</p>
   * @public
   */
  resourceName;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyTagsException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TooManyTagsException.prototype);
    this.resourceName = opts.resourceName;
  }
};
var UpdatePortalRequestFilterSensitiveLog = /* @__PURE__ */ __name((obj) => ({
  ...obj,
  ...obj.portalContactEmail && { portalContactEmail: import_smithy_client.SENSITIVE_STRING },
  ...obj.notificationSenderEmail && { notificationSenderEmail: import_smithy_client.SENSITIVE_STRING }
}), "UpdatePortalRequestFilterSensitiveLog");

// src/protocols/Aws_restJson1.ts
var se_AssociateAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/assets/{assetId}/associate");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      childAssetId: [],
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      hierarchyId: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateAssetsCommand");
var se_AssociateTimeSeriesToAssetPropertyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/timeseries/associate");
  const query = (0, import_smithy_client.map)({
    [_a]: [, (0, import_smithy_client.expectNonNull)(input[_a], `alias`)],
    [_aI]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `assetId`)],
    [_pI]: [, (0, import_smithy_client.expectNonNull)(input[_pI], `propertyId`)]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_AssociateTimeSeriesToAssetPropertyCommand");
var se_BatchAssociateProjectAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/projects/{projectId}/assets/associate");
  b.p("projectId", () => input.projectId, "{projectId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetIds: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchAssociateProjectAssetsCommand");
var se_BatchDisassociateProjectAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/projects/{projectId}/assets/disassociate");
  b.p("projectId", () => input.projectId, "{projectId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetIds: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchDisassociateProjectAssetsCommand");
var se_BatchGetAssetPropertyAggregatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/properties/batch/aggregates");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      entries: (_) => se_BatchGetAssetPropertyAggregatesEntries(_, context),
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetAssetPropertyAggregatesCommand");
var se_BatchGetAssetPropertyValueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/properties/batch/latest");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      entries: (_) => (0, import_smithy_client._json)(_),
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetAssetPropertyValueCommand");
var se_BatchGetAssetPropertyValueHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/properties/batch/history");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      entries: (_) => se_BatchGetAssetPropertyValueHistoryEntries(_, context),
      maxResults: [],
      nextToken: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchGetAssetPropertyValueHistoryCommand");
var se_BatchPutAssetPropertyValueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/properties");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      entries: (_) => se_PutAssetPropertyValueEntries(_, context)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_BatchPutAssetPropertyValueCommand");
var se_CreateAccessPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/access-policies");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accessPolicyIdentity: (_) => (0, import_smithy_client._json)(_),
      accessPolicyPermission: [],
      accessPolicyResource: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAccessPolicyCommand");
var se_CreateAssetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/assets");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetDescription: [],
      assetExternalId: [],
      assetId: [],
      assetModelId: [],
      assetName: [],
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAssetCommand");
var se_CreateAssetModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/asset-models");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetModelCompositeModels: (_) => se_AssetModelCompositeModelDefinitions(_, context),
      assetModelDescription: [],
      assetModelExternalId: [],
      assetModelHierarchies: (_) => (0, import_smithy_client._json)(_),
      assetModelId: [],
      assetModelName: [],
      assetModelProperties: (_) => (0, import_smithy_client._json)(_),
      assetModelType: [],
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAssetModelCommand");
var se_CreateAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    "content-type": "application/json",
    [_im]: input[_iM],
    [_inm]: input[_iNM],
    [_mfvt]: input[_mFVT]
  });
  b.bp("/asset-models/{assetModelId}/composite-models");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetModelCompositeModelDescription: [],
      assetModelCompositeModelExternalId: [],
      assetModelCompositeModelId: [],
      assetModelCompositeModelName: [],
      assetModelCompositeModelProperties: (_) => (0, import_smithy_client._json)(_),
      assetModelCompositeModelType: [],
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      composedAssetModelId: [],
      parentAssetModelCompositeModelId: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateAssetModelCompositeModelCommand");
var se_CreateBulkImportJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/jobs");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      adaptiveIngestion: [],
      deleteFilesAfterImport: [],
      errorReportLocation: (_) => (0, import_smithy_client._json)(_),
      files: (_) => (0, import_smithy_client._json)(_),
      jobConfiguration: (_) => (0, import_smithy_client._json)(_),
      jobName: [],
      jobRoleArn: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateBulkImportJobCommand");
var se_CreateDashboardCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/dashboards");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      dashboardDefinition: [],
      dashboardDescription: [],
      dashboardName: [],
      projectId: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDashboardCommand");
var se_CreateDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datasets");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      datasetDescription: [],
      datasetId: [],
      datasetName: [],
      datasetSource: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateDatasetCommand");
var se_CreateGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/20200301/gateways");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      gatewayName: [],
      gatewayPlatform: (_) => (0, import_smithy_client._json)(_),
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateGatewayCommand");
var se_CreatePortalCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/portals");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      alarms: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      notificationSenderEmail: [],
      portalAuthMode: [],
      portalContactEmail: [],
      portalDescription: [],
      portalLogoImageFile: (_) => se_ImageFile(_, context),
      portalName: [],
      portalType: [],
      portalTypeConfiguration: (_) => (0, import_smithy_client._json)(_),
      roleArn: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePortalCommand");
var se_CreateProjectCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/projects");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      portalId: [],
      projectDescription: [],
      projectName: [],
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateProjectCommand");
var se_DeleteAccessPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/access-policies/{accessPolicyId}");
  b.p("accessPolicyId", () => input.accessPolicyId, "{accessPolicyId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteAccessPolicyCommand");
var se_DeleteAssetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteAssetCommand");
var se_DeleteAssetModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    [_im]: input[_iM],
    [_inm]: input[_iNM],
    [_mfvt]: input[_mFVT]
  });
  b.bp("/asset-models/{assetModelId}");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteAssetModelCommand");
var se_DeleteAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    [_im]: input[_iM],
    [_inm]: input[_iNM],
    [_mfvt]: input[_mFVT]
  });
  b.bp("/asset-models/{assetModelId}/composite-models/{assetModelCompositeModelId}");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  b.p("assetModelCompositeModelId", () => input.assetModelCompositeModelId, "{assetModelCompositeModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteAssetModelCompositeModelCommand");
var se_DeleteDashboardCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dashboards/{dashboardId}");
  b.p("dashboardId", () => input.dashboardId, "{dashboardId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteDashboardCommand");
var se_DeleteDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetId}");
  b.p("datasetId", () => input.datasetId, "{datasetId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteDatasetCommand");
var se_DeleteGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/20200301/gateways/{gatewayId}");
  b.p("gatewayId", () => input.gatewayId, "{gatewayId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteGatewayCommand");
var se_DeletePortalCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/portals/{portalId}");
  b.p("portalId", () => input.portalId, "{portalId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeletePortalCommand");
var se_DeleteProjectCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/projects/{projectId}");
  b.p("projectId", () => input.projectId, "{projectId}", false);
  const query = (0, import_smithy_client.map)({
    [_cT]: [, input[_cT] ?? (0, import_uuid.v4)()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteProjectCommand");
var se_DeleteTimeSeriesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/timeseries/delete");
  const query = (0, import_smithy_client.map)({
    [_a]: [, input[_a]],
    [_aI]: [, input[_aI]],
    [_pI]: [, input[_pI]]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_DeleteTimeSeriesCommand");
var se_DescribeAccessPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/access-policies/{accessPolicyId}");
  b.p("accessPolicyId", () => input.accessPolicyId, "{accessPolicyId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAccessPolicyCommand");
var se_DescribeActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/actions/{actionId}");
  b.p("actionId", () => input.actionId, "{actionId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeActionCommand");
var se_DescribeAssetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  const query = (0, import_smithy_client.map)({
    [_eP]: [() => input.excludeProperties !== void 0, () => input[_eP].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeAssetCommand");
var se_DescribeAssetCompositeModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}/composite-models/{assetCompositeModelId}");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  b.p("assetCompositeModelId", () => input.assetCompositeModelId, "{assetCompositeModelId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAssetCompositeModelCommand");
var se_DescribeAssetModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/asset-models/{assetModelId}");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_eP]: [() => input.excludeProperties !== void 0, () => input[_eP].toString()],
    [_aMV]: [, input[_aMV]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeAssetModelCommand");
var se_DescribeAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/asset-models/{assetModelId}/composite-models/{assetModelCompositeModelId}");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  b.p("assetModelCompositeModelId", () => input.assetModelCompositeModelId, "{assetModelCompositeModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_aMV]: [, input[_aMV]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeAssetModelCompositeModelCommand");
var se_DescribeAssetPropertyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}/properties/{propertyId}");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  b.p("propertyId", () => input.propertyId, "{propertyId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeAssetPropertyCommand");
var se_DescribeBulkImportJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs/{jobId}");
  b.p("jobId", () => input.jobId, "{jobId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeBulkImportJobCommand");
var se_DescribeDashboardCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dashboards/{dashboardId}");
  b.p("dashboardId", () => input.dashboardId, "{dashboardId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDashboardCommand");
var se_DescribeDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets/{datasetId}");
  b.p("datasetId", () => input.datasetId, "{datasetId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDatasetCommand");
var se_DescribeDefaultEncryptionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/configuration/account/encryption");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeDefaultEncryptionConfigurationCommand");
var se_DescribeGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/20200301/gateways/{gatewayId}");
  b.p("gatewayId", () => input.gatewayId, "{gatewayId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeGatewayCommand");
var se_DescribeGatewayCapabilityConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/20200301/gateways/{gatewayId}/capability/{capabilityNamespace}");
  b.p("gatewayId", () => input.gatewayId, "{gatewayId}", false);
  b.p("capabilityNamespace", () => input.capabilityNamespace, "{capabilityNamespace}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeGatewayCapabilityConfigurationCommand");
var se_DescribeLoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/logging");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeLoggingOptionsCommand");
var se_DescribePortalCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/portals/{portalId}");
  b.p("portalId", () => input.portalId, "{portalId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribePortalCommand");
var se_DescribeProjectCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/projects/{projectId}");
  b.p("projectId", () => input.projectId, "{projectId}", false);
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeProjectCommand");
var se_DescribeStorageConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/configuration/account/storage");
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_DescribeStorageConfigurationCommand");
var se_DescribeTimeSeriesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/timeseries/describe");
  const query = (0, import_smithy_client.map)({
    [_a]: [, input[_a]],
    [_aI]: [, input[_aI]],
    [_pI]: [, input[_pI]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_DescribeTimeSeriesCommand");
var se_DisassociateAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/assets/{assetId}/disassociate");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      childAssetId: [],
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      hierarchyId: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DisassociateAssetsCommand");
var se_DisassociateTimeSeriesFromAssetPropertyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/timeseries/disassociate");
  const query = (0, import_smithy_client.map)({
    [_a]: [, (0, import_smithy_client.expectNonNull)(input[_a], `alias`)],
    [_aI]: [, (0, import_smithy_client.expectNonNull)(input[_aI], `assetId`)],
    [_pI]: [, (0, import_smithy_client.expectNonNull)(input[_pI], `propertyId`)]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_DisassociateTimeSeriesFromAssetPropertyCommand");
var se_ExecuteActionCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/actions");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      actionDefinitionId: [],
      actionPayload: (_) => (0, import_smithy_client._json)(_),
      clientToken: [],
      targetResource: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ExecuteActionCommand");
var se_ExecuteQueryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/queries/execution");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      maxResults: [],
      nextToken: [],
      queryStatement: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ExecuteQueryCommand");
var se_GetAssetPropertyAggregatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/properties/aggregates");
  const query = (0, import_smithy_client.map)({
    [_aI]: [, input[_aI]],
    [_pI]: [, input[_pI]],
    [_pA]: [, input[_pA]],
    [_aT]: [(0, import_smithy_client.expectNonNull)(input.aggregateTypes, `aggregateTypes`) != null, () => input[_aT] || []],
    [_r]: [, (0, import_smithy_client.expectNonNull)(input[_r], `resolution`)],
    [_q]: [() => input.qualities !== void 0, () => input[_q] || []],
    [_sD]: [(0, import_smithy_client.expectNonNull)(input.startDate, `startDate`) != null, () => (0, import_smithy_client.serializeDateTime)(input[_sD]).toString()],
    [_eD]: [(0, import_smithy_client.expectNonNull)(input.endDate, `endDate`) != null, () => (0, import_smithy_client.serializeDateTime)(input[_eD]).toString()],
    [_tO]: [, input[_tO]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetAssetPropertyAggregatesCommand");
var se_GetAssetPropertyValueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/properties/latest");
  const query = (0, import_smithy_client.map)({
    [_aI]: [, input[_aI]],
    [_pI]: [, input[_pI]],
    [_pA]: [, input[_pA]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetAssetPropertyValueCommand");
var se_GetAssetPropertyValueHistoryCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/properties/history");
  const query = (0, import_smithy_client.map)({
    [_aI]: [, input[_aI]],
    [_pI]: [, input[_pI]],
    [_pA]: [, input[_pA]],
    [_sD]: [() => input.startDate !== void 0, () => (0, import_smithy_client.serializeDateTime)(input[_sD]).toString()],
    [_eD]: [() => input.endDate !== void 0, () => (0, import_smithy_client.serializeDateTime)(input[_eD]).toString()],
    [_q]: [() => input.qualities !== void 0, () => input[_q] || []],
    [_tO]: [, input[_tO]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetAssetPropertyValueHistoryCommand");
var se_GetInterpolatedAssetPropertyValuesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/properties/interpolated");
  const query = (0, import_smithy_client.map)({
    [_aI]: [, input[_aI]],
    [_pI]: [, input[_pI]],
    [_pA]: [, input[_pA]],
    [_sTIS]: [(0, import_smithy_client.expectNonNull)(input.startTimeInSeconds, `startTimeInSeconds`) != null, () => input[_sTIS].toString()],
    [_sTOIN]: [() => input.startTimeOffsetInNanos !== void 0, () => input[_sTOIN].toString()],
    [_eTIS]: [(0, import_smithy_client.expectNonNull)(input.endTimeInSeconds, `endTimeInSeconds`) != null, () => input[_eTIS].toString()],
    [_eTOIN]: [() => input.endTimeOffsetInNanos !== void 0, () => input[_eTOIN].toString()],
    [_qu]: [, (0, import_smithy_client.expectNonNull)(input[_qu], `quality`)],
    [_iIS]: [(0, import_smithy_client.expectNonNull)(input.intervalInSeconds, `intervalInSeconds`) != null, () => input[_iIS].toString()],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_t]: [, (0, import_smithy_client.expectNonNull)(input[_t], `type`)],
    [_iWIS]: [() => input.intervalWindowInSeconds !== void 0, () => input[_iWIS].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_GetInterpolatedAssetPropertyValuesCommand");
var se_InvokeAssistantCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/assistant/invocation");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      conversationId: [],
      enableTrace: [],
      message: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_InvokeAssistantCommand");
var se_ListAccessPoliciesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/access-policies");
  const query = (0, import_smithy_client.map)({
    [_iT]: [, input[_iT]],
    [_iI]: [, input[_iI]],
    [_rT]: [, input[_rT]],
    [_rI]: [, input[_rI]],
    [_iA]: [, input[_iA]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAccessPoliciesCommand");
var se_ListActionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/actions");
  const query = (0, import_smithy_client.map)({
    [_tRT]: [, (0, import_smithy_client.expectNonNull)(input[_tRT], `targetResourceType`)],
    [_tRI]: [, (0, import_smithy_client.expectNonNull)(input[_tRI], `targetResourceId`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListActionsCommand");
var se_ListAssetModelCompositeModelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/asset-models/{assetModelId}/composite-models");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_aMV]: [, input[_aMV]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssetModelCompositeModelsCommand");
var se_ListAssetModelPropertiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/asset-models/{assetModelId}/properties");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_f]: [, input[_f]],
    [_aMV]: [, input[_aMV]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssetModelPropertiesCommand");
var se_ListAssetModelsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/asset-models");
  const query = (0, import_smithy_client.map)({
    [_aMT]: [() => input.assetModelTypes !== void 0, () => input[_aMT] || []],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_aMV]: [, input[_aMV]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssetModelsCommand");
var se_ListAssetPropertiesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}/properties");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_f]: [, input[_f]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssetPropertiesCommand");
var se_ListAssetRelationshipsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}/assetRelationships");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  const query = (0, import_smithy_client.map)({
    [_tT]: [, (0, import_smithy_client.expectNonNull)(input[_tT], `traversalType`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssetRelationshipsCommand");
var se_ListAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_aMI]: [, input[_aMI]],
    [_f]: [, input[_f]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssetsCommand");
var se_ListAssociatedAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/assets/{assetId}/hierarchies");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  const query = (0, import_smithy_client.map)({
    [_hI]: [, input[_hI]],
    [_tD]: [, input[_tD]],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListAssociatedAssetsCommand");
var se_ListBulkImportJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/jobs");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_f]: [, input[_f]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "data." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListBulkImportJobsCommand");
var se_ListCompositionRelationshipsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/asset-models/{assetModelId}/composition-relationships");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListCompositionRelationshipsCommand");
var se_ListDashboardsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/dashboards");
  const query = (0, import_smithy_client.map)({
    [_pIr]: [, (0, import_smithy_client.expectNonNull)(input[_pIr], `projectId`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDashboardsCommand");
var se_ListDatasetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/datasets");
  const query = (0, import_smithy_client.map)({
    [_sT]: [, (0, import_smithy_client.expectNonNull)(input[_sT], `sourceType`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListDatasetsCommand");
var se_ListGatewaysCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/20200301/gateways");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListGatewaysCommand");
var se_ListPortalsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/portals");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPortalsCommand");
var se_ListProjectAssetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/projects/{projectId}/assets");
  b.p("projectId", () => input.projectId, "{projectId}", false);
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListProjectAssetsCommand");
var se_ListProjectsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/projects");
  const query = (0, import_smithy_client.map)({
    [_pIo]: [, (0, import_smithy_client.expectNonNull)(input[_pIo], `portalId`)],
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListProjectsCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListTimeSeriesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/timeseries");
  const query = (0, import_smithy_client.map)({
    [_nT]: [, input[_nT]],
    [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
    [_aI]: [, input[_aI]],
    [_aP]: [, input[_aP]],
    [_tST]: [, input[_tST]]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListTimeSeriesCommand");
var se_PutDefaultEncryptionConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/configuration/account/encryption");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      encryptionType: [],
      kmsKeyId: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutDefaultEncryptionConfigurationCommand");
var se_PutLoggingOptionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/logging");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      loggingOptions: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutLoggingOptionsCommand");
var se_PutStorageConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/configuration/account/storage");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      disassociatedDataStorage: [],
      multiLayerStorage: (_) => (0, import_smithy_client._json)(_),
      retentionPeriod: (_) => (0, import_smithy_client._json)(_),
      storageType: [],
      warmTier: [],
      warmTierRetentionPeriod: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_PutStorageConfigurationCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)]
  });
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tags: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).q(query).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/tags");
  const query = (0, import_smithy_client.map)({
    [_rA]: [, (0, import_smithy_client.expectNonNull)(input[_rA], `resourceArn`)],
    [_tK]: [(0, import_smithy_client.expectNonNull)(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []]
  });
  let body;
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("DELETE").h(headers).q(query).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateAccessPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/access-policies/{accessPolicyId}");
  b.p("accessPolicyId", () => input.accessPolicyId, "{accessPolicyId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accessPolicyIdentity: (_) => (0, import_smithy_client._json)(_),
      accessPolicyPermission: [],
      accessPolicyResource: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAccessPolicyCommand");
var se_UpdateAssetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/assets/{assetId}");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetDescription: [],
      assetExternalId: [],
      assetName: [],
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAssetCommand");
var se_UpdateAssetModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    "content-type": "application/json",
    [_im]: input[_iM],
    [_inm]: input[_iNM],
    [_mfvt]: input[_mFVT]
  });
  b.bp("/asset-models/{assetModelId}");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetModelCompositeModels: (_) => se_AssetModelCompositeModels(_, context),
      assetModelDescription: [],
      assetModelExternalId: [],
      assetModelHierarchies: (_) => (0, import_smithy_client._json)(_),
      assetModelName: [],
      assetModelProperties: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAssetModelCommand");
var se_UpdateAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = (0, import_smithy_client.map)({}, import_smithy_client.isSerializableHeaderValue, {
    "content-type": "application/json",
    [_im]: input[_iM],
    [_inm]: input[_iNM],
    [_mfvt]: input[_mFVT]
  });
  b.bp("/asset-models/{assetModelId}/composite-models/{assetModelCompositeModelId}");
  b.p("assetModelId", () => input.assetModelId, "{assetModelId}", false);
  b.p("assetModelCompositeModelId", () => input.assetModelCompositeModelId, "{assetModelCompositeModelId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      assetModelCompositeModelDescription: [],
      assetModelCompositeModelExternalId: [],
      assetModelCompositeModelName: [],
      assetModelCompositeModelProperties: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()]
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAssetModelCompositeModelCommand");
var se_UpdateAssetPropertyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/assets/{assetId}/properties/{propertyId}");
  b.p("assetId", () => input.assetId, "{assetId}", false);
  b.p("propertyId", () => input.propertyId, "{propertyId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      propertyAlias: [],
      propertyNotificationState: [],
      propertyUnit: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateAssetPropertyCommand");
var se_UpdateDashboardCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/dashboards/{dashboardId}");
  b.p("dashboardId", () => input.dashboardId, "{dashboardId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      dashboardDefinition: [],
      dashboardDescription: [],
      dashboardName: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateDashboardCommand");
var se_UpdateDatasetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/datasets/{datasetId}");
  b.p("datasetId", () => input.datasetId, "{datasetId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      datasetDescription: [],
      datasetName: [],
      datasetSource: (_) => (0, import_smithy_client._json)(_)
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateDatasetCommand");
var se_UpdateGatewayCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/20200301/gateways/{gatewayId}");
  b.p("gatewayId", () => input.gatewayId, "{gatewayId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      gatewayName: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateGatewayCommand");
var se_UpdateGatewayCapabilityConfigurationCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/20200301/gateways/{gatewayId}/capability");
  b.p("gatewayId", () => input.gatewayId, "{gatewayId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      capabilityConfiguration: [],
      capabilityNamespace: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "api." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_UpdateGatewayCapabilityConfigurationCommand");
var se_UpdatePortalCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/portals/{portalId}");
  b.p("portalId", () => input.portalId, "{portalId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      alarms: (_) => (0, import_smithy_client._json)(_),
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      notificationSenderEmail: [],
      portalContactEmail: [],
      portalDescription: [],
      portalLogoImage: (_) => se_Image(_, context),
      portalName: [],
      portalType: [],
      portalTypeConfiguration: (_) => (0, import_smithy_client._json)(_),
      roleArn: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdatePortalCommand");
var se_UpdateProjectCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/projects/{projectId}");
  b.p("projectId", () => input.projectId, "{projectId}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      clientToken: [true, (_) => _ ?? (0, import_uuid.v4)()],
      projectDescription: [],
      projectName: []
    })
  );
  let { hostname: resolvedHostname } = await context.endpoint();
  if (context.disableHostPrefix !== true) {
    resolvedHostname = "monitor." + resolvedHostname;
    if (!(0, import_protocol_http.isValidHostname)(resolvedHostname)) {
      throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
    }
  }
  b.hn(resolvedHostname);
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateProjectCommand");
var de_AssociateAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AssociateAssetsCommand");
var de_AssociateTimeSeriesToAssetPropertyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AssociateTimeSeriesToAssetPropertyCommand");
var de_BatchAssociateProjectAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchAssociateProjectAssetsCommand");
var de_BatchDisassociateProjectAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errors: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchDisassociateProjectAssetsCommand");
var de_BatchGetAssetPropertyAggregatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errorEntries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    skippedEntries: (_) => de_BatchGetAssetPropertyAggregatesSkippedEntries(_, context),
    successEntries: (_) => de_BatchGetAssetPropertyAggregatesSuccessEntries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetAssetPropertyAggregatesCommand");
var de_BatchGetAssetPropertyValueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errorEntries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    skippedEntries: (_) => de_BatchGetAssetPropertyValueSkippedEntries(_, context),
    successEntries: (_) => de_BatchGetAssetPropertyValueSuccessEntries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetAssetPropertyValueCommand");
var de_BatchGetAssetPropertyValueHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errorEntries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    skippedEntries: (_) => de_BatchGetAssetPropertyValueHistorySkippedEntries(_, context),
    successEntries: (_) => de_BatchGetAssetPropertyValueHistorySuccessEntries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchGetAssetPropertyValueHistoryCommand");
var de_BatchPutAssetPropertyValueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    errorEntries: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_BatchPutAssetPropertyValueCommand");
var de_CreateAccessPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    accessPolicyArn: import_smithy_client.expectString,
    accessPolicyId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateAccessPolicyCommand");
var de_CreateAssetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetArn: import_smithy_client.expectString,
    assetId: import_smithy_client.expectString,
    assetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateAssetCommand");
var de_CreateAssetModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelArn: import_smithy_client.expectString,
    assetModelId: import_smithy_client.expectString,
    assetModelStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateAssetModelCommand");
var de_CreateAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelCompositeModelId: import_smithy_client.expectString,
    assetModelCompositeModelPath: import_smithy_client._json,
    assetModelStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateAssetModelCompositeModelCommand");
var de_CreateBulkImportJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    jobId: import_smithy_client.expectString,
    jobName: import_smithy_client.expectString,
    jobStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateBulkImportJobCommand");
var de_CreateDashboardCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    dashboardArn: import_smithy_client.expectString,
    dashboardId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDashboardCommand");
var de_CreateDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetArn: import_smithy_client.expectString,
    datasetId: import_smithy_client.expectString,
    datasetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateDatasetCommand");
var de_CreateGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    gatewayArn: import_smithy_client.expectString,
    gatewayId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateGatewayCommand");
var de_CreatePortalCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    portalArn: import_smithy_client.expectString,
    portalId: import_smithy_client.expectString,
    portalStartUrl: import_smithy_client.expectString,
    portalStatus: import_smithy_client._json,
    ssoApplicationId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePortalCommand");
var de_CreateProjectCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    projectArn: import_smithy_client.expectString,
    projectId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateProjectCommand");
var de_DeleteAccessPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteAccessPolicyCommand");
var de_DeleteAssetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteAssetCommand");
var de_DeleteAssetModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteAssetModelCommand");
var de_DeleteAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteAssetModelCompositeModelCommand");
var de_DeleteDashboardCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteDashboardCommand");
var de_DeleteDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeleteDatasetCommand");
var de_DeleteGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteGatewayCommand");
var de_DeletePortalCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    portalStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DeletePortalCommand");
var de_DeleteProjectCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 204 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteProjectCommand");
var de_DeleteTimeSeriesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteTimeSeriesCommand");
var de_DescribeAccessPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    accessPolicyArn: import_smithy_client.expectString,
    accessPolicyCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    accessPolicyId: import_smithy_client.expectString,
    accessPolicyIdentity: import_smithy_client._json,
    accessPolicyLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    accessPolicyPermission: import_smithy_client.expectString,
    accessPolicyResource: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAccessPolicyCommand");
var de_DescribeActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionDefinitionId: import_smithy_client.expectString,
    actionId: import_smithy_client.expectString,
    actionPayload: import_smithy_client._json,
    executionTime: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    targetResource: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeActionCommand");
var de_DescribeAssetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetArn: import_smithy_client.expectString,
    assetCompositeModelSummaries: import_smithy_client._json,
    assetCompositeModels: import_smithy_client._json,
    assetCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    assetDescription: import_smithy_client.expectString,
    assetExternalId: import_smithy_client.expectString,
    assetHierarchies: import_smithy_client._json,
    assetId: import_smithy_client.expectString,
    assetLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    assetModelId: import_smithy_client.expectString,
    assetName: import_smithy_client.expectString,
    assetProperties: import_smithy_client._json,
    assetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAssetCommand");
var de_DescribeAssetCompositeModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionDefinitions: import_smithy_client._json,
    assetCompositeModelDescription: import_smithy_client.expectString,
    assetCompositeModelExternalId: import_smithy_client.expectString,
    assetCompositeModelId: import_smithy_client.expectString,
    assetCompositeModelName: import_smithy_client.expectString,
    assetCompositeModelPath: import_smithy_client._json,
    assetCompositeModelProperties: import_smithy_client._json,
    assetCompositeModelSummaries: import_smithy_client._json,
    assetCompositeModelType: import_smithy_client.expectString,
    assetId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAssetCompositeModelCommand");
var de_DescribeAssetModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_eT]: [, output.headers[_e]]
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelArn: import_smithy_client.expectString,
    assetModelCompositeModelSummaries: import_smithy_client._json,
    assetModelCompositeModels: (_) => de_AssetModelCompositeModels(_, context),
    assetModelCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    assetModelDescription: import_smithy_client.expectString,
    assetModelExternalId: import_smithy_client.expectString,
    assetModelHierarchies: import_smithy_client._json,
    assetModelId: import_smithy_client.expectString,
    assetModelLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    assetModelName: import_smithy_client.expectString,
    assetModelProperties: import_smithy_client._json,
    assetModelStatus: import_smithy_client._json,
    assetModelType: import_smithy_client.expectString,
    assetModelVersion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAssetModelCommand");
var de_DescribeAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionDefinitions: import_smithy_client._json,
    assetModelCompositeModelDescription: import_smithy_client.expectString,
    assetModelCompositeModelExternalId: import_smithy_client.expectString,
    assetModelCompositeModelId: import_smithy_client.expectString,
    assetModelCompositeModelName: import_smithy_client.expectString,
    assetModelCompositeModelPath: import_smithy_client._json,
    assetModelCompositeModelProperties: import_smithy_client._json,
    assetModelCompositeModelSummaries: import_smithy_client._json,
    assetModelCompositeModelType: import_smithy_client.expectString,
    assetModelId: import_smithy_client.expectString,
    compositionDetails: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAssetModelCompositeModelCommand");
var de_DescribeAssetPropertyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetExternalId: import_smithy_client.expectString,
    assetId: import_smithy_client.expectString,
    assetModelId: import_smithy_client.expectString,
    assetName: import_smithy_client.expectString,
    assetProperty: import_smithy_client._json,
    compositeModel: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeAssetPropertyCommand");
var de_DescribeBulkImportJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    adaptiveIngestion: import_smithy_client.expectBoolean,
    deleteFilesAfterImport: import_smithy_client.expectBoolean,
    errorReportLocation: import_smithy_client._json,
    files: import_smithy_client._json,
    jobConfiguration: import_smithy_client._json,
    jobCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    jobId: import_smithy_client.expectString,
    jobLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    jobName: import_smithy_client.expectString,
    jobRoleArn: import_smithy_client.expectString,
    jobStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeBulkImportJobCommand");
var de_DescribeDashboardCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    dashboardArn: import_smithy_client.expectString,
    dashboardCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dashboardDefinition: import_smithy_client.expectString,
    dashboardDescription: import_smithy_client.expectString,
    dashboardId: import_smithy_client.expectString,
    dashboardLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    dashboardName: import_smithy_client.expectString,
    projectId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDashboardCommand");
var de_DescribeDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetArn: import_smithy_client.expectString,
    datasetCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    datasetDescription: import_smithy_client.expectString,
    datasetId: import_smithy_client.expectString,
    datasetLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    datasetName: import_smithy_client.expectString,
    datasetSource: import_smithy_client._json,
    datasetStatus: import_smithy_client._json,
    datasetVersion: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDatasetCommand");
var de_DescribeDefaultEncryptionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    configurationStatus: import_smithy_client._json,
    encryptionType: import_smithy_client.expectString,
    kmsKeyArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeDefaultEncryptionConfigurationCommand");
var de_DescribeGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    gatewayArn: import_smithy_client.expectString,
    gatewayCapabilitySummaries: import_smithy_client._json,
    gatewayId: import_smithy_client.expectString,
    gatewayName: import_smithy_client.expectString,
    gatewayPlatform: import_smithy_client._json,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeGatewayCommand");
var de_DescribeGatewayCapabilityConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    capabilityConfiguration: import_smithy_client.expectString,
    capabilityNamespace: import_smithy_client.expectString,
    capabilitySyncStatus: import_smithy_client.expectString,
    gatewayId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeGatewayCapabilityConfigurationCommand");
var de_DescribeLoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    loggingOptions: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeLoggingOptionsCommand");
var de_DescribePortalCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    alarms: import_smithy_client._json,
    notificationSenderEmail: import_smithy_client.expectString,
    portalArn: import_smithy_client.expectString,
    portalAuthMode: import_smithy_client.expectString,
    portalClientId: import_smithy_client.expectString,
    portalContactEmail: import_smithy_client.expectString,
    portalCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    portalDescription: import_smithy_client.expectString,
    portalId: import_smithy_client.expectString,
    portalLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    portalLogoImageLocation: import_smithy_client._json,
    portalName: import_smithy_client.expectString,
    portalStartUrl: import_smithy_client.expectString,
    portalStatus: import_smithy_client._json,
    portalType: import_smithy_client.expectString,
    portalTypeConfiguration: import_smithy_client._json,
    roleArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribePortalCommand");
var de_DescribeProjectCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    portalId: import_smithy_client.expectString,
    projectArn: import_smithy_client.expectString,
    projectCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    projectDescription: import_smithy_client.expectString,
    projectId: import_smithy_client.expectString,
    projectLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    projectName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeProjectCommand");
var de_DescribeStorageConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    configurationStatus: import_smithy_client._json,
    disassociatedDataStorage: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    multiLayerStorage: import_smithy_client._json,
    retentionPeriod: import_smithy_client._json,
    storageType: import_smithy_client.expectString,
    warmTier: import_smithy_client.expectString,
    warmTierRetentionPeriod: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeStorageConfigurationCommand");
var de_DescribeTimeSeriesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    alias: import_smithy_client.expectString,
    assetId: import_smithy_client.expectString,
    dataType: import_smithy_client.expectString,
    dataTypeSpec: import_smithy_client.expectString,
    propertyId: import_smithy_client.expectString,
    timeSeriesArn: import_smithy_client.expectString,
    timeSeriesCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    timeSeriesId: import_smithy_client.expectString,
    timeSeriesLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeTimeSeriesCommand");
var de_DisassociateAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DisassociateAssetsCommand");
var de_DisassociateTimeSeriesFromAssetPropertyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DisassociateTimeSeriesFromAssetPropertyCommand");
var de_ExecuteActionCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ExecuteActionCommand");
var de_ExecuteQueryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    columns: import_smithy_client._json,
    nextToken: import_smithy_client.expectString,
    rows: (_) => de_Rows(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ExecuteQueryCommand");
var de_GetAssetPropertyAggregatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    aggregatedValues: (_) => de_AggregatedValues(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetAssetPropertyAggregatesCommand");
var de_GetAssetPropertyValueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    propertyValue: (_) => de_AssetPropertyValue(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetAssetPropertyValueCommand");
var de_GetAssetPropertyValueHistoryCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetPropertyValueHistory: (_) => de_AssetPropertyValueHistory(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetAssetPropertyValueHistoryCommand");
var de_GetInterpolatedAssetPropertyValuesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    interpolatedAssetPropertyValues: (_) => de_InterpolatedAssetPropertyValues(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetInterpolatedAssetPropertyValuesCommand");
var de_InvokeAssistantCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output),
    [_cI]: [, output.headers[_xaiaci]]
  });
  const data = output.body;
  contents.body = de_ResponseStream(data, context);
  return contents;
}, "de_InvokeAssistantCommand");
var de_ListAccessPoliciesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    accessPolicySummaries: (_) => de_AccessPolicySummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAccessPoliciesCommand");
var de_ListActionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    actionSummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListActionsCommand");
var de_ListAssetModelCompositeModelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelCompositeModelSummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssetModelCompositeModelsCommand");
var de_ListAssetModelPropertiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelPropertySummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssetModelPropertiesCommand");
var de_ListAssetModelsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelSummaries: (_) => de_AssetModelSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssetModelsCommand");
var de_ListAssetPropertiesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetPropertySummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssetPropertiesCommand");
var de_ListAssetRelationshipsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetRelationshipSummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssetRelationshipsCommand");
var de_ListAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetSummaries: (_) => de_AssetSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssetsCommand");
var de_ListAssociatedAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetSummaries: (_) => de_AssociatedAssetsSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListAssociatedAssetsCommand");
var de_ListBulkImportJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    jobSummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListBulkImportJobsCommand");
var de_ListCompositionRelationshipsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    compositionRelationshipSummaries: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListCompositionRelationshipsCommand");
var de_ListDashboardsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    dashboardSummaries: (_) => de_DashboardSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDashboardsCommand");
var de_ListDatasetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetSummaries: (_) => de_DatasetSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListDatasetsCommand");
var de_ListGatewaysCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    gatewaySummaries: (_) => de_GatewaySummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListGatewaysCommand");
var de_ListPortalsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    portalSummaries: (_) => de_PortalSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPortalsCommand");
var de_ListProjectAssetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetIds: import_smithy_client._json,
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListProjectAssetsCommand");
var de_ListProjectsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    nextToken: import_smithy_client.expectString,
    projectSummaries: (_) => de_ProjectSummaries(_, context)
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListProjectsCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    tags: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListTimeSeriesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    TimeSeriesSummaries: (_) => de_TimeSeriesSummaries(_, context),
    nextToken: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTimeSeriesCommand");
var de_PutDefaultEncryptionConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    configurationStatus: import_smithy_client._json,
    encryptionType: import_smithy_client.expectString,
    kmsKeyArn: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutDefaultEncryptionConfigurationCommand");
var de_PutLoggingOptionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_PutLoggingOptionsCommand");
var de_PutStorageConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    configurationStatus: import_smithy_client._json,
    disassociatedDataStorage: import_smithy_client.expectString,
    multiLayerStorage: import_smithy_client._json,
    retentionPeriod: import_smithy_client._json,
    storageType: import_smithy_client.expectString,
    warmTier: import_smithy_client.expectString,
    warmTierRetentionPeriod: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutStorageConfigurationCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateAccessPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateAccessPolicyCommand");
var de_UpdateAssetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateAssetCommand");
var de_UpdateAssetModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateAssetModelCommand");
var de_UpdateAssetModelCompositeModelCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    assetModelCompositeModelPath: import_smithy_client._json,
    assetModelStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateAssetModelCompositeModelCommand");
var de_UpdateAssetPropertyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateAssetPropertyCommand");
var de_UpdateDashboardCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateDashboardCommand");
var de_UpdateDatasetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    datasetArn: import_smithy_client.expectString,
    datasetId: import_smithy_client.expectString,
    datasetStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateDatasetCommand");
var de_UpdateGatewayCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateGatewayCommand");
var de_UpdateGatewayCapabilityConfigurationCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    capabilityNamespace: import_smithy_client.expectString,
    capabilitySyncStatus: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateGatewayCapabilityConfigurationCommand");
var de_UpdatePortalCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    portalStatus: import_smithy_client._json
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdatePortalCommand");
var de_UpdateProjectCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UpdateProjectCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "ConflictingOperationException":
    case "com.amazonaws.iotsitewise#ConflictingOperationException":
      throw await de_ConflictingOperationExceptionRes(parsedOutput, context);
    case "InternalFailureException":
    case "com.amazonaws.iotsitewise#InternalFailureException":
      throw await de_InternalFailureExceptionRes(parsedOutput, context);
    case "InvalidRequestException":
    case "com.amazonaws.iotsitewise#InvalidRequestException":
      throw await de_InvalidRequestExceptionRes(parsedOutput, context);
    case "LimitExceededException":
    case "com.amazonaws.iotsitewise#LimitExceededException":
      throw await de_LimitExceededExceptionRes(parsedOutput, context);
    case "ResourceAlreadyExistsException":
    case "com.amazonaws.iotsitewise#ResourceAlreadyExistsException":
      throw await de_ResourceAlreadyExistsExceptionRes(parsedOutput, context);
    case "ResourceNotFoundException":
    case "com.amazonaws.iotsitewise#ResourceNotFoundException":
      throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
    case "ThrottlingException":
    case "com.amazonaws.iotsitewise#ThrottlingException":
      throw await de_ThrottlingExceptionRes(parsedOutput, context);
    case "ServiceUnavailableException":
    case "com.amazonaws.iotsitewise#ServiceUnavailableException":
      throw await de_ServiceUnavailableExceptionRes(parsedOutput, context);
    case "PreconditionFailedException":
    case "com.amazonaws.iotsitewise#PreconditionFailedException":
      throw await de_PreconditionFailedExceptionRes(parsedOutput, context);
    case "AccessDeniedException":
    case "com.amazonaws.iotsitewise#AccessDeniedException":
      throw await de_AccessDeniedExceptionRes(parsedOutput, context);
    case "QueryTimeoutException":
    case "com.amazonaws.iotsitewise#QueryTimeoutException":
      throw await de_QueryTimeoutExceptionRes(parsedOutput, context);
    case "ValidationException":
    case "com.amazonaws.iotsitewise#ValidationException":
      throw await de_ValidationExceptionRes(parsedOutput, context);
    case "UnauthorizedException":
    case "com.amazonaws.iotsitewise#UnauthorizedException":
      throw await de_UnauthorizedExceptionRes(parsedOutput, context);
    case "TooManyTagsException":
    case "com.amazonaws.iotsitewise#TooManyTagsException":
      throw await de_TooManyTagsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(IoTSiteWiseServiceException);
var de_AccessDeniedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new AccessDeniedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_AccessDeniedExceptionRes");
var de_ConflictingOperationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceArn: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ConflictingOperationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictingOperationExceptionRes");
var de_InternalFailureExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InternalFailureException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalFailureExceptionRes");
var de_InvalidRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new InvalidRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InvalidRequestExceptionRes");
var de_LimitExceededExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new LimitExceededException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_LimitExceededExceptionRes");
var de_PreconditionFailedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceArn: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new PreconditionFailedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_PreconditionFailedExceptionRes");
var de_QueryTimeoutExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new QueryTimeoutException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_QueryTimeoutExceptionRes");
var de_ResourceAlreadyExistsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceArn: import_smithy_client.expectString,
    resourceId: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceAlreadyExistsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceAlreadyExistsExceptionRes");
var de_ResourceNotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ResourceNotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ResourceNotFoundExceptionRes");
var de_ServiceUnavailableExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ServiceUnavailableException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ServiceUnavailableExceptionRes");
var de_ThrottlingExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ThrottlingException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ThrottlingExceptionRes");
var de_TooManyTagsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString,
    resourceName: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new TooManyTagsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyTagsExceptionRes");
var de_UnauthorizedExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new UnauthorizedException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_UnauthorizedExceptionRes");
var de_ValidationExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    message: import_smithy_client.expectString
  });
  Object.assign(contents, doc);
  const exception = new ValidationException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ValidationExceptionRes");
var de_ResponseStream = /* @__PURE__ */ __name((output, context) => {
  return context.eventStreamMarshaller.deserialize(output, async (event) => {
    if (event["trace"] != null) {
      return {
        trace: await de_Trace_event(event["trace"], context)
      };
    }
    if (event["output"] != null) {
      return {
        output: await de_InvocationOutput_event(event["output"], context)
      };
    }
    if (event["accessDeniedException"] != null) {
      return {
        accessDeniedException: await de_AccessDeniedException_event(event["accessDeniedException"], context)
      };
    }
    if (event["conflictingOperationException"] != null) {
      return {
        conflictingOperationException: await de_ConflictingOperationException_event(
          event["conflictingOperationException"],
          context
        )
      };
    }
    if (event["internalFailureException"] != null) {
      return {
        internalFailureException: await de_InternalFailureException_event(event["internalFailureException"], context)
      };
    }
    if (event["invalidRequestException"] != null) {
      return {
        invalidRequestException: await de_InvalidRequestException_event(event["invalidRequestException"], context)
      };
    }
    if (event["limitExceededException"] != null) {
      return {
        limitExceededException: await de_LimitExceededException_event(event["limitExceededException"], context)
      };
    }
    if (event["resourceNotFoundException"] != null) {
      return {
        resourceNotFoundException: await de_ResourceNotFoundException_event(
          event["resourceNotFoundException"],
          context
        )
      };
    }
    if (event["throttlingException"] != null) {
      return {
        throttlingException: await de_ThrottlingException_event(event["throttlingException"], context)
      };
    }
    return { $unknown: output };
  });
}, "de_ResponseStream");
var de_AccessDeniedException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_AccessDeniedExceptionRes(parsedOutput, context);
}, "de_AccessDeniedException_event");
var de_ConflictingOperationException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_ConflictingOperationExceptionRes(parsedOutput, context);
}, "de_ConflictingOperationException_event");
var de_InternalFailureException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_InternalFailureExceptionRes(parsedOutput, context);
}, "de_InternalFailureException_event");
var de_InvalidRequestException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_InvalidRequestExceptionRes(parsedOutput, context);
}, "de_InvalidRequestException_event");
var de_InvocationOutput_event = /* @__PURE__ */ __name(async (output, context) => {
  const contents = {};
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  Object.assign(contents, (0, import_smithy_client._json)(data));
  return contents;
}, "de_InvocationOutput_event");
var de_LimitExceededException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_LimitExceededExceptionRes(parsedOutput, context);
}, "de_LimitExceededException_event");
var de_ResourceNotFoundException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_ResourceNotFoundExceptionRes(parsedOutput, context);
}, "de_ResourceNotFoundException_event");
var de_ThrottlingException_event = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonBody)(output.body, context)
  };
  return de_ThrottlingExceptionRes(parsedOutput, context);
}, "de_ThrottlingException_event");
var de_Trace_event = /* @__PURE__ */ __name(async (output, context) => {
  const contents = {};
  const data = await (0, import_core2.parseJsonBody)(output.body, context);
  Object.assign(contents, (0, import_smithy_client._json)(data));
  return contents;
}, "de_Trace_event");
var se_AssetModelCompositeModelDefinitions = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client._json)(entry);
  });
}, "se_AssetModelCompositeModelDefinitions");
var se_AssetModelCompositeModels = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client._json)(entry);
  });
}, "se_AssetModelCompositeModels");
var se_AssetPropertyValue = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    quality: [],
    timestamp: import_smithy_client._json,
    value: (_) => se_Variant(_, context)
  });
}, "se_AssetPropertyValue");
var se_AssetPropertyValues = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AssetPropertyValue(entry, context);
  });
}, "se_AssetPropertyValues");
var se_BatchGetAssetPropertyAggregatesEntries = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_BatchGetAssetPropertyAggregatesEntry(entry, context);
  });
}, "se_BatchGetAssetPropertyAggregatesEntries");
var se_BatchGetAssetPropertyAggregatesEntry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    aggregateTypes: import_smithy_client._json,
    assetId: [],
    endDate: (_) => _.getTime() / 1e3,
    entryId: [],
    propertyAlias: [],
    propertyId: [],
    qualities: import_smithy_client._json,
    resolution: [],
    startDate: (_) => _.getTime() / 1e3,
    timeOrdering: []
  });
}, "se_BatchGetAssetPropertyAggregatesEntry");
var se_BatchGetAssetPropertyValueHistoryEntries = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_BatchGetAssetPropertyValueHistoryEntry(entry, context);
  });
}, "se_BatchGetAssetPropertyValueHistoryEntries");
var se_BatchGetAssetPropertyValueHistoryEntry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    assetId: [],
    endDate: (_) => _.getTime() / 1e3,
    entryId: [],
    propertyAlias: [],
    propertyId: [],
    qualities: import_smithy_client._json,
    startDate: (_) => _.getTime() / 1e3,
    timeOrdering: []
  });
}, "se_BatchGetAssetPropertyValueHistoryEntry");
var se_Image = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    file: (_) => se_ImageFile(_, context),
    id: []
  });
}, "se_Image");
var se_ImageFile = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    data: context.base64Encoder,
    type: []
  });
}, "se_ImageFile");
var se_PutAssetPropertyValueEntries = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_PutAssetPropertyValueEntry(entry, context);
  });
}, "se_PutAssetPropertyValueEntries");
var se_PutAssetPropertyValueEntry = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    assetId: [],
    entryId: [],
    propertyAlias: [],
    propertyId: [],
    propertyValues: (_) => se_AssetPropertyValues(_, context)
  });
}, "se_PutAssetPropertyValueEntry");
var se_Variant = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    booleanValue: [],
    doubleValue: import_smithy_client.serializeFloat,
    integerValue: [],
    stringValue: []
  });
}, "se_Variant");
var de_AccessPolicySummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AccessPolicySummary(entry, context);
  });
  return retVal;
}, "de_AccessPolicySummaries");
var de_AccessPolicySummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    id: import_smithy_client.expectString,
    identity: import_smithy_client._json,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    permission: import_smithy_client.expectString,
    resource: import_smithy_client._json
  });
}, "de_AccessPolicySummary");
var de_AggregatedValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    quality: import_smithy_client.expectString,
    timestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    value: (_) => de_Aggregates(_, context)
  });
}, "de_AggregatedValue");
var de_AggregatedValues = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AggregatedValue(entry, context);
  });
  return retVal;
}, "de_AggregatedValues");
var de_Aggregates = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    average: import_smithy_client.limitedParseDouble,
    count: import_smithy_client.limitedParseDouble,
    maximum: import_smithy_client.limitedParseDouble,
    minimum: import_smithy_client.limitedParseDouble,
    standardDeviation: import_smithy_client.limitedParseDouble,
    sum: import_smithy_client.limitedParseDouble
  });
}, "de_Aggregates");
var de_AssetModelCompositeModels = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client._json)(entry);
  });
  return retVal;
}, "de_AssetModelCompositeModels");
var de_AssetModelSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AssetModelSummary(entry, context);
  });
  return retVal;
}, "de_AssetModelSummaries");
var de_AssetModelSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    assetModelType: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    externalId: import_smithy_client.expectString,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    status: import_smithy_client._json,
    version: import_smithy_client.expectString
  });
}, "de_AssetModelSummary");
var de_AssetPropertyValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    quality: import_smithy_client.expectString,
    timestamp: import_smithy_client._json,
    value: (_) => de_Variant(_, context)
  });
}, "de_AssetPropertyValue");
var de_AssetPropertyValueHistory = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AssetPropertyValue(entry, context);
  });
  return retVal;
}, "de_AssetPropertyValueHistory");
var de_AssetSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AssetSummary(entry, context);
  });
  return retVal;
}, "de_AssetSummaries");
var de_AssetSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    assetModelId: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    externalId: import_smithy_client.expectString,
    hierarchies: import_smithy_client._json,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    status: import_smithy_client._json
  });
}, "de_AssetSummary");
var de_AssociatedAssetsSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AssociatedAssetsSummary(entry, context);
  });
  return retVal;
}, "de_AssociatedAssetsSummaries");
var de_AssociatedAssetsSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    assetModelId: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    externalId: import_smithy_client.expectString,
    hierarchies: import_smithy_client._json,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    status: import_smithy_client._json
  });
}, "de_AssociatedAssetsSummary");
var de_BatchGetAssetPropertyAggregatesErrorInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    errorCode: import_smithy_client.expectString,
    errorTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BatchGetAssetPropertyAggregatesErrorInfo");
var de_BatchGetAssetPropertyAggregatesSkippedEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchGetAssetPropertyAggregatesSkippedEntry(entry, context);
  });
  return retVal;
}, "de_BatchGetAssetPropertyAggregatesSkippedEntries");
var de_BatchGetAssetPropertyAggregatesSkippedEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    completionStatus: import_smithy_client.expectString,
    entryId: import_smithy_client.expectString,
    errorInfo: (_) => de_BatchGetAssetPropertyAggregatesErrorInfo(_, context)
  });
}, "de_BatchGetAssetPropertyAggregatesSkippedEntry");
var de_BatchGetAssetPropertyAggregatesSuccessEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchGetAssetPropertyAggregatesSuccessEntry(entry, context);
  });
  return retVal;
}, "de_BatchGetAssetPropertyAggregatesSuccessEntries");
var de_BatchGetAssetPropertyAggregatesSuccessEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    aggregatedValues: (_) => de_AggregatedValues(_, context),
    entryId: import_smithy_client.expectString
  });
}, "de_BatchGetAssetPropertyAggregatesSuccessEntry");
var de_BatchGetAssetPropertyValueErrorInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    errorCode: import_smithy_client.expectString,
    errorTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BatchGetAssetPropertyValueErrorInfo");
var de_BatchGetAssetPropertyValueHistoryErrorInfo = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    errorCode: import_smithy_client.expectString,
    errorTimestamp: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_BatchGetAssetPropertyValueHistoryErrorInfo");
var de_BatchGetAssetPropertyValueHistorySkippedEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchGetAssetPropertyValueHistorySkippedEntry(entry, context);
  });
  return retVal;
}, "de_BatchGetAssetPropertyValueHistorySkippedEntries");
var de_BatchGetAssetPropertyValueHistorySkippedEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    completionStatus: import_smithy_client.expectString,
    entryId: import_smithy_client.expectString,
    errorInfo: (_) => de_BatchGetAssetPropertyValueHistoryErrorInfo(_, context)
  });
}, "de_BatchGetAssetPropertyValueHistorySkippedEntry");
var de_BatchGetAssetPropertyValueHistorySuccessEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchGetAssetPropertyValueHistorySuccessEntry(entry, context);
  });
  return retVal;
}, "de_BatchGetAssetPropertyValueHistorySuccessEntries");
var de_BatchGetAssetPropertyValueHistorySuccessEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    assetPropertyValueHistory: (_) => de_AssetPropertyValueHistory(_, context),
    entryId: import_smithy_client.expectString
  });
}, "de_BatchGetAssetPropertyValueHistorySuccessEntry");
var de_BatchGetAssetPropertyValueSkippedEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchGetAssetPropertyValueSkippedEntry(entry, context);
  });
  return retVal;
}, "de_BatchGetAssetPropertyValueSkippedEntries");
var de_BatchGetAssetPropertyValueSkippedEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    completionStatus: import_smithy_client.expectString,
    entryId: import_smithy_client.expectString,
    errorInfo: (_) => de_BatchGetAssetPropertyValueErrorInfo(_, context)
  });
}, "de_BatchGetAssetPropertyValueSkippedEntry");
var de_BatchGetAssetPropertyValueSuccessEntries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_BatchGetAssetPropertyValueSuccessEntry(entry, context);
  });
  return retVal;
}, "de_BatchGetAssetPropertyValueSuccessEntries");
var de_BatchGetAssetPropertyValueSuccessEntry = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    assetPropertyValue: (_) => de_AssetPropertyValue(_, context),
    entryId: import_smithy_client.expectString
  });
}, "de_BatchGetAssetPropertyValueSuccessEntry");
var de_DashboardSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DashboardSummary(entry, context);
  });
  return retVal;
}, "de_DashboardSummaries");
var de_DashboardSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString
  });
}, "de_DashboardSummary");
var de_DatasetSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DatasetSummary(entry, context);
  });
  return retVal;
}, "de_DatasetSummaries");
var de_DatasetSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arn: import_smithy_client.expectString,
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    status: import_smithy_client._json
  });
}, "de_DatasetSummary");
var de_Datum = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    arrayValue: (_) => de_DatumList(_, context),
    nullValue: import_smithy_client.expectBoolean,
    rowValue: (_) => de_Row(_, context),
    scalarValue: import_smithy_client.expectString
  });
}, "de_Datum");
var de_DatumList = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Datum(entry, context);
  });
  return retVal;
}, "de_DatumList");
var de_GatewaySummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_GatewaySummary(entry, context);
  });
  return retVal;
}, "de_GatewaySummaries");
var de_GatewaySummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    gatewayCapabilitySummaries: import_smithy_client._json,
    gatewayId: import_smithy_client.expectString,
    gatewayName: import_smithy_client.expectString,
    gatewayPlatform: import_smithy_client._json,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_GatewaySummary");
var de_InterpolatedAssetPropertyValue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    timestamp: import_smithy_client._json,
    value: (_) => de_Variant(_, context)
  });
}, "de_InterpolatedAssetPropertyValue");
var de_InterpolatedAssetPropertyValues = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InterpolatedAssetPropertyValue(entry, context);
  });
  return retVal;
}, "de_InterpolatedAssetPropertyValues");
var de_PortalSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_PortalSummary(entry, context);
  });
  return retVal;
}, "de_PortalSummaries");
var de_PortalSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString,
    portalType: import_smithy_client.expectString,
    roleArn: import_smithy_client.expectString,
    startUrl: import_smithy_client.expectString,
    status: import_smithy_client._json
  });
}, "de_PortalSummary");
var de_ProjectSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ProjectSummary(entry, context);
  });
  return retVal;
}, "de_ProjectSummaries");
var de_ProjectSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    creationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    description: import_smithy_client.expectString,
    id: import_smithy_client.expectString,
    lastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    name: import_smithy_client.expectString
  });
}, "de_ProjectSummary");
var de_Row = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    data: (_) => de_DatumList(_, context)
  });
}, "de_Row");
var de_Rows = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Row(entry, context);
  });
  return retVal;
}, "de_Rows");
var de_TimeSeriesSummaries = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TimeSeriesSummary(entry, context);
  });
  return retVal;
}, "de_TimeSeriesSummaries");
var de_TimeSeriesSummary = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    alias: import_smithy_client.expectString,
    assetId: import_smithy_client.expectString,
    dataType: import_smithy_client.expectString,
    dataTypeSpec: import_smithy_client.expectString,
    propertyId: import_smithy_client.expectString,
    timeSeriesArn: import_smithy_client.expectString,
    timeSeriesCreationDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))),
    timeSeriesId: import_smithy_client.expectString,
    timeSeriesLastUpdateDate: (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_)))
  });
}, "de_TimeSeriesSummary");
var de_Variant = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    booleanValue: import_smithy_client.expectBoolean,
    doubleValue: import_smithy_client.limitedParseDouble,
    integerValue: import_smithy_client.expectInt32,
    stringValue: import_smithy_client.expectString
  });
}, "de_Variant");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _a = "alias";
var _aI = "assetId";
var _aMI = "assetModelId";
var _aMT = "assetModelTypes";
var _aMV = "assetModelVersion";
var _aP = "aliasPrefix";
var _aT = "aggregateTypes";
var _cI = "conversationId";
var _cT = "clientToken";
var _e = "etag";
var _eD = "endDate";
var _eP = "excludeProperties";
var _eT = "eTag";
var _eTIS = "endTimeInSeconds";
var _eTOIN = "endTimeOffsetInNanos";
var _f = "filter";
var _hI = "hierarchyId";
var _iA = "iamArn";
var _iI = "identityId";
var _iIS = "intervalInSeconds";
var _iM = "ifMatch";
var _iNM = "ifNoneMatch";
var _iT = "identityType";
var _iWIS = "intervalWindowInSeconds";
var _im = "if-match";
var _inm = "if-none-match";
var _mFVT = "matchForVersionType";
var _mR = "maxResults";
var _mfvt = "match-for-version-type";
var _nT = "nextToken";
var _pA = "propertyAlias";
var _pI = "propertyId";
var _pIo = "portalId";
var _pIr = "projectId";
var _q = "qualities";
var _qu = "quality";
var _r = "resolution";
var _rA = "resourceArn";
var _rI = "resourceId";
var _rT = "resourceType";
var _sD = "startDate";
var _sT = "sourceType";
var _sTIS = "startTimeInSeconds";
var _sTOIN = "startTimeOffsetInNanos";
var _t = "type";
var _tD = "traversalDirection";
var _tK = "tagKeys";
var _tO = "timeOrdering";
var _tRI = "targetResourceId";
var _tRT = "targetResourceType";
var _tST = "timeSeriesType";
var _tT = "traversalType";
var _xaiaci = "x-amz-iotsitewise-assistant-conversation-id";

// src/commands/AssociateAssetsCommand.ts
var AssociateAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "AssociateAssets", {}).n("IoTSiteWiseClient", "AssociateAssetsCommand").f(void 0, void 0).ser(se_AssociateAssetsCommand).de(de_AssociateAssetsCommand).build() {
  static {
    __name(this, "AssociateAssetsCommand");
  }
};

// src/commands/AssociateTimeSeriesToAssetPropertyCommand.ts



var AssociateTimeSeriesToAssetPropertyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "AssociateTimeSeriesToAssetProperty", {}).n("IoTSiteWiseClient", "AssociateTimeSeriesToAssetPropertyCommand").f(void 0, void 0).ser(se_AssociateTimeSeriesToAssetPropertyCommand).de(de_AssociateTimeSeriesToAssetPropertyCommand).build() {
  static {
    __name(this, "AssociateTimeSeriesToAssetPropertyCommand");
  }
};

// src/commands/BatchAssociateProjectAssetsCommand.ts



var BatchAssociateProjectAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "BatchAssociateProjectAssets", {}).n("IoTSiteWiseClient", "BatchAssociateProjectAssetsCommand").f(void 0, void 0).ser(se_BatchAssociateProjectAssetsCommand).de(de_BatchAssociateProjectAssetsCommand).build() {
  static {
    __name(this, "BatchAssociateProjectAssetsCommand");
  }
};

// src/commands/BatchDisassociateProjectAssetsCommand.ts



var BatchDisassociateProjectAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "BatchDisassociateProjectAssets", {}).n("IoTSiteWiseClient", "BatchDisassociateProjectAssetsCommand").f(void 0, void 0).ser(se_BatchDisassociateProjectAssetsCommand).de(de_BatchDisassociateProjectAssetsCommand).build() {
  static {
    __name(this, "BatchDisassociateProjectAssetsCommand");
  }
};

// src/commands/BatchGetAssetPropertyAggregatesCommand.ts



var BatchGetAssetPropertyAggregatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "BatchGetAssetPropertyAggregates", {}).n("IoTSiteWiseClient", "BatchGetAssetPropertyAggregatesCommand").f(void 0, void 0).ser(se_BatchGetAssetPropertyAggregatesCommand).de(de_BatchGetAssetPropertyAggregatesCommand).build() {
  static {
    __name(this, "BatchGetAssetPropertyAggregatesCommand");
  }
};

// src/commands/BatchGetAssetPropertyValueCommand.ts



var BatchGetAssetPropertyValueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "BatchGetAssetPropertyValue", {}).n("IoTSiteWiseClient", "BatchGetAssetPropertyValueCommand").f(void 0, void 0).ser(se_BatchGetAssetPropertyValueCommand).de(de_BatchGetAssetPropertyValueCommand).build() {
  static {
    __name(this, "BatchGetAssetPropertyValueCommand");
  }
};

// src/commands/BatchGetAssetPropertyValueHistoryCommand.ts



var BatchGetAssetPropertyValueHistoryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "BatchGetAssetPropertyValueHistory", {}).n("IoTSiteWiseClient", "BatchGetAssetPropertyValueHistoryCommand").f(void 0, void 0).ser(se_BatchGetAssetPropertyValueHistoryCommand).de(de_BatchGetAssetPropertyValueHistoryCommand).build() {
  static {
    __name(this, "BatchGetAssetPropertyValueHistoryCommand");
  }
};

// src/commands/BatchPutAssetPropertyValueCommand.ts



var BatchPutAssetPropertyValueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "BatchPutAssetPropertyValue", {}).n("IoTSiteWiseClient", "BatchPutAssetPropertyValueCommand").f(void 0, void 0).ser(se_BatchPutAssetPropertyValueCommand).de(de_BatchPutAssetPropertyValueCommand).build() {
  static {
    __name(this, "BatchPutAssetPropertyValueCommand");
  }
};

// src/commands/CreateAccessPolicyCommand.ts



var CreateAccessPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateAccessPolicy", {}).n("IoTSiteWiseClient", "CreateAccessPolicyCommand").f(void 0, void 0).ser(se_CreateAccessPolicyCommand).de(de_CreateAccessPolicyCommand).build() {
  static {
    __name(this, "CreateAccessPolicyCommand");
  }
};

// src/commands/CreateAssetCommand.ts



var CreateAssetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateAsset", {}).n("IoTSiteWiseClient", "CreateAssetCommand").f(void 0, void 0).ser(se_CreateAssetCommand).de(de_CreateAssetCommand).build() {
  static {
    __name(this, "CreateAssetCommand");
  }
};

// src/commands/CreateAssetModelCommand.ts



var CreateAssetModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateAssetModel", {}).n("IoTSiteWiseClient", "CreateAssetModelCommand").f(void 0, void 0).ser(se_CreateAssetModelCommand).de(de_CreateAssetModelCommand).build() {
  static {
    __name(this, "CreateAssetModelCommand");
  }
};

// src/commands/CreateAssetModelCompositeModelCommand.ts



var CreateAssetModelCompositeModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateAssetModelCompositeModel", {}).n("IoTSiteWiseClient", "CreateAssetModelCompositeModelCommand").f(void 0, void 0).ser(se_CreateAssetModelCompositeModelCommand).de(de_CreateAssetModelCompositeModelCommand).build() {
  static {
    __name(this, "CreateAssetModelCompositeModelCommand");
  }
};

// src/commands/CreateBulkImportJobCommand.ts



var CreateBulkImportJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateBulkImportJob", {}).n("IoTSiteWiseClient", "CreateBulkImportJobCommand").f(void 0, void 0).ser(se_CreateBulkImportJobCommand).de(de_CreateBulkImportJobCommand).build() {
  static {
    __name(this, "CreateBulkImportJobCommand");
  }
};

// src/commands/CreateDashboardCommand.ts



var CreateDashboardCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateDashboard", {}).n("IoTSiteWiseClient", "CreateDashboardCommand").f(void 0, void 0).ser(se_CreateDashboardCommand).de(de_CreateDashboardCommand).build() {
  static {
    __name(this, "CreateDashboardCommand");
  }
};

// src/commands/CreateDatasetCommand.ts



var CreateDatasetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateDataset", {}).n("IoTSiteWiseClient", "CreateDatasetCommand").f(void 0, void 0).ser(se_CreateDatasetCommand).de(de_CreateDatasetCommand).build() {
  static {
    __name(this, "CreateDatasetCommand");
  }
};

// src/commands/CreateGatewayCommand.ts



var CreateGatewayCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateGateway", {}).n("IoTSiteWiseClient", "CreateGatewayCommand").f(void 0, void 0).ser(se_CreateGatewayCommand).de(de_CreateGatewayCommand).build() {
  static {
    __name(this, "CreateGatewayCommand");
  }
};

// src/commands/CreatePortalCommand.ts



var CreatePortalCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreatePortal", {}).n("IoTSiteWiseClient", "CreatePortalCommand").f(CreatePortalRequestFilterSensitiveLog, void 0).ser(se_CreatePortalCommand).de(de_CreatePortalCommand).build() {
  static {
    __name(this, "CreatePortalCommand");
  }
};

// src/commands/CreateProjectCommand.ts



var CreateProjectCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "CreateProject", {}).n("IoTSiteWiseClient", "CreateProjectCommand").f(void 0, void 0).ser(se_CreateProjectCommand).de(de_CreateProjectCommand).build() {
  static {
    __name(this, "CreateProjectCommand");
  }
};

// src/commands/DeleteAccessPolicyCommand.ts



var DeleteAccessPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteAccessPolicy", {}).n("IoTSiteWiseClient", "DeleteAccessPolicyCommand").f(void 0, void 0).ser(se_DeleteAccessPolicyCommand).de(de_DeleteAccessPolicyCommand).build() {
  static {
    __name(this, "DeleteAccessPolicyCommand");
  }
};

// src/commands/DeleteAssetCommand.ts



var DeleteAssetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteAsset", {}).n("IoTSiteWiseClient", "DeleteAssetCommand").f(void 0, void 0).ser(se_DeleteAssetCommand).de(de_DeleteAssetCommand).build() {
  static {
    __name(this, "DeleteAssetCommand");
  }
};

// src/commands/DeleteAssetModelCommand.ts



var DeleteAssetModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteAssetModel", {}).n("IoTSiteWiseClient", "DeleteAssetModelCommand").f(void 0, void 0).ser(se_DeleteAssetModelCommand).de(de_DeleteAssetModelCommand).build() {
  static {
    __name(this, "DeleteAssetModelCommand");
  }
};

// src/commands/DeleteAssetModelCompositeModelCommand.ts



var DeleteAssetModelCompositeModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteAssetModelCompositeModel", {}).n("IoTSiteWiseClient", "DeleteAssetModelCompositeModelCommand").f(void 0, void 0).ser(se_DeleteAssetModelCompositeModelCommand).de(de_DeleteAssetModelCompositeModelCommand).build() {
  static {
    __name(this, "DeleteAssetModelCompositeModelCommand");
  }
};

// src/commands/DeleteDashboardCommand.ts



var DeleteDashboardCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteDashboard", {}).n("IoTSiteWiseClient", "DeleteDashboardCommand").f(void 0, void 0).ser(se_DeleteDashboardCommand).de(de_DeleteDashboardCommand).build() {
  static {
    __name(this, "DeleteDashboardCommand");
  }
};

// src/commands/DeleteDatasetCommand.ts



var DeleteDatasetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteDataset", {}).n("IoTSiteWiseClient", "DeleteDatasetCommand").f(void 0, void 0).ser(se_DeleteDatasetCommand).de(de_DeleteDatasetCommand).build() {
  static {
    __name(this, "DeleteDatasetCommand");
  }
};

// src/commands/DeleteGatewayCommand.ts



var DeleteGatewayCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteGateway", {}).n("IoTSiteWiseClient", "DeleteGatewayCommand").f(void 0, void 0).ser(se_DeleteGatewayCommand).de(de_DeleteGatewayCommand).build() {
  static {
    __name(this, "DeleteGatewayCommand");
  }
};

// src/commands/DeletePortalCommand.ts



var DeletePortalCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeletePortal", {}).n("IoTSiteWiseClient", "DeletePortalCommand").f(void 0, void 0).ser(se_DeletePortalCommand).de(de_DeletePortalCommand).build() {
  static {
    __name(this, "DeletePortalCommand");
  }
};

// src/commands/DeleteProjectCommand.ts



var DeleteProjectCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteProject", {}).n("IoTSiteWiseClient", "DeleteProjectCommand").f(void 0, void 0).ser(se_DeleteProjectCommand).de(de_DeleteProjectCommand).build() {
  static {
    __name(this, "DeleteProjectCommand");
  }
};

// src/commands/DeleteTimeSeriesCommand.ts



var DeleteTimeSeriesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DeleteTimeSeries", {}).n("IoTSiteWiseClient", "DeleteTimeSeriesCommand").f(void 0, void 0).ser(se_DeleteTimeSeriesCommand).de(de_DeleteTimeSeriesCommand).build() {
  static {
    __name(this, "DeleteTimeSeriesCommand");
  }
};

// src/commands/DescribeAccessPolicyCommand.ts



var DescribeAccessPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAccessPolicy", {}).n("IoTSiteWiseClient", "DescribeAccessPolicyCommand").f(void 0, void 0).ser(se_DescribeAccessPolicyCommand).de(de_DescribeAccessPolicyCommand).build() {
  static {
    __name(this, "DescribeAccessPolicyCommand");
  }
};

// src/commands/DescribeActionCommand.ts



var DescribeActionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAction", {}).n("IoTSiteWiseClient", "DescribeActionCommand").f(void 0, void 0).ser(se_DescribeActionCommand).de(de_DescribeActionCommand).build() {
  static {
    __name(this, "DescribeActionCommand");
  }
};

// src/commands/DescribeAssetCommand.ts



var DescribeAssetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAsset", {}).n("IoTSiteWiseClient", "DescribeAssetCommand").f(void 0, void 0).ser(se_DescribeAssetCommand).de(de_DescribeAssetCommand).build() {
  static {
    __name(this, "DescribeAssetCommand");
  }
};

// src/commands/DescribeAssetCompositeModelCommand.ts



var DescribeAssetCompositeModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAssetCompositeModel", {}).n("IoTSiteWiseClient", "DescribeAssetCompositeModelCommand").f(void 0, void 0).ser(se_DescribeAssetCompositeModelCommand).de(de_DescribeAssetCompositeModelCommand).build() {
  static {
    __name(this, "DescribeAssetCompositeModelCommand");
  }
};

// src/commands/DescribeAssetModelCommand.ts



var DescribeAssetModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAssetModel", {}).n("IoTSiteWiseClient", "DescribeAssetModelCommand").f(void 0, void 0).ser(se_DescribeAssetModelCommand).de(de_DescribeAssetModelCommand).build() {
  static {
    __name(this, "DescribeAssetModelCommand");
  }
};

// src/commands/DescribeAssetModelCompositeModelCommand.ts



var DescribeAssetModelCompositeModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAssetModelCompositeModel", {}).n("IoTSiteWiseClient", "DescribeAssetModelCompositeModelCommand").f(void 0, void 0).ser(se_DescribeAssetModelCompositeModelCommand).de(de_DescribeAssetModelCompositeModelCommand).build() {
  static {
    __name(this, "DescribeAssetModelCompositeModelCommand");
  }
};

// src/commands/DescribeAssetPropertyCommand.ts



var DescribeAssetPropertyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeAssetProperty", {}).n("IoTSiteWiseClient", "DescribeAssetPropertyCommand").f(void 0, void 0).ser(se_DescribeAssetPropertyCommand).de(de_DescribeAssetPropertyCommand).build() {
  static {
    __name(this, "DescribeAssetPropertyCommand");
  }
};

// src/commands/DescribeBulkImportJobCommand.ts



var DescribeBulkImportJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeBulkImportJob", {}).n("IoTSiteWiseClient", "DescribeBulkImportJobCommand").f(void 0, void 0).ser(se_DescribeBulkImportJobCommand).de(de_DescribeBulkImportJobCommand).build() {
  static {
    __name(this, "DescribeBulkImportJobCommand");
  }
};

// src/commands/DescribeDashboardCommand.ts



var DescribeDashboardCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeDashboard", {}).n("IoTSiteWiseClient", "DescribeDashboardCommand").f(void 0, void 0).ser(se_DescribeDashboardCommand).de(de_DescribeDashboardCommand).build() {
  static {
    __name(this, "DescribeDashboardCommand");
  }
};

// src/commands/DescribeDatasetCommand.ts



var DescribeDatasetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeDataset", {}).n("IoTSiteWiseClient", "DescribeDatasetCommand").f(void 0, void 0).ser(se_DescribeDatasetCommand).de(de_DescribeDatasetCommand).build() {
  static {
    __name(this, "DescribeDatasetCommand");
  }
};

// src/commands/DescribeDefaultEncryptionConfigurationCommand.ts



var DescribeDefaultEncryptionConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeDefaultEncryptionConfiguration", {}).n("IoTSiteWiseClient", "DescribeDefaultEncryptionConfigurationCommand").f(void 0, void 0).ser(se_DescribeDefaultEncryptionConfigurationCommand).de(de_DescribeDefaultEncryptionConfigurationCommand).build() {
  static {
    __name(this, "DescribeDefaultEncryptionConfigurationCommand");
  }
};

// src/commands/DescribeGatewayCapabilityConfigurationCommand.ts



var DescribeGatewayCapabilityConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeGatewayCapabilityConfiguration", {}).n("IoTSiteWiseClient", "DescribeGatewayCapabilityConfigurationCommand").f(void 0, void 0).ser(se_DescribeGatewayCapabilityConfigurationCommand).de(de_DescribeGatewayCapabilityConfigurationCommand).build() {
  static {
    __name(this, "DescribeGatewayCapabilityConfigurationCommand");
  }
};

// src/commands/DescribeGatewayCommand.ts



var DescribeGatewayCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeGateway", {}).n("IoTSiteWiseClient", "DescribeGatewayCommand").f(void 0, void 0).ser(se_DescribeGatewayCommand).de(de_DescribeGatewayCommand).build() {
  static {
    __name(this, "DescribeGatewayCommand");
  }
};

// src/commands/DescribeLoggingOptionsCommand.ts



var DescribeLoggingOptionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeLoggingOptions", {}).n("IoTSiteWiseClient", "DescribeLoggingOptionsCommand").f(void 0, void 0).ser(se_DescribeLoggingOptionsCommand).de(de_DescribeLoggingOptionsCommand).build() {
  static {
    __name(this, "DescribeLoggingOptionsCommand");
  }
};

// src/commands/DescribePortalCommand.ts



var DescribePortalCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribePortal", {}).n("IoTSiteWiseClient", "DescribePortalCommand").f(void 0, DescribePortalResponseFilterSensitiveLog).ser(se_DescribePortalCommand).de(de_DescribePortalCommand).build() {
  static {
    __name(this, "DescribePortalCommand");
  }
};

// src/commands/DescribeProjectCommand.ts



var DescribeProjectCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeProject", {}).n("IoTSiteWiseClient", "DescribeProjectCommand").f(void 0, void 0).ser(se_DescribeProjectCommand).de(de_DescribeProjectCommand).build() {
  static {
    __name(this, "DescribeProjectCommand");
  }
};

// src/commands/DescribeStorageConfigurationCommand.ts



var DescribeStorageConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeStorageConfiguration", {}).n("IoTSiteWiseClient", "DescribeStorageConfigurationCommand").f(void 0, void 0).ser(se_DescribeStorageConfigurationCommand).de(de_DescribeStorageConfigurationCommand).build() {
  static {
    __name(this, "DescribeStorageConfigurationCommand");
  }
};

// src/commands/DescribeTimeSeriesCommand.ts



var DescribeTimeSeriesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DescribeTimeSeries", {}).n("IoTSiteWiseClient", "DescribeTimeSeriesCommand").f(void 0, void 0).ser(se_DescribeTimeSeriesCommand).de(de_DescribeTimeSeriesCommand).build() {
  static {
    __name(this, "DescribeTimeSeriesCommand");
  }
};

// src/commands/DisassociateAssetsCommand.ts



var DisassociateAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DisassociateAssets", {}).n("IoTSiteWiseClient", "DisassociateAssetsCommand").f(void 0, void 0).ser(se_DisassociateAssetsCommand).de(de_DisassociateAssetsCommand).build() {
  static {
    __name(this, "DisassociateAssetsCommand");
  }
};

// src/commands/DisassociateTimeSeriesFromAssetPropertyCommand.ts



var DisassociateTimeSeriesFromAssetPropertyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "DisassociateTimeSeriesFromAssetProperty", {}).n("IoTSiteWiseClient", "DisassociateTimeSeriesFromAssetPropertyCommand").f(void 0, void 0).ser(se_DisassociateTimeSeriesFromAssetPropertyCommand).de(de_DisassociateTimeSeriesFromAssetPropertyCommand).build() {
  static {
    __name(this, "DisassociateTimeSeriesFromAssetPropertyCommand");
  }
};

// src/commands/ExecuteActionCommand.ts



var ExecuteActionCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ExecuteAction", {}).n("IoTSiteWiseClient", "ExecuteActionCommand").f(void 0, void 0).ser(se_ExecuteActionCommand).de(de_ExecuteActionCommand).build() {
  static {
    __name(this, "ExecuteActionCommand");
  }
};

// src/commands/ExecuteQueryCommand.ts



var ExecuteQueryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ExecuteQuery", {}).n("IoTSiteWiseClient", "ExecuteQueryCommand").f(void 0, void 0).ser(se_ExecuteQueryCommand).de(de_ExecuteQueryCommand).build() {
  static {
    __name(this, "ExecuteQueryCommand");
  }
};

// src/commands/GetAssetPropertyAggregatesCommand.ts



var GetAssetPropertyAggregatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "GetAssetPropertyAggregates", {}).n("IoTSiteWiseClient", "GetAssetPropertyAggregatesCommand").f(void 0, void 0).ser(se_GetAssetPropertyAggregatesCommand).de(de_GetAssetPropertyAggregatesCommand).build() {
  static {
    __name(this, "GetAssetPropertyAggregatesCommand");
  }
};

// src/commands/GetAssetPropertyValueCommand.ts



var GetAssetPropertyValueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "GetAssetPropertyValue", {}).n("IoTSiteWiseClient", "GetAssetPropertyValueCommand").f(void 0, void 0).ser(se_GetAssetPropertyValueCommand).de(de_GetAssetPropertyValueCommand).build() {
  static {
    __name(this, "GetAssetPropertyValueCommand");
  }
};

// src/commands/GetAssetPropertyValueHistoryCommand.ts



var GetAssetPropertyValueHistoryCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "GetAssetPropertyValueHistory", {}).n("IoTSiteWiseClient", "GetAssetPropertyValueHistoryCommand").f(void 0, void 0).ser(se_GetAssetPropertyValueHistoryCommand).de(de_GetAssetPropertyValueHistoryCommand).build() {
  static {
    __name(this, "GetAssetPropertyValueHistoryCommand");
  }
};

// src/commands/GetInterpolatedAssetPropertyValuesCommand.ts



var GetInterpolatedAssetPropertyValuesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "GetInterpolatedAssetPropertyValues", {}).n("IoTSiteWiseClient", "GetInterpolatedAssetPropertyValuesCommand").f(void 0, void 0).ser(se_GetInterpolatedAssetPropertyValuesCommand).de(de_GetInterpolatedAssetPropertyValuesCommand).build() {
  static {
    __name(this, "GetInterpolatedAssetPropertyValuesCommand");
  }
};

// src/commands/InvokeAssistantCommand.ts



var InvokeAssistantCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "InvokeAssistant", {
  /**
   * @internal
   */
  eventStream: {
    output: true
  }
}).n("IoTSiteWiseClient", "InvokeAssistantCommand").f(InvokeAssistantRequestFilterSensitiveLog, InvokeAssistantResponseFilterSensitiveLog).ser(se_InvokeAssistantCommand).de(de_InvokeAssistantCommand).build() {
  static {
    __name(this, "InvokeAssistantCommand");
  }
};

// src/commands/ListAccessPoliciesCommand.ts



var ListAccessPoliciesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAccessPolicies", {}).n("IoTSiteWiseClient", "ListAccessPoliciesCommand").f(void 0, void 0).ser(se_ListAccessPoliciesCommand).de(de_ListAccessPoliciesCommand).build() {
  static {
    __name(this, "ListAccessPoliciesCommand");
  }
};

// src/commands/ListActionsCommand.ts



var ListActionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListActions", {}).n("IoTSiteWiseClient", "ListActionsCommand").f(void 0, void 0).ser(se_ListActionsCommand).de(de_ListActionsCommand).build() {
  static {
    __name(this, "ListActionsCommand");
  }
};

// src/commands/ListAssetModelCompositeModelsCommand.ts



var ListAssetModelCompositeModelsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssetModelCompositeModels", {}).n("IoTSiteWiseClient", "ListAssetModelCompositeModelsCommand").f(void 0, void 0).ser(se_ListAssetModelCompositeModelsCommand).de(de_ListAssetModelCompositeModelsCommand).build() {
  static {
    __name(this, "ListAssetModelCompositeModelsCommand");
  }
};

// src/commands/ListAssetModelPropertiesCommand.ts



var ListAssetModelPropertiesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssetModelProperties", {}).n("IoTSiteWiseClient", "ListAssetModelPropertiesCommand").f(void 0, void 0).ser(se_ListAssetModelPropertiesCommand).de(de_ListAssetModelPropertiesCommand).build() {
  static {
    __name(this, "ListAssetModelPropertiesCommand");
  }
};

// src/commands/ListAssetModelsCommand.ts



var ListAssetModelsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssetModels", {}).n("IoTSiteWiseClient", "ListAssetModelsCommand").f(void 0, void 0).ser(se_ListAssetModelsCommand).de(de_ListAssetModelsCommand).build() {
  static {
    __name(this, "ListAssetModelsCommand");
  }
};

// src/commands/ListAssetPropertiesCommand.ts



var ListAssetPropertiesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssetProperties", {}).n("IoTSiteWiseClient", "ListAssetPropertiesCommand").f(void 0, void 0).ser(se_ListAssetPropertiesCommand).de(de_ListAssetPropertiesCommand).build() {
  static {
    __name(this, "ListAssetPropertiesCommand");
  }
};

// src/commands/ListAssetRelationshipsCommand.ts



var ListAssetRelationshipsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssetRelationships", {}).n("IoTSiteWiseClient", "ListAssetRelationshipsCommand").f(void 0, void 0).ser(se_ListAssetRelationshipsCommand).de(de_ListAssetRelationshipsCommand).build() {
  static {
    __name(this, "ListAssetRelationshipsCommand");
  }
};

// src/commands/ListAssetsCommand.ts



var ListAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssets", {}).n("IoTSiteWiseClient", "ListAssetsCommand").f(void 0, void 0).ser(se_ListAssetsCommand).de(de_ListAssetsCommand).build() {
  static {
    __name(this, "ListAssetsCommand");
  }
};

// src/commands/ListAssociatedAssetsCommand.ts



var ListAssociatedAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListAssociatedAssets", {}).n("IoTSiteWiseClient", "ListAssociatedAssetsCommand").f(void 0, void 0).ser(se_ListAssociatedAssetsCommand).de(de_ListAssociatedAssetsCommand).build() {
  static {
    __name(this, "ListAssociatedAssetsCommand");
  }
};

// src/commands/ListBulkImportJobsCommand.ts



var ListBulkImportJobsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListBulkImportJobs", {}).n("IoTSiteWiseClient", "ListBulkImportJobsCommand").f(void 0, void 0).ser(se_ListBulkImportJobsCommand).de(de_ListBulkImportJobsCommand).build() {
  static {
    __name(this, "ListBulkImportJobsCommand");
  }
};

// src/commands/ListCompositionRelationshipsCommand.ts



var ListCompositionRelationshipsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListCompositionRelationships", {}).n("IoTSiteWiseClient", "ListCompositionRelationshipsCommand").f(void 0, void 0).ser(se_ListCompositionRelationshipsCommand).de(de_ListCompositionRelationshipsCommand).build() {
  static {
    __name(this, "ListCompositionRelationshipsCommand");
  }
};

// src/commands/ListDashboardsCommand.ts



var ListDashboardsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListDashboards", {}).n("IoTSiteWiseClient", "ListDashboardsCommand").f(void 0, void 0).ser(se_ListDashboardsCommand).de(de_ListDashboardsCommand).build() {
  static {
    __name(this, "ListDashboardsCommand");
  }
};

// src/commands/ListDatasetsCommand.ts



var ListDatasetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListDatasets", {}).n("IoTSiteWiseClient", "ListDatasetsCommand").f(void 0, void 0).ser(se_ListDatasetsCommand).de(de_ListDatasetsCommand).build() {
  static {
    __name(this, "ListDatasetsCommand");
  }
};

// src/commands/ListGatewaysCommand.ts



var ListGatewaysCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListGateways", {}).n("IoTSiteWiseClient", "ListGatewaysCommand").f(void 0, void 0).ser(se_ListGatewaysCommand).de(de_ListGatewaysCommand).build() {
  static {
    __name(this, "ListGatewaysCommand");
  }
};

// src/commands/ListPortalsCommand.ts



var ListPortalsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListPortals", {}).n("IoTSiteWiseClient", "ListPortalsCommand").f(void 0, void 0).ser(se_ListPortalsCommand).de(de_ListPortalsCommand).build() {
  static {
    __name(this, "ListPortalsCommand");
  }
};

// src/commands/ListProjectAssetsCommand.ts



var ListProjectAssetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListProjectAssets", {}).n("IoTSiteWiseClient", "ListProjectAssetsCommand").f(void 0, void 0).ser(se_ListProjectAssetsCommand).de(de_ListProjectAssetsCommand).build() {
  static {
    __name(this, "ListProjectAssetsCommand");
  }
};

// src/commands/ListProjectsCommand.ts



var ListProjectsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListProjects", {}).n("IoTSiteWiseClient", "ListProjectsCommand").f(void 0, void 0).ser(se_ListProjectsCommand).de(de_ListProjectsCommand).build() {
  static {
    __name(this, "ListProjectsCommand");
  }
};

// src/commands/ListTagsForResourceCommand.ts



var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListTagsForResource", {}).n("IoTSiteWiseClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
  static {
    __name(this, "ListTagsForResourceCommand");
  }
};

// src/commands/ListTimeSeriesCommand.ts



var ListTimeSeriesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "ListTimeSeries", {}).n("IoTSiteWiseClient", "ListTimeSeriesCommand").f(void 0, void 0).ser(se_ListTimeSeriesCommand).de(de_ListTimeSeriesCommand).build() {
  static {
    __name(this, "ListTimeSeriesCommand");
  }
};

// src/commands/PutDefaultEncryptionConfigurationCommand.ts



var PutDefaultEncryptionConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "PutDefaultEncryptionConfiguration", {}).n("IoTSiteWiseClient", "PutDefaultEncryptionConfigurationCommand").f(void 0, void 0).ser(se_PutDefaultEncryptionConfigurationCommand).de(de_PutDefaultEncryptionConfigurationCommand).build() {
  static {
    __name(this, "PutDefaultEncryptionConfigurationCommand");
  }
};

// src/commands/PutLoggingOptionsCommand.ts



var PutLoggingOptionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "PutLoggingOptions", {}).n("IoTSiteWiseClient", "PutLoggingOptionsCommand").f(void 0, void 0).ser(se_PutLoggingOptionsCommand).de(de_PutLoggingOptionsCommand).build() {
  static {
    __name(this, "PutLoggingOptionsCommand");
  }
};

// src/commands/PutStorageConfigurationCommand.ts



var PutStorageConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "PutStorageConfiguration", {}).n("IoTSiteWiseClient", "PutStorageConfigurationCommand").f(void 0, void 0).ser(se_PutStorageConfigurationCommand).de(de_PutStorageConfigurationCommand).build() {
  static {
    __name(this, "PutStorageConfigurationCommand");
  }
};

// src/commands/TagResourceCommand.ts



var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "TagResource", {}).n("IoTSiteWiseClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
  static {
    __name(this, "TagResourceCommand");
  }
};

// src/commands/UntagResourceCommand.ts



var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UntagResource", {}).n("IoTSiteWiseClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
  static {
    __name(this, "UntagResourceCommand");
  }
};

// src/commands/UpdateAccessPolicyCommand.ts



var UpdateAccessPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateAccessPolicy", {}).n("IoTSiteWiseClient", "UpdateAccessPolicyCommand").f(void 0, void 0).ser(se_UpdateAccessPolicyCommand).de(de_UpdateAccessPolicyCommand).build() {
  static {
    __name(this, "UpdateAccessPolicyCommand");
  }
};

// src/commands/UpdateAssetCommand.ts



var UpdateAssetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateAsset", {}).n("IoTSiteWiseClient", "UpdateAssetCommand").f(void 0, void 0).ser(se_UpdateAssetCommand).de(de_UpdateAssetCommand).build() {
  static {
    __name(this, "UpdateAssetCommand");
  }
};

// src/commands/UpdateAssetModelCommand.ts



var UpdateAssetModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateAssetModel", {}).n("IoTSiteWiseClient", "UpdateAssetModelCommand").f(void 0, void 0).ser(se_UpdateAssetModelCommand).de(de_UpdateAssetModelCommand).build() {
  static {
    __name(this, "UpdateAssetModelCommand");
  }
};

// src/commands/UpdateAssetModelCompositeModelCommand.ts



var UpdateAssetModelCompositeModelCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateAssetModelCompositeModel", {}).n("IoTSiteWiseClient", "UpdateAssetModelCompositeModelCommand").f(void 0, void 0).ser(se_UpdateAssetModelCompositeModelCommand).de(de_UpdateAssetModelCompositeModelCommand).build() {
  static {
    __name(this, "UpdateAssetModelCompositeModelCommand");
  }
};

// src/commands/UpdateAssetPropertyCommand.ts



var UpdateAssetPropertyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateAssetProperty", {}).n("IoTSiteWiseClient", "UpdateAssetPropertyCommand").f(void 0, void 0).ser(se_UpdateAssetPropertyCommand).de(de_UpdateAssetPropertyCommand).build() {
  static {
    __name(this, "UpdateAssetPropertyCommand");
  }
};

// src/commands/UpdateDashboardCommand.ts



var UpdateDashboardCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateDashboard", {}).n("IoTSiteWiseClient", "UpdateDashboardCommand").f(void 0, void 0).ser(se_UpdateDashboardCommand).de(de_UpdateDashboardCommand).build() {
  static {
    __name(this, "UpdateDashboardCommand");
  }
};

// src/commands/UpdateDatasetCommand.ts



var UpdateDatasetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateDataset", {}).n("IoTSiteWiseClient", "UpdateDatasetCommand").f(void 0, void 0).ser(se_UpdateDatasetCommand).de(de_UpdateDatasetCommand).build() {
  static {
    __name(this, "UpdateDatasetCommand");
  }
};

// src/commands/UpdateGatewayCapabilityConfigurationCommand.ts



var UpdateGatewayCapabilityConfigurationCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateGatewayCapabilityConfiguration", {}).n("IoTSiteWiseClient", "UpdateGatewayCapabilityConfigurationCommand").f(void 0, void 0).ser(se_UpdateGatewayCapabilityConfigurationCommand).de(de_UpdateGatewayCapabilityConfigurationCommand).build() {
  static {
    __name(this, "UpdateGatewayCapabilityConfigurationCommand");
  }
};

// src/commands/UpdateGatewayCommand.ts



var UpdateGatewayCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateGateway", {}).n("IoTSiteWiseClient", "UpdateGatewayCommand").f(void 0, void 0).ser(se_UpdateGatewayCommand).de(de_UpdateGatewayCommand).build() {
  static {
    __name(this, "UpdateGatewayCommand");
  }
};

// src/commands/UpdatePortalCommand.ts



var UpdatePortalCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdatePortal", {}).n("IoTSiteWiseClient", "UpdatePortalCommand").f(UpdatePortalRequestFilterSensitiveLog, void 0).ser(se_UpdatePortalCommand).de(de_UpdatePortalCommand).build() {
  static {
    __name(this, "UpdatePortalCommand");
  }
};

// src/commands/UpdateProjectCommand.ts



var UpdateProjectCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("AWSIoTSiteWise", "UpdateProject", {}).n("IoTSiteWiseClient", "UpdateProjectCommand").f(void 0, void 0).ser(se_UpdateProjectCommand).de(de_UpdateProjectCommand).build() {
  static {
    __name(this, "UpdateProjectCommand");
  }
};

// src/IoTSiteWise.ts
var commands = {
  AssociateAssetsCommand,
  AssociateTimeSeriesToAssetPropertyCommand,
  BatchAssociateProjectAssetsCommand,
  BatchDisassociateProjectAssetsCommand,
  BatchGetAssetPropertyAggregatesCommand,
  BatchGetAssetPropertyValueCommand,
  BatchGetAssetPropertyValueHistoryCommand,
  BatchPutAssetPropertyValueCommand,
  CreateAccessPolicyCommand,
  CreateAssetCommand,
  CreateAssetModelCommand,
  CreateAssetModelCompositeModelCommand,
  CreateBulkImportJobCommand,
  CreateDashboardCommand,
  CreateDatasetCommand,
  CreateGatewayCommand,
  CreatePortalCommand,
  CreateProjectCommand,
  DeleteAccessPolicyCommand,
  DeleteAssetCommand,
  DeleteAssetModelCommand,
  DeleteAssetModelCompositeModelCommand,
  DeleteDashboardCommand,
  DeleteDatasetCommand,
  DeleteGatewayCommand,
  DeletePortalCommand,
  DeleteProjectCommand,
  DeleteTimeSeriesCommand,
  DescribeAccessPolicyCommand,
  DescribeActionCommand,
  DescribeAssetCommand,
  DescribeAssetCompositeModelCommand,
  DescribeAssetModelCommand,
  DescribeAssetModelCompositeModelCommand,
  DescribeAssetPropertyCommand,
  DescribeBulkImportJobCommand,
  DescribeDashboardCommand,
  DescribeDatasetCommand,
  DescribeDefaultEncryptionConfigurationCommand,
  DescribeGatewayCommand,
  DescribeGatewayCapabilityConfigurationCommand,
  DescribeLoggingOptionsCommand,
  DescribePortalCommand,
  DescribeProjectCommand,
  DescribeStorageConfigurationCommand,
  DescribeTimeSeriesCommand,
  DisassociateAssetsCommand,
  DisassociateTimeSeriesFromAssetPropertyCommand,
  ExecuteActionCommand,
  ExecuteQueryCommand,
  GetAssetPropertyAggregatesCommand,
  GetAssetPropertyValueCommand,
  GetAssetPropertyValueHistoryCommand,
  GetInterpolatedAssetPropertyValuesCommand,
  InvokeAssistantCommand,
  ListAccessPoliciesCommand,
  ListActionsCommand,
  ListAssetModelCompositeModelsCommand,
  ListAssetModelPropertiesCommand,
  ListAssetModelsCommand,
  ListAssetPropertiesCommand,
  ListAssetRelationshipsCommand,
  ListAssetsCommand,
  ListAssociatedAssetsCommand,
  ListBulkImportJobsCommand,
  ListCompositionRelationshipsCommand,
  ListDashboardsCommand,
  ListDatasetsCommand,
  ListGatewaysCommand,
  ListPortalsCommand,
  ListProjectAssetsCommand,
  ListProjectsCommand,
  ListTagsForResourceCommand,
  ListTimeSeriesCommand,
  PutDefaultEncryptionConfigurationCommand,
  PutLoggingOptionsCommand,
  PutStorageConfigurationCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateAccessPolicyCommand,
  UpdateAssetCommand,
  UpdateAssetModelCommand,
  UpdateAssetModelCompositeModelCommand,
  UpdateAssetPropertyCommand,
  UpdateDashboardCommand,
  UpdateDatasetCommand,
  UpdateGatewayCommand,
  UpdateGatewayCapabilityConfigurationCommand,
  UpdatePortalCommand,
  UpdateProjectCommand
};
var IoTSiteWise = class extends IoTSiteWiseClient {
  static {
    __name(this, "IoTSiteWise");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, IoTSiteWise);

// src/pagination/BatchGetAssetPropertyAggregatesPaginator.ts

var paginateBatchGetAssetPropertyAggregates = (0, import_core.createPaginator)(IoTSiteWiseClient, BatchGetAssetPropertyAggregatesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/BatchGetAssetPropertyValueHistoryPaginator.ts

var paginateBatchGetAssetPropertyValueHistory = (0, import_core.createPaginator)(IoTSiteWiseClient, BatchGetAssetPropertyValueHistoryCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/BatchGetAssetPropertyValuePaginator.ts

var paginateBatchGetAssetPropertyValue = (0, import_core.createPaginator)(IoTSiteWiseClient, BatchGetAssetPropertyValueCommand, "nextToken", "nextToken", "");

// src/pagination/ExecuteQueryPaginator.ts

var paginateExecuteQuery = (0, import_core.createPaginator)(IoTSiteWiseClient, ExecuteQueryCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/GetAssetPropertyAggregatesPaginator.ts

var paginateGetAssetPropertyAggregates = (0, import_core.createPaginator)(IoTSiteWiseClient, GetAssetPropertyAggregatesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/GetAssetPropertyValueHistoryPaginator.ts

var paginateGetAssetPropertyValueHistory = (0, import_core.createPaginator)(IoTSiteWiseClient, GetAssetPropertyValueHistoryCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/GetInterpolatedAssetPropertyValuesPaginator.ts

var paginateGetInterpolatedAssetPropertyValues = (0, import_core.createPaginator)(IoTSiteWiseClient, GetInterpolatedAssetPropertyValuesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAccessPoliciesPaginator.ts

var paginateListAccessPolicies = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAccessPoliciesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssetModelCompositeModelsPaginator.ts

var paginateListAssetModelCompositeModels = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssetModelCompositeModelsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssetModelPropertiesPaginator.ts

var paginateListAssetModelProperties = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssetModelPropertiesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssetModelsPaginator.ts

var paginateListAssetModels = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssetModelsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssetPropertiesPaginator.ts

var paginateListAssetProperties = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssetPropertiesCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssetRelationshipsPaginator.ts

var paginateListAssetRelationships = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssetRelationshipsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssetsPaginator.ts

var paginateListAssets = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssetsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListAssociatedAssetsPaginator.ts

var paginateListAssociatedAssets = (0, import_core.createPaginator)(IoTSiteWiseClient, ListAssociatedAssetsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListBulkImportJobsPaginator.ts

var paginateListBulkImportJobs = (0, import_core.createPaginator)(IoTSiteWiseClient, ListBulkImportJobsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListCompositionRelationshipsPaginator.ts

var paginateListCompositionRelationships = (0, import_core.createPaginator)(IoTSiteWiseClient, ListCompositionRelationshipsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDashboardsPaginator.ts

var paginateListDashboards = (0, import_core.createPaginator)(IoTSiteWiseClient, ListDashboardsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListDatasetsPaginator.ts

var paginateListDatasets = (0, import_core.createPaginator)(IoTSiteWiseClient, ListDatasetsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListGatewaysPaginator.ts

var paginateListGateways = (0, import_core.createPaginator)(IoTSiteWiseClient, ListGatewaysCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListPortalsPaginator.ts

var paginateListPortals = (0, import_core.createPaginator)(IoTSiteWiseClient, ListPortalsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListProjectAssetsPaginator.ts

var paginateListProjectAssets = (0, import_core.createPaginator)(IoTSiteWiseClient, ListProjectAssetsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListProjectsPaginator.ts

var paginateListProjects = (0, import_core.createPaginator)(IoTSiteWiseClient, ListProjectsCommand, "nextToken", "nextToken", "maxResults");

// src/pagination/ListTimeSeriesPaginator.ts

var paginateListTimeSeries = (0, import_core.createPaginator)(IoTSiteWiseClient, ListTimeSeriesCommand, "nextToken", "nextToken", "maxResults");

// src/waiters/waitForAssetActive.ts
var import_util_waiter = require("@smithy/util-waiter");
var checkState = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAssetCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.assetStatus.state;
      }, "returnComparator");
      if (returnComparator() === "ACTIVE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.assetStatus.state;
      }, "returnComparator");
      if (returnComparator() === "FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForAssetActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
}, "waitForAssetActive");
var waitUntilAssetActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilAssetActive");

// src/waiters/waitForAssetModelActive.ts

var checkState2 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAssetModelCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.assetModelStatus.state;
      }, "returnComparator");
      if (returnComparator() === "ACTIVE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.assetModelStatus.state;
      }, "returnComparator");
      if (returnComparator() === "FAILED") {
        return { state: import_util_waiter.WaiterState.FAILURE, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForAssetModelActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
}, "waitForAssetModelActive");
var waitUntilAssetModelActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState2);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilAssetModelActive");

// src/waiters/waitForAssetModelNotExists.ts

var checkState3 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAssetModelCommand(input));
    reason = result;
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "ResourceNotFoundException") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForAssetModelNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
}, "waitForAssetModelNotExists");
var waitUntilAssetModelNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState3);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilAssetModelNotExists");

// src/waiters/waitForAssetNotExists.ts

var checkState4 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribeAssetCommand(input));
    reason = result;
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "ResourceNotFoundException") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForAssetNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
}, "waitForAssetNotExists");
var waitUntilAssetNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState4);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilAssetNotExists");

// src/waiters/waitForPortalActive.ts

var checkState5 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribePortalCommand(input));
    reason = result;
    try {
      const returnComparator = /* @__PURE__ */ __name(() => {
        return result.portalStatus.state;
      }, "returnComparator");
      if (returnComparator() === "ACTIVE") {
        return { state: import_util_waiter.WaiterState.SUCCESS, reason };
      }
    } catch (e) {
    }
  } catch (exception) {
    reason = exception;
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForPortalActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
}, "waitForPortalActive");
var waitUntilPortalActive = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState5);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilPortalActive");

// src/waiters/waitForPortalNotExists.ts

var checkState6 = /* @__PURE__ */ __name(async (client, input) => {
  let reason;
  try {
    const result = await client.send(new DescribePortalCommand(input));
    reason = result;
  } catch (exception) {
    reason = exception;
    if (exception.name && exception.name == "ResourceNotFoundException") {
      return { state: import_util_waiter.WaiterState.SUCCESS, reason };
    }
  }
  return { state: import_util_waiter.WaiterState.RETRY, reason };
}, "checkState");
var waitForPortalNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  return (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
}, "waitForPortalNotExists");
var waitUntilPortalNotExists = /* @__PURE__ */ __name(async (params, input) => {
  const serviceDefaults = { minDelay: 3, maxDelay: 120 };
  const result = await (0, import_util_waiter.createWaiter)({ ...serviceDefaults, ...params }, input, checkState6);
  return (0, import_util_waiter.checkExceptions)(result);
}, "waitUntilPortalNotExists");
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  IoTSiteWiseServiceException,
  __Client,
  IoTSiteWiseClient,
  IoTSiteWise,
  $Command,
  AssociateAssetsCommand,
  AssociateTimeSeriesToAssetPropertyCommand,
  BatchAssociateProjectAssetsCommand,
  BatchDisassociateProjectAssetsCommand,
  BatchGetAssetPropertyAggregatesCommand,
  BatchGetAssetPropertyValueCommand,
  BatchGetAssetPropertyValueHistoryCommand,
  BatchPutAssetPropertyValueCommand,
  CreateAccessPolicyCommand,
  CreateAssetCommand,
  CreateAssetModelCommand,
  CreateAssetModelCompositeModelCommand,
  CreateBulkImportJobCommand,
  CreateDashboardCommand,
  CreateDatasetCommand,
  CreateGatewayCommand,
  CreatePortalCommand,
  CreateProjectCommand,
  DeleteAccessPolicyCommand,
  DeleteAssetCommand,
  DeleteAssetModelCommand,
  DeleteAssetModelCompositeModelCommand,
  DeleteDashboardCommand,
  DeleteDatasetCommand,
  DeleteGatewayCommand,
  DeletePortalCommand,
  DeleteProjectCommand,
  DeleteTimeSeriesCommand,
  DescribeAccessPolicyCommand,
  DescribeActionCommand,
  DescribeAssetCommand,
  DescribeAssetCompositeModelCommand,
  DescribeAssetModelCommand,
  DescribeAssetModelCompositeModelCommand,
  DescribeAssetPropertyCommand,
  DescribeBulkImportJobCommand,
  DescribeDashboardCommand,
  DescribeDatasetCommand,
  DescribeDefaultEncryptionConfigurationCommand,
  DescribeGatewayCapabilityConfigurationCommand,
  DescribeGatewayCommand,
  DescribeLoggingOptionsCommand,
  DescribePortalCommand,
  DescribeProjectCommand,
  DescribeStorageConfigurationCommand,
  DescribeTimeSeriesCommand,
  DisassociateAssetsCommand,
  DisassociateTimeSeriesFromAssetPropertyCommand,
  ExecuteActionCommand,
  ExecuteQueryCommand,
  GetAssetPropertyAggregatesCommand,
  GetAssetPropertyValueCommand,
  GetAssetPropertyValueHistoryCommand,
  GetInterpolatedAssetPropertyValuesCommand,
  InvokeAssistantCommand,
  ListAccessPoliciesCommand,
  ListActionsCommand,
  ListAssetModelCompositeModelsCommand,
  ListAssetModelPropertiesCommand,
  ListAssetModelsCommand,
  ListAssetPropertiesCommand,
  ListAssetRelationshipsCommand,
  ListAssetsCommand,
  ListAssociatedAssetsCommand,
  ListBulkImportJobsCommand,
  ListCompositionRelationshipsCommand,
  ListDashboardsCommand,
  ListDatasetsCommand,
  ListGatewaysCommand,
  ListPortalsCommand,
  ListProjectAssetsCommand,
  ListProjectsCommand,
  ListTagsForResourceCommand,
  ListTimeSeriesCommand,
  PutDefaultEncryptionConfigurationCommand,
  PutLoggingOptionsCommand,
  PutStorageConfigurationCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateAccessPolicyCommand,
  UpdateAssetCommand,
  UpdateAssetModelCommand,
  UpdateAssetModelCompositeModelCommand,
  UpdateAssetPropertyCommand,
  UpdateDashboardCommand,
  UpdateDatasetCommand,
  UpdateGatewayCapabilityConfigurationCommand,
  UpdateGatewayCommand,
  UpdatePortalCommand,
  UpdateProjectCommand,
  paginateBatchGetAssetPropertyAggregates,
  paginateBatchGetAssetPropertyValueHistory,
  paginateBatchGetAssetPropertyValue,
  paginateExecuteQuery,
  paginateGetAssetPropertyAggregates,
  paginateGetAssetPropertyValueHistory,
  paginateGetInterpolatedAssetPropertyValues,
  paginateListAccessPolicies,
  paginateListAssetModelCompositeModels,
  paginateListAssetModelProperties,
  paginateListAssetModels,
  paginateListAssetProperties,
  paginateListAssetRelationships,
  paginateListAssets,
  paginateListAssociatedAssets,
  paginateListBulkImportJobs,
  paginateListCompositionRelationships,
  paginateListDashboards,
  paginateListDatasets,
  paginateListGateways,
  paginateListPortals,
  paginateListProjectAssets,
  paginateListProjects,
  paginateListTimeSeries,
  waitForAssetActive,
  waitUntilAssetActive,
  waitForAssetModelActive,
  waitUntilAssetModelActive,
  waitForAssetModelNotExists,
  waitUntilAssetModelNotExists,
  waitForAssetNotExists,
  waitUntilAssetNotExists,
  waitForPortalActive,
  waitUntilPortalActive,
  waitForPortalNotExists,
  waitUntilPortalNotExists,
  AccessDeniedException,
  Permission,
  Quality,
  AggregateType,
  PropertyDataType,
  PropertyNotificationState,
  AssetErrorCode,
  ForwardingConfigState,
  ComputeLocation,
  AssetModelState,
  ErrorCode,
  DetailedErrorCode,
  AssetModelType,
  AssetModelVersionType,
  AssetRelationshipType,
  AssetState,
  ConflictingOperationException,
  InternalFailureException,
  InvalidRequestException,
  LimitExceededException,
  ResourceAlreadyExistsException,
  ResourceNotFoundException,
  ThrottlingException,
  AuthMode,
  TimeOrdering,
  BatchGetAssetPropertyAggregatesErrorCode,
  BatchEntryCompletionStatus,
  ServiceUnavailableException,
  BatchGetAssetPropertyValueErrorCode,
  BatchGetAssetPropertyValueHistoryErrorCode,
  BatchPutAssetPropertyValueErrorCode,
  PreconditionFailedException,
  ColumnName,
  JobStatus,
  DatasetSourceFormat,
  DatasetSourceType,
  DatasetState,
  ImageFileType,
  PortalType,
  MonitorErrorCode,
  PortalState,
  ConfigurationState,
  EncryptionType,
  CapabilitySyncStatus,
  LoggingLevel,
  DisassociatedDataStorageState,
  StorageType,
  WarmTierState,
  ScalarType,
  QueryTimeoutException,
  ValidationException,
  ResponseStream,
  IdentityType,
  ResourceType,
  TargetResourceType,
  ListAssetModelPropertiesFilter,
  ListAssetPropertiesFilter,
  TraversalType,
  ListAssetsFilter,
  TraversalDirection,
  CreatePortalRequestFilterSensitiveLog,
  DescribePortalResponseFilterSensitiveLog,
  InvokeAssistantRequestFilterSensitiveLog,
  ResponseStreamFilterSensitiveLog,
  InvokeAssistantResponseFilterSensitiveLog,
  ListBulkImportJobsFilter,
  UnauthorizedException,
  ListTimeSeriesType,
  TooManyTagsException,
  UpdatePortalRequestFilterSensitiveLog
});

