import { isDefined } from '../../common/predicates';
// i.e. [12, -21, 0, 13] => [-21, 0, 12, 13]
const ascendingSort = (a, b) => a - b;
/**
 * Get Best Stream Store
 *
 * Returns the best data stream store based on what resolution and/or aggregation we would like to visualize
 * on connected widgets
 * This will be the store with the smallest resolution which is not smaller than the requested resolution,
 * that is not in a loading or error state.
 */
export const getBestStreamStore = (dataStreamId, requestResolution, store, requestAggregation) => {
    var _a, _b, _c;
    const resolutionStreamStore = (_a = store[dataStreamId]) === null || _a === void 0 ? void 0 : _a.resolutions;
    const rawDataStreamStore = (_b = store[dataStreamId]) === null || _b === void 0 ? void 0 : _b.rawData;
    if (requestResolution === 0 &&
        rawDataStreamStore &&
        !rawDataStreamStore.isLoading) {
        return rawDataStreamStore;
    }
    if (resolutionStreamStore == null || !requestAggregation) {
        return undefined;
    }
    const resolutions = Object.keys(resolutionStreamStore)
        .map(Number)
        .sort(ascendingSort)
        .filter((res) => res >= requestResolution);
    const streamStores = resolutions
        .map((res) => { var _a; return (_a = resolutionStreamStore[res]) === null || _a === void 0 ? void 0 : _a[requestAggregation]; })
        .filter(isDefined);
    const closestAvailableData = streamStores.find(({ error, isLoading }) => error == null && !isLoading);
    // If the exact store is present and is not in a loading state, return it!
    // This is because we want to display an error if it occurs on our requested resolution.
    const exactStore = resolutions[0] === requestResolution ? streamStores[0] : undefined;
    if (exactStore && !exactStore.isLoading) {
        return exactStore;
    }
    return (closestAvailableData ||
        (requestAggregation
            ? (_c = resolutionStreamStore[requestResolution]) === null || _c === void 0 ? void 0 : _c[requestAggregation]
            : undefined));
};
