import { isHistoricalViewport } from '../../common/predicates';
import { parseDuration } from '../../common/time';
/**
 * Collect the errors across the relevant data stream infos
 */
export const getDateInterval = (viewport) => {
    const start = isHistoricalViewport(viewport)
        ? new Date(viewport.start)
        : new Date(Date.now() - parseDuration(viewport.duration));
    const end = isHistoricalViewport(viewport)
        ? new Date(viewport.end)
        : new Date();
    return {
        start,
        end,
    };
};
export const hasIntervalForRange = (intervals, range) => {
    if (!intervals)
        return false;
    return intervals === null || intervals === void 0 ? void 0 : intervals.some((interval) => {
        const intervalStart = new Date(interval[0]);
        const intervalEnd = new Date(interval[1]);
        const isStartWithinInterval = range.start >= intervalStart && range.start <= intervalEnd;
        const isEndWithinInterval = range.end >= intervalStart && range.end <= intervalEnd;
        return isStartWithinInterval && isEndWithinInterval;
    });
};
