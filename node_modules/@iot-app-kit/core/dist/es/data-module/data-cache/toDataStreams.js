import { parseDuration } from '../../common/time';
/**
 * To Data Streams
 *
 * Returns the data streams, with the various resolutions of data collapsed into a single corresponding data stream.
 */
export const toDataStreams = ({ requestInformations, dataStreamsStores, }) => {
    return requestInformations.map((info) => {
        var _a, _b, _c;
        const { aggregationType, resolution } = info;
        const resolutionStreamStore = ((_a = dataStreamsStores[info.id]) === null || _a === void 0 ? void 0 : _a.resolutions) || {};
        const rawDataStreamStore = (_b = dataStreamsStores[info.id]) === null || _b === void 0 ? void 0 : _b.rawData;
        const parsedResolution = parseDuration(resolution);
        const { dataCache, requestCache: _requestCache, requestHistory: _requestHistory, ...restOfStream } = (aggregationType &&
            ((_c = resolutionStreamStore[parsedResolution]) === null || _c === void 0 ? void 0 : _c[aggregationType])) ||
            rawDataStreamStore ||
            {};
        const dataPoints = (dataCache === null || dataCache === void 0 ? void 0 : dataCache.items.flat()) || [];
        // Create new data stream for the corresponding info
        return {
            ...restOfStream,
            id: info.id,
            refId: info.refId,
            resolution: parsedResolution,
            data: dataPoints,
        };
    });
};
