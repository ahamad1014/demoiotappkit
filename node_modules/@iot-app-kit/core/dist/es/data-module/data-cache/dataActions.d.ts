import { AggregateType } from '@aws-sdk/client-iotsitewise';
import type { Action, Dispatch } from 'redux';
import type { DataStreamId, Resolution, DataStream, RequestInformationAndRange } from '../types';
import type { ErrorDetails } from '../../common/types';
/**
 *
 * Redux Actions used to communicated to `<bp-data-store />`
 *
 * Presents an external interface for bp-connector implementations to hook
 * data sources to the bp-components.
 */
/**
 * On Request
 */
export declare const REQUEST = "REQUEST";
export interface RequestData extends Action<'REQUEST'> {
    type: typeof REQUEST;
    payload: RequestInformationAndRange;
}
export type OnRequest = (payload: RequestData['payload']) => [Date, Date][];
export declare const onRequestAction: (payload: RequestData['payload']) => RequestData;
export declare const onRequest: (payload: RequestData['payload']) => (dispatch: Dispatch) => void;
/**
 * On Error
 */
export declare const ERROR = "ERROR";
export interface ErrorResponse extends Action<'ERROR'> {
    type: typeof ERROR;
    payload: {
        id: DataStreamId;
        resolution: Resolution;
        error: ErrorDetails;
        aggregationType?: AggregateType;
    };
}
export declare const onErrorAction: (id: DataStreamId, resolution: Resolution, error: ErrorDetails, aggregationType?: AggregateType) => ErrorResponse;
export declare const onError: (id: DataStreamId, resolution: Resolution, error: ErrorDetails, aggregationType?: AggregateType) => (dispatch: Dispatch) => void;
/**
 * On Success
 */
export declare const SUCCESS = "SUCCESS";
export interface SuccessResponse extends Action<'SUCCESS'> {
    type: typeof SUCCESS;
    payload: {
        id: DataStreamId;
        data: DataStream;
        first: Date;
        last: Date;
        requestInformation: RequestInformationAndRange;
    };
}
export declare const onSuccessAction: (id: DataStreamId, data: DataStream, first: Date, last: Date, requestInformation: RequestInformationAndRange) => SuccessResponse;
export declare const onSuccess: (id: DataStreamId, data: DataStream, first: Date, last: Date, requestInformation: RequestInformationAndRange) => (dispatch: Dispatch) => void;
export type AsyncActions = RequestData | ErrorResponse | SuccessResponse;
//# sourceMappingURL=dataActions.d.ts.map