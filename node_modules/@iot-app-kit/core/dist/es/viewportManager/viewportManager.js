import { v4 } from 'uuid';
const listenerMap = new Map();
const viewportMap = new Map();
/**
 * Publicly exposed manager of viewport groups. Allows components, both internally to IoT App Kit,
 * and external components / code to broadcast updates to viewports within a group.
 *
 * Utilized to allow widgets to provide a synchronized view into data - an example can be
 * found at https://synchrocharts.com/#/Features/Synchronization
 */
export const viewportManager = {
    /**
     * Resets all state related to viewport groups.
     */
    reset: () => {
        listenerMap.clear();
        viewportMap.clear();
    },
    /**
     * Subscribe to viewport group
     *
     * @param viewportGroup - group to subscribe to
     * @param viewportListener - listener for viewport group updates. Called every time an update to the group is called. Not called upon initial subscription
     */
    subscribe: (viewportGroup, viewportListener) => {
        const id = v4();
        const listeners = listenerMap.get(viewportGroup) || new Map();
        listeners.set(id, viewportListener);
        listenerMap.set(viewportGroup, listeners);
        return {
            // Current viewport for the group
            viewport: viewportMap.get(viewportGroup) || null,
            // Leave viewport group, prevents listener from being called in the future
            unsubscribe: () => {
                var _a;
                (_a = listenerMap.get(viewportGroup)) === null || _a === void 0 ? void 0 : _a.delete(id);
            },
        };
    },
    update: (viewportGroup, viewport, topic) => {
        viewportMap.set(viewportGroup, viewport);
        const listeners = listenerMap.get(viewportGroup);
        if (!listeners)
            return;
        // broadcast update to all listeners within the group
        for (const [, viewportListener] of listeners) {
            viewportListener(viewport, topic);
        }
    },
};
