"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onSuccess = exports.onSuccessAction = exports.SUCCESS = exports.onError = exports.onErrorAction = exports.ERROR = exports.onRequest = exports.onRequestAction = exports.REQUEST = void 0;
/**
 *
 * Redux Actions used to communicated to `<bp-data-store />`
 *
 * Presents an external interface for bp-connector implementations to hook
 * data sources to the bp-components.
 */
/**
 * On Request
 */
exports.REQUEST = 'REQUEST';
const onRequestAction = (payload) => ({
    type: exports.REQUEST,
    payload,
});
exports.onRequestAction = onRequestAction;
const onRequest = (payload) => (dispatch) => {
    dispatch((0, exports.onRequestAction)(payload));
};
exports.onRequest = onRequest;
/**
 * On Error
 */
exports.ERROR = 'ERROR';
const onErrorAction = (id, resolution, error, aggregationType) => ({
    type: exports.ERROR,
    payload: {
        id,
        resolution,
        error,
        aggregationType,
    },
});
exports.onErrorAction = onErrorAction;
const onError = (id, resolution, error, aggregationType) => (dispatch) => {
    dispatch((0, exports.onErrorAction)(id, resolution, error, aggregationType));
};
exports.onError = onError;
/**
 * On Success
 */
exports.SUCCESS = 'SUCCESS';
const onSuccessAction = (id, data, first, last, requestInformation) => ({
    type: exports.SUCCESS,
    payload: {
        id,
        data,
        first,
        last,
        requestInformation,
    },
});
exports.onSuccessAction = onSuccessAction;
const onSuccess = (id, data, first, last, requestInformation) => (dispatch) => {
    dispatch((0, exports.onSuccessAction)(id, data, first, last, requestInformation));
};
exports.onSuccess = onSuccess;
