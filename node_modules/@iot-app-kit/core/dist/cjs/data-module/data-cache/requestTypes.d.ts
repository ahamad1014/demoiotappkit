import { AggregateType } from '@aws-sdk/client-iotsitewise';
import type { DataStream, DataStreamId } from '../types';
export type DateInterval = {
    start: Date;
    end: Date;
};
export type DurationViewport = {
    duration: string | number;
    group?: string;
};
export type HistoricalViewport = {
    start: Date;
    end: Date;
    group?: string;
};
export type Viewport = DurationViewport | HistoricalViewport;
export type DataRequest = {
    viewport?: Viewport;
    settings?: TimeSeriesDataRequestSettings;
};
/**
 * Request Information utilized by consumers of the widgets to connect the `data-provider` to their data source.
 */
export interface TimeSeriesDataRequest extends DataRequest {
    viewport: Viewport;
}
export type ResolutionConfig = ResolutionMapping | string;
export interface TimeSeriesDataRequestSettings {
    requestBuffer?: number;
    refreshRate?: number;
    resolution?: ResolutionConfig;
    fetchFromStartToEnd?: boolean;
    fetchMostRecentBeforeStart?: boolean;
    fetchMostRecentBeforeEnd?: boolean;
}
export type OnRequestData = (opts: {
    request: TimeSeriesDataRequest;
    resolution: number;
    onError: (dataStreamId: DataStreamId, resolution: number, error: string, aggregationType?: AggregateType) => void;
    onSuccess: (dataStreamId: DataStreamId, dataStream: DataStream, first: Date, last: Date) => void;
    dataStreamId: string;
}) => void;
export type ResolutionMapping = {
    [viewportDuration: number]: number | string;
};
//# sourceMappingURL=requestTypes.d.ts.map