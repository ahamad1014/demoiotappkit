"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const time_1 = require("../../common/time");
const DEFAULT_REFRESH_RATE = 5 * time_1.SECOND_IN_MS;
class RequestScheduler {
    constructor() {
        this.intervalMap = {};
        this.isScheduled = (id) => id in this.intervalMap;
        this.handleVisibilityChange = () => {
            if (!document.hidden) {
                this.synchronizeIntervals();
            }
        };
        this.resetInterval = (id, synchronize = true) => {
            const existingInterval = this.intervalMap[id];
            if (existingInterval) {
                this.remove(id);
                this.create({ id, ...existingInterval, synchronize });
            }
        };
        // Ensure intervals are reset when the page is visible again to keep them in sync
        document.addEventListener('visibilitychange', this.handleVisibilityChange);
    }
    create({ id, refreshRate = DEFAULT_REFRESH_RATE, refreshExpiration, cb, synchronize = true, }) {
        if (this.isScheduled(id)) {
            return;
        }
        const isExpired = () => refreshExpiration && Date.now() >= refreshExpiration;
        if (isExpired()) {
            return;
        }
        const intervalId = setInterval(() => {
            if (isExpired()) {
                this.remove(id);
                return;
            }
            cb();
        }, refreshRate);
        this.intervalMap[id] = { intervalId, refreshRate, refreshExpiration, cb };
        if (synchronize) {
            this.synchronizeIntervals();
        }
    }
    remove(id) {
        if (!this.isScheduled(id)) {
            return;
        }
        clearInterval(this.intervalMap[id].intervalId);
        delete this.intervalMap[id];
    }
    synchronizeIntervals() {
        Object.keys(this.intervalMap).forEach((id) => {
            this.resetInterval(id, false);
        });
    }
}
exports.default = RequestScheduler;
