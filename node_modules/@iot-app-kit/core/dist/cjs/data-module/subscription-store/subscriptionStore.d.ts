import { DataCache } from '../data-cache/dataCacheWrapped';
import DataSourceStore from '../data-source-store/dataSourceStore';
import type { DataStreamQuery, Subscription, SubscriptionUpdate } from '../types';
import type { CacheSettings } from '../data-cache/types';
import * as RefreshRate from './refreshRate';
/**
 * Subscription store
 *
 * Manages the collection of subscriptions
 */
export default class SubscriptionStore<Query extends DataStreamQuery> {
    private dataSourceStore;
    private dataCache;
    private cacheSettings;
    private unsubscribeMap;
    private scheduler;
    private subscriptions;
    constructor({ dataSourceStore, dataCache, cacheSettings, }: {
        dataSourceStore: DataSourceStore<Query>;
        dataCache: DataCache;
        cacheSettings: CacheSettings;
    });
    getRefreshRate(subscription: Subscription): number;
    addSubscription(subscriptionId: string, subscription: Subscription<Query | (Query & RefreshRate.QueryRequestSettings)>): Promise<void>;
    updateSubscription(subscriptionId: string, subscriptionUpdate: SubscriptionUpdate<Query>): Promise<void>;
    removeSubscription: (subscriptionId: string) => void;
    getSubscriptions: () => Subscription[];
    getSubscription: (subscriptionId: string) => Subscription;
}
//# sourceMappingURL=subscriptionStore.d.ts.map