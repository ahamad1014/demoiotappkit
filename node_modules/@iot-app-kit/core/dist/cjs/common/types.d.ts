import type { TimeSeriesDataRequest, Viewport } from '../data-module/data-cache/requestTypes';
import type { ComparisonOperator, DataStreamId, StatusIconType, TimeSeriesData } from '../data-module/types';
export type ErrorDetails<T = undefined> = T extends undefined ? {
    msg: string;
    type?: string;
    status?: string;
} : {
    msg: string;
    type?: string;
    status?: string;
    meta: T;
};
export interface ProviderObserver<DataType> {
    next: (data: DataType) => void;
    error?: (error: any) => void;
}
export interface Provider<Result> {
    subscribe(observer: ProviderObserver<Result>): void;
    unsubscribe(): void;
}
export interface ProviderWithViewport<Result> extends Provider<Result> {
    updateViewport(viewport: Viewport): void;
}
export interface Query<Result, Params = void> {
    /**
     * Builds the query into a provider
     * @param sessionId
     * @param params
     */
    build(sessionId: string, params?: Params): Provider<Result>;
    /**
     * Returns a string which is unique to the query
     */
    toQueryString(): string;
}
export interface TimeQuery<Result, Params = void> extends Query<Result, Params> {
    build(sessionId: string, params?: Params): ProviderWithViewport<Result>;
}
export interface TreeProvider<Result, Branch> extends Provider<Result> {
    expand(branch: Branch): void;
    collapse(branch: Branch): void;
}
export interface TreeQuery<Result, Branch, Params = void> extends Query<Result, Params> {
    build(sessionId: string, params?: Params): TreeProvider<Result, Branch>;
}
export type TimeSeriesDataQuery = TimeQuery<TimeSeriesData[], TimeSeriesDataRequest>;
export type DataModuleSession = {
    close: () => void;
};
export type Session = {
    close: () => void;
};
type AnnotationLabel = {
    text: string;
    show: boolean;
};
export type AnnotationValue = number | string | boolean | Date;
export type ThresholdValue = number | string | boolean;
export interface Annotation<T extends AnnotationValue> {
    color: string;
    value: T;
    showValue?: boolean;
    label?: AnnotationLabel;
    icon?: StatusIconType;
    description?: string;
    isEditable?: boolean;
    id?: string;
}
export interface Threshold<T extends ThresholdValue = ThresholdValue> extends Annotation<T> {
    comparisonOperator: ComparisonOperator;
    severity?: number;
    dataStreamIds?: DataStreamId[];
}
export type ThresholdStyleType = {
    visible?: boolean;
    fill?: string;
};
export type StyledThreshold = Threshold & ThresholdStyleType;
export type ThresholdSettings = {
    colorBreachedData?: boolean;
};
export type XAnnotation = Annotation<Date>;
export type YAnnotation = Annotation<number | string | boolean> | Threshold;
export {};
//# sourceMappingURL=types.d.ts.map