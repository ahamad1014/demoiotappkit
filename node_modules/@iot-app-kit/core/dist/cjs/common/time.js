"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDuration = exports.displayDate = exports.convertMS = exports.FULL_DATE = exports.SHORT_TIME = exports.YEAR_IN_MS = exports.MONTH_IN_MS = exports.DAY_IN_MS = exports.HOUR_IN_MS = exports.MINUTE_IN_MS = exports.SECOND_IN_MS = exports.NANO_SECOND_IN_MS = void 0;
const parse_duration_1 = __importDefault(require("parse-duration"));
exports.NANO_SECOND_IN_MS = 1 / 1000000;
exports.SECOND_IN_MS = 1000;
exports.MINUTE_IN_MS = 60 * exports.SECOND_IN_MS;
exports.HOUR_IN_MS = 60 * exports.MINUTE_IN_MS;
exports.DAY_IN_MS = 24 * exports.HOUR_IN_MS;
// Not precisely accurate, only estimates. exact duration depends on start date. use with care.
exports.MONTH_IN_MS = 30 * exports.DAY_IN_MS;
exports.YEAR_IN_MS = 12 * exports.MONTH_IN_MS;
// Global time format strings
exports.SHORT_TIME = 'hh:mm a';
exports.FULL_DATE = 'yyy-MM-dd hh:mm:ss a';
/**
 * ConvertMS is a helper function that will take in milliseconds and convert it to the highest detonator
 * and does not return the "remainder"
 *
 * It is important to note that the object returning does not represent equivalence!
 *
 * For Example:
 * convert(MINUTE_IN_MS) will return:
 * {
 *   day: 0,
 *   hour: 0
 *   minute: 1,
 *   seconds: 0,
 * }
 *
 * IT DOES NOT RETURN:
 *
 * {
 *   day: 0,
 *   hour: 0,
 *   minute: 1,
 *   seconds: 60, <--- does not return the "equivalence"
 * }
 */
const convertMS = (milliseconds) => {
    if (milliseconds < 0) {
        throw new Error('Time cannot be negative!');
    }
    let seconds = Math.floor(milliseconds / 1000);
    let minute = Math.floor(seconds / 60);
    let hour = Math.floor(minute / 60);
    const day = Math.floor(hour / 24);
    seconds %= 60;
    minute %= 60;
    hour %= 24;
    return {
        day,
        hour,
        minute,
        seconds,
    };
};
exports.convertMS = convertMS;
const displayDate = (date, resolution, { start, end }) => {
    const viewportDurationMS = end.getTime() - start.getTime();
    if (resolution < exports.HOUR_IN_MS) {
        if (viewportDurationMS < exports.MINUTE_IN_MS) {
            return date.toLocaleString('en-US', {
                minute: 'numeric',
                second: 'numeric',
            });
        }
        if (viewportDurationMS <= 10 * exports.MINUTE_IN_MS) {
            return date.toLocaleString('en-US', {
                hour: 'numeric',
                minute: 'numeric',
                second: 'numeric',
                hour12: true,
            });
        }
        if (viewportDurationMS <= exports.HOUR_IN_MS) {
            return date.toLocaleString('en-US', {
                hour: 'numeric',
                minute: 'numeric',
                hour12: true,
            });
        }
        if (viewportDurationMS <= exports.DAY_IN_MS) {
            return date.toLocaleString('en-US', {
                hour12: true,
                hour: 'numeric',
                month: 'numeric',
                minute: 'numeric',
                day: 'numeric',
            });
        }
        if (viewportDurationMS <= exports.MONTH_IN_MS) {
            return date.toLocaleString('en-US', {
                hour12: true,
                hour: 'numeric',
                year: 'numeric',
                month: 'numeric',
                day: 'numeric',
            });
        }
        return date.toLocaleString('en-US', {
            day: 'numeric',
            month: 'numeric',
            year: 'numeric',
        });
    }
    if (resolution <= exports.HOUR_IN_MS) {
        return date.toLocaleString('en-US', {
            hour: 'numeric',
            day: 'numeric',
            month: 'numeric',
            hour12: true,
        });
    }
    if (resolution < exports.DAY_IN_MS) {
        return date.toLocaleString('en-US', {
            day: 'numeric',
            month: 'numeric',
        });
    }
    return date.toLocaleString('en-US', {
        year: 'numeric',
        month: 'numeric',
        day: 'numeric',
    });
};
exports.displayDate = displayDate;
const parseDuration = (duration) => {
    if (typeof duration === 'number') {
        return duration;
    }
    const parsedTime = (0, parse_duration_1.default)(duration, 'ms');
    // if duration is a string but we cannot parse it, we default to 10 mins.
    return parsedTime != null ? parsedTime : 10 * exports.MINUTE_IN_MS;
};
exports.parseDuration = parseDuration;
