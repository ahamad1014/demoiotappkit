"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isDurationViewport = exports.isHistoricalViewport = exports.isNumber = exports.isNumberDataStream = exports.isSupportedDataType = exports.isValid = exports.isDefined = void 0;
const constants_1 = require("../common/constants");
/**
 * Predicate Utilities
 *
 * A place for generic predicates. Useful when needing predicates which play nicely
 * with typescript, or other non-trivial predicate logic.
 *
 * Providing smart predicates with built in type guards can give us stronger typing in our business logic.
 * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types
 *
 * Example:
 *
 * Without Type Guards (to be avoided):
 * ```
 * const maybeItems : (Item | null)[] = SOME_MAYBE_ITEMS;
 * const items: Item[] = maybeItems.filter(x => x != null) as Item[];
 * ```
 *
 * With Type Guards:
 * ```
 * const maybeItems : (Item | null)[] = SOME_MAYBE_ITEMS;
 * const items: Item[] = maybeItems.filter(isDefined);
 * ```
 *
 * No type casting necessary :-) all you have to do is trust that the shared predicate properly
 * type guards.
 *
 */
const isDefined = (value) => value != null;
exports.isDefined = isDefined;
const isValid = (predicate) => (t) => predicate(t);
exports.isValid = isValid;
// As of now, we only check if the current component supports string or not.
const isSupportedDataType = (supportsString) => ({ dataType }) => (supportsString && dataType === constants_1.DATA_TYPE.STRING) ||
    dataType !== constants_1.DATA_TYPE.STRING;
exports.isSupportedDataType = isSupportedDataType;
const isNumberDataStream = (stream) => stream.dataType === constants_1.DATA_TYPE.NUMBER;
exports.isNumberDataStream = isNumberDataStream;
const isNumber = (val) => typeof val === 'number';
exports.isNumber = isNumber;
const isHistoricalViewport = (viewport) => 'start' in viewport && 'end' in viewport;
exports.isHistoricalViewport = isHistoricalViewport;
const isDurationViewport = (viewport) => 'duration' in viewport;
exports.isDurationViewport = isDurationViewport;
