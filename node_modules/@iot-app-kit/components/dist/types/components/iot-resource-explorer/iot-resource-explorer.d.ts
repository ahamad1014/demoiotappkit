import { ErrorDetails, TreeProvider, TreeQuery } from '@iot-app-kit/core';
import { BranchReference, SiteWiseAssetTreeNode } from '@iot-app-kit/source-iotsitewise';
import { SiteWiseAssetResource, FilterTexts, ColumnDefinition } from './types';
import { EmptyStateProps, ITreeNode } from '@iot-app-kit/related-table';
import { TableProps } from '@awsui/components-react/table';
import { NonCancelableCustomEvent } from '@awsui/components-react';
export declare class IotResourceExplorer {
  query: TreeQuery<SiteWiseAssetTreeNode[], BranchReference>;
  columnDefinitions: ColumnDefinition<any>[];
  filterTexts?: FilterTexts;
  selectionType?: TableProps.SelectionType;
  loadingText?: string;
  empty?: EmptyStateProps;
  filterEnabled: boolean;
  sortingEnabled: boolean;
  paginationEnabled: boolean;
  wrapLines: boolean;
  widgetId: string;
  onSelectionChange: (event: NonCancelableCustomEvent<TableProps.SelectionChangeDetail<unknown>>) => void;
  expanded?: boolean;
  provider: TreeProvider<SiteWiseAssetTreeNode[], BranchReference>;
  items: SiteWiseAssetResource[];
  expandedItems: {
    [id: string]: boolean;
  };
  errors: ErrorDetails[];
  defaults: {
    selectionType: TableProps.SelectionType;
    loadingText: string;
    filterText: {
      placeholder: string;
      empty: string;
      noMatch: string;
    };
    empty: {
      header: string;
      description: string;
    };
  };
  buildProvider(): TreeProvider<SiteWiseAssetTreeNode[], BranchReference>;
  componentWillLoad(): void;
  componentWillUnmount(): void;
  expandNode: (node: ITreeNode<SiteWiseAssetResource>) => void;
  watchItems(newItems: ITreeNode<SiteWiseAssetResource>[]): void;
  render(): any;
}
