import { Component, h, Prop, State, Watch } from '@stencil/core';
import { BranchReference, } from '@iot-app-kit/source-iotsitewise';
import { parseSitewiseAssetTree } from './utils';
import { v4 as uuidv4 } from 'uuid';
const DEFAULT_COLUMNS = [
  {
    sortingField: 'name',
    id: 'name',
    header: 'Asset Name',
    cell: ({ name }) => name,
  },
  {
    sortingField: 'status',
    id: 'status',
    header: 'Status',
    cell: ({ status }) => status === null || status === void 0 ? void 0 : status.state,
  },
  {
    sortingField: 'creationDate',
    id: 'creationDate',
    header: 'Created',
    cell: ({ creationDate }) => creationDate === null || creationDate === void 0 ? void 0 : creationDate.toUTCString(),
  },
  {
    sortingField: 'lastUpdateDate',
    id: 'lastUpdateDate',
    header: 'Updated',
    cell: ({ lastUpdateDate }) => lastUpdateDate === null || lastUpdateDate === void 0 ? void 0 : lastUpdateDate.toUTCString(),
  },
];
export class IotResourceExplorer {
  constructor() {
    this.columnDefinitions = DEFAULT_COLUMNS;
    this.filterEnabled = true;
    this.sortingEnabled = true;
    this.paginationEnabled = true;
    this.wrapLines = false;
    this.widgetId = uuidv4();
    this.expanded = false;
    this.items = [];
    this.expandedItems = {};
    this.errors = [];
    this.defaults = {
      selectionType: 'single',
      loadingText: 'loading...',
      filterText: {
        placeholder: 'Filter by name',
        empty: 'No assets found.',
        noMatch: `We can't find a match.`,
      },
      empty: {
        header: 'No assets',
        description: `You don't have any asset.`,
      },
    };
    this.expandNode = (node) => {
      var _a;
      (_a = node.hierarchies) === null || _a === void 0 ? void 0 : _a.forEach((hierarchy) => {
        this.provider.expand(new BranchReference(node.id, hierarchy.id));
      });
    };
  }
  buildProvider() {
    return this.query.build(this.widgetId);
  }
  componentWillLoad() {
    this.provider = this.buildProvider();
    this.provider.subscribe({
      next: (data) => {
        this.items = parseSitewiseAssetTree(data);
      },
      error: (err) => {
        this.errors = err;
      },
    });
  }
  componentWillUnmount() {
    this.provider.unsubscribe();
  }
  watchItems(newItems) {
    if (this.expanded) {
      const newExpandedItems = {};
      newItems.forEach(({ id, hierarchies, hasChildren }) => {
        if (!this.expandedItems[id] && hasChildren) {
          hierarchies === null || hierarchies === void 0 ? void 0 : hierarchies.forEach((hierarchy) => {
            this.provider.expand(new BranchReference(id, hierarchy.id));
          });
          newExpandedItems[id] = true;
        }
      });
      this.expandedItems = Object.assign(Object.assign({}, this.expandedItems), newExpandedItems);
    }
  }
  render() {
    var _a;
    const filtering = this.filterEnabled
      ? this.filterTexts || this.defaults.filterText
      : undefined;
    const collectionOptions = {
      columnDefinitions: this.columnDefinitions,
      keyPropertyName: 'id',
      parentKeyPropertyName: 'parentId',
      selection: {
        keepSelection: true,
      },
      sorting: {
        defaultState: {
          sortingColumn: {
            sortingField: 'name',
          },
          isDescending: true,
        },
      },
      filtering,
    };
    if (this.paginationEnabled) {
      collectionOptions.pagination = { pageSize: 20 };
    }
    let empty = this.defaults.empty;
    if (this.empty) {
      empty = this.empty;
    }
    if (this.errors.length > 0) {
      // TODO: Make use of all the errors
      empty = {
        header: 'Error',
        description: (_a = this.errors[this.errors.length - 1]) === null || _a === void 0 ? void 0 : _a.msg,
      };
    }
    return (h("iot-tree-table", { items: this.items, collectionOptions: collectionOptions, columnDefinitions: this.columnDefinitions, selectionType: this.selectionType || this.defaults.selectionType, loadingText: this.loadingText || this.defaults.loadingText, filterPlaceholder: filtering === null || filtering === void 0 ? void 0 : filtering.placeholder, onExpandChildren: this.expandNode, onSelectionChange: this.onSelectionChange, empty: empty, sortingDisabled: !this.sortingEnabled, wrapLines: this.wrapLines, expanded: this.expanded }));
  }
  static get is() { return "iot-resource-explorer"; }
  static get properties() { return {
    "query": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "TreeQuery<SiteWiseAssetTreeNode[], BranchReference>",
        "resolved": "TreeQuery<SiteWiseAssetTreeNode[], BranchReference, void>",
        "references": {
          "TreeQuery": {
            "location": "import",
            "path": "@iot-app-kit/core"
          },
          "BranchReference": {
            "location": "import",
            "path": "@iot-app-kit/source-iotsitewise"
          },
          "SiteWiseAssetTreeNode": {
            "location": "import",
            "path": "@iot-app-kit/source-iotsitewise"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "columnDefinitions": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "ColumnDefinition<any>[]",
        "resolved": "ColumnDefinition<any>[]",
        "references": {
          "ColumnDefinition": {
            "location": "import",
            "path": "./types"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "defaultValue": "DEFAULT_COLUMNS"
    },
    "filterTexts": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "FilterTexts",
        "resolved": "FilterTexts | undefined",
        "references": {
          "FilterTexts": {
            "location": "import",
            "path": "./types"
          }
        }
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "selectionType": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "TableProps.SelectionType",
        "resolved": "\"multi\" | \"single\" | undefined",
        "references": {
          "TableProps": {
            "location": "import",
            "path": "@awsui/components-react/table"
          }
        }
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "selection-type",
      "reflect": false
    },
    "loadingText": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "loading-text",
      "reflect": false
    },
    "empty": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "EmptyStateProps",
        "resolved": "EmptyStateProps | undefined",
        "references": {
          "EmptyStateProps": {
            "location": "import",
            "path": "@iot-app-kit/related-table"
          }
        }
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "filterEnabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "filter-enabled",
      "reflect": false,
      "defaultValue": "true"
    },
    "sortingEnabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "sorting-enabled",
      "reflect": false,
      "defaultValue": "true"
    },
    "paginationEnabled": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "pagination-enabled",
      "reflect": false,
      "defaultValue": "true"
    },
    "wrapLines": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "wrap-lines",
      "reflect": false,
      "defaultValue": "false"
    },
    "widgetId": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "widget-id",
      "reflect": false,
      "defaultValue": "uuidv4()"
    },
    "onSelectionChange": {
      "type": "unknown",
      "mutable": false,
      "complexType": {
        "original": "(\n    event: NonCancelableCustomEvent<TableProps.SelectionChangeDetail<unknown>>\n  ) => void",
        "resolved": "(event: NonCancelableCustomEvent<SelectionChangeDetail<unknown>>) => void",
        "references": {
          "NonCancelableCustomEvent": {
            "location": "import",
            "path": "@awsui/components-react"
          },
          "TableProps": {
            "location": "import",
            "path": "@awsui/components-react/table"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      }
    },
    "expanded": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean | undefined",
        "references": {}
      },
      "required": false,
      "optional": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "expanded",
      "reflect": false,
      "defaultValue": "false"
    }
  }; }
  static get states() { return {
    "provider": {},
    "items": {},
    "expandedItems": {},
    "errors": {}
  }; }
  static get watchers() { return [{
      "propName": "items",
      "methodName": "watchItems"
    }]; }
}
