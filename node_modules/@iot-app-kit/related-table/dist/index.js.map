{"version":3,"file":"index.js","sources":["../src/Model/TreeNode.ts","../src/utils/cleanup.ts","../src/utils/build.ts","../src/utils/expand.ts","../src/utils/filter.ts","../src/utils/flat.ts","../src/utils/sort.ts","../src/Hooks/useTreeCollection.ts","../src/RelatedTable/Common/StyledComponents.tsx","../src/RelatedTable/Common/TreeLines.tsx","../src/config.ts","../src/RelatedTable/ButtonWithTreeLines.tsx","../src/RelatedTable/RelatedTable.tsx","../src/RelatedTable/EmptyState.tsx","../src/HOC/withUseTreeCollection.tsx"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\n\nexport enum ExpandableTableNodeStatus {\n  normal,\n  loading,\n  emptyChildren,\n}\n\nexport enum LinePrefixTypes {\n  MiddleChild = 'MiddleChild',\n  LastChild = 'LastChild',\n  ChildOfMiddleChild = 'ChildOfMiddleChild',\n  ChildOfLastChild = 'ChildOfLastChild',\n  Indentation = 'Indentation',\n}\n\nexport interface Metadata<T> {\n  prefix: LinePrefixTypes[];\n  children: ITreeNode<T>[];\n  status: ExpandableTableNodeStatus;\n  expanded: boolean;\n  visible: boolean;\n  parent?: ITreeNode<T>;\n}\n\nexport type TreeMap<T> = Map<string, ITreeNode<T>>;\n\nclass InternalTreeNode<T> {\n  public hasChildren = false;\n\n  public id: string = uuidv4();\n\n  private metadata: Metadata<T> = {\n    prefix: [],\n    children: [],\n    status: ExpandableTableNodeStatus.normal,\n    expanded: false,\n    visible: false,\n  };\n\n  public constructor(params: T, metadata?: Metadata<T>) {\n    Object.assign(this, params);\n    this.metadata = {\n      ...this.metadata,\n      ...metadata,\n    };\n  }\n\n  addChild(child: ITreeNode<T>) {\n    this.metadata.children.push(child);\n  }\n\n  removeAllChildren() {\n    this.metadata.children = [];\n  }\n\n  getChildren() {\n    return this.metadata.children;\n  }\n\n  getParent() {\n    return this.metadata.parent;\n  }\n\n  toggleExpandCollapse() {\n    this.metadata.expanded = !this.metadata.expanded;\n  }\n\n  isExpanded() {\n    return this.metadata.expanded;\n  }\n\n  isVisible() {\n    return this.metadata.visible;\n  }\n\n  getMetadata() {\n    return this.metadata;\n  }\n\n  getPrefix() {\n    return this.metadata.prefix;\n  }\n\n  getStatus() {\n    return this.metadata.status;\n  }\n\n  setStatus(status: ExpandableTableNodeStatus) {\n    this.metadata.status = status;\n  }\n\n  setVisible(visible: boolean) {\n    this.metadata.visible = visible;\n  }\n\n  setParentNode(parentNode: any) {\n    this.metadata.parent = parentNode;\n  }\n\n  buildPrefix(lastChild: boolean, parentLastChildPath: boolean[]) {\n    const parent = this.getParent();\n    if (!parent) {\n      return;\n    }\n\n    const prefix: LinePrefixTypes[] = [\n      LinePrefixTypes.Indentation,\n      lastChild ? LinePrefixTypes.LastChild : LinePrefixTypes.MiddleChild,\n    ];\n\n    for (let i = parentLastChildPath.length - 1; i >= 1; i -= 1) {\n      const isParentLastChild = parentLastChildPath[i];\n      const treeLineMode = isParentLastChild\n        ? LinePrefixTypes.ChildOfLastChild\n        : LinePrefixTypes.ChildOfMiddleChild;\n      prefix.splice(1, 0, treeLineMode);\n    }\n\n    this.metadata.prefix = prefix;\n  }\n}\n\nexport type ITreeNode<T> = InternalTreeNode<T> & T;\nexport const TreeNode = InternalTreeNode as new <T>(\n  props: T,\n  metadata?: Metadata<T>\n) => ITreeNode<T>;\n","import { ITreeNode, TreeMap } from '../Model/TreeNode';\n\nconst removeNode = <T>(\n  node: ITreeNode<T>,\n  keyPropertyName: string,\n  treeMap: TreeMap<T>\n) => {\n  const key = (node as any)[keyPropertyName];\n\n  if (node.getParent()) {\n    const parentChildren = node.getParent()?.getChildren();\n    const childIndex = parentChildren?.findIndex((child) => child === node);\n    if (childIndex != null) {\n      parentChildren?.splice(childIndex, 1);\n    }\n    node.setParentNode(undefined);\n  }\n\n  node\n    .getChildren()\n    .forEach((child) => removeNode(child, keyPropertyName, treeMap));\n  node.removeAllChildren();\n  treeMap.delete(key);\n};\n\nexport function cleanupTree<T>(\n  keyPropertyName: string,\n  treeMap: TreeMap<T>,\n  staleNodeKeys: Set<string>\n) {\n  staleNodeKeys.forEach((key) => {\n    const node = treeMap.get(key);\n    if (node) {\n      removeNode(node, keyPropertyName, treeMap);\n    }\n  });\n}\n","import {\n  ExpandableTableNodeStatus,\n  ITreeNode,\n  TreeMap,\n  TreeNode,\n} from '../Model/TreeNode';\nimport { cleanupTree } from './cleanup';\n\nconst createOrSetParentNode = <T>(\n  node: ITreeNode<T>,\n  treeMap: TreeMap<T>,\n  keyPropertyName: string,\n  parentKeyPropertyName: string\n) => {\n  const parentKey = (node as Record<string, unknown>)[\n    parentKeyPropertyName\n  ] as string;\n  if (parentKey) {\n    const parentNode =\n      treeMap.get(parentKey) ||\n      new TreeNode({ [keyPropertyName]: parentKey } as T);\n    if (\n      parentNode.getChildren().length === 0 ||\n      node.getParent() !== parentNode\n    ) {\n      node.setParentNode(parentNode);\n      parentNode.addChild(node);\n    }\n    treeMap.set(parentKey, parentNode);\n  }\n};\n\nconst updateNode = <T>(node: ITreeNode<T>, newData: T) => {\n  Object.keys(newData as Record<string, unknown>).forEach((prop) => {\n    // eslint-disable-next-line no-param-reassign\n    (node as Record<string, unknown>)[prop] = (\n      newData as Record<string, unknown>\n    )[prop];\n  });\n};\n\nconst createNode = <T>(\n  item: T,\n  treeMap: TreeMap<T>,\n  keyPropertyName: string,\n  parentKeyPropertyName: string\n): ITreeNode<T> => {\n  const key = (item as any)[keyPropertyName];\n  let node = treeMap.get(key);\n  if (node) {\n    // in case exists just updates\n    updateNode(node, item);\n  } else {\n    node = new TreeNode(item);\n  }\n\n  createOrSetParentNode(node, treeMap, keyPropertyName, parentKeyPropertyName);\n  treeMap.set(key, node);\n  return node;\n};\n\nconst prepareNode = <T>(\n  node: ITreeNode<T>,\n  treeMap: TreeMap<T>,\n  keyPropertyName: string\n): ITreeNode<T> => {\n  const key = (node as any)[keyPropertyName];\n  const parent = node.getParent();\n  const isVisible = parent ? parent.isExpanded() && parent.isVisible() : true;\n  node.setVisible(isVisible);\n  node.setStatus(\n    node.hasChildren || node.getChildren().length > 0\n      ? ExpandableTableNodeStatus.normal\n      : ExpandableTableNodeStatus.emptyChildren\n  );\n  treeMap.set(key, node);\n  return node;\n};\n\nexport const buildTreeNodes = <T>(\n  items: T[],\n  treeMap: TreeMap<T>,\n  keyPropertyName: string,\n  parentKeyPropertyName: string\n): ITreeNode<T>[] => {\n  const staleNodeKeys = new Set<string>(Array.from(treeMap.keys()));\n  const treeNodes = items\n    .map((item) => {\n      const key = (item as any)[keyPropertyName];\n      staleNodeKeys.delete(key);\n      return createNode(item, treeMap, keyPropertyName, parentKeyPropertyName);\n    })\n    .map((node) => prepareNode(node, treeMap, keyPropertyName))\n    .filter((node) => typeof node.getParent() === 'undefined');\n\n  cleanupTree(keyPropertyName, treeMap, staleNodeKeys);\n  return treeNodes;\n};\n\nexport const recursiveBuildTreePrefix = <T>(\n  node: ITreeNode<T>,\n  index: number,\n  parentLastChildPath: boolean[]\n) => {\n  const parent = node.getParent();\n  const isLastChild = parent ? parent.getChildren().length - 1 === index : true;\n  node.buildPrefix(isLastChild, parentLastChildPath);\n  node\n    .getChildren()\n    .forEach((child: ITreeNode<T>, childIndex) =>\n      recursiveBuildTreePrefix(\n        child,\n        childIndex,\n        parentLastChildPath.concat([isLastChild])\n      )\n    );\n  return node;\n};\n\nexport const buildTreePrefix = <T>(tree: ITreeNode<T>[]) => {\n  return tree.map((node, index) => {\n    return recursiveBuildTreePrefix(node, index, []);\n  });\n};\n","import { ITreeNode, TreeMap } from '../Model/TreeNode';\n\nexport function expandOrCollapseChildren<T>(\n  node: ITreeNode<T>,\n  treeMap: TreeMap<T>,\n  keyPropertyName: string\n) {\n  node.getChildren().forEach((child: ITreeNode<T>) => {\n    const key = (child as any)[keyPropertyName];\n    child.setVisible(node.isExpanded() && node.isVisible());\n    treeMap.set(key, child);\n    expandOrCollapseChildren(child, treeMap, keyPropertyName);\n  });\n}\n","import { ITreeNode } from '../Model/TreeNode';\n\nexport function filteringFunction<T extends Record<string, any>>(\n  item: ITreeNode<T>,\n  filteringText: string,\n  filteringFields?: string[],\n  customFilteringFunction?: (\n    item: ITreeNode<T>,\n    filteringText: string,\n    filteringFields?: string[]\n  ) => boolean\n): boolean {\n  if (filteringText.length === 0) {\n    return item.isVisible();\n  }\n\n  let filterMatched;\n  if (customFilteringFunction) {\n    filterMatched = customFilteringFunction(\n      item,\n      filteringText,\n      filteringFields\n    );\n  } else {\n    const fields = filteringFields || Object.keys(item);\n    const lowFilteringText = filteringText.toLowerCase();\n    filterMatched = fields.some(\n      (key) => String(item[key]).toLowerCase().indexOf(lowFilteringText) > -1\n    );\n  }\n\n  if (!filterMatched) {\n    const childrenFiltered = item\n      .getChildren()\n      .map((child) => filteringFunction(child, filteringText, filteringFields))\n      .find((found) => found);\n    return typeof childrenFiltered !== 'undefined';\n  }\n  return filterMatched;\n}\n","import { ITreeNode } from '../Model/TreeNode';\n\nconst recursiveFlatTree = <T>(\n  tree: ITreeNode<T>[],\n  flattenTree: ITreeNode<T>[]\n) => {\n  tree.forEach((node) => {\n    flattenTree.push(node);\n    if (node.getChildren().length) {\n      recursiveFlatTree(node.getChildren(), flattenTree);\n    }\n  });\n};\n\nexport const flatTree = <T>(tree: ITreeNode<T>[]) => {\n  const flattenTree: ITreeNode<T>[] = [];\n  recursiveFlatTree(tree, flattenTree);\n  return flattenTree;\n};\n","import { TableProps } from '@awsui/components-react/table';\nimport { ITreeNode } from '../Model/TreeNode';\n\nconst defaultComparator = <T>(sortingField: keyof T) => {\n  return (row1: T, row2: T) => {\n    // Use empty string as a default value, because it works well to compare with both strings and numbers:\n    // Every number can be casted to a string, but not every string can be casted to a meaningful number,\n    // sometimes it is NaN.\n    const value1 = row1[sortingField] ?? '';\n    const value2 = row2[sortingField] ?? '';\n    if (typeof value1 === 'string' && typeof value2 === 'string') {\n      return value1.localeCompare(value2);\n    }\n    if (value1 < value2) {\n      return -1;\n    }\n    // use loose comparison to handle inconsistent data types like undefined, null\n    // eslint-disable-next-line eqeqeq\n    return value1 == value2 ? 0 : 1;\n  };\n};\n\nexport const sortTree = <T>(\n  tree: ITreeNode<T>[],\n  sortState: TableProps.SortingState<T>,\n  columnsDefinitions: ReadonlyArray<TableProps.ColumnDefinition<T>>\n) => {\n  const { sortingColumn } = sortState;\n  if (sortingColumn && sortingColumn.sortingField) {\n    const columnDefinition = columnsDefinitions.find(\n      (column) => column.sortingField === sortingColumn.sortingField\n    );\n    const direction = sortState.isDescending ? -1 : 1;\n    const comparator =\n      columnDefinition?.sortingComparator ||\n      defaultComparator(sortState.sortingColumn.sortingField as keyof T);\n\n    tree\n      .sort((a: T, b: T) => comparator(a, b) * direction)\n      .forEach((node) =>\n        sortTree(node.getChildren(), sortState, columnsDefinitions)\n      );\n  }\n};\n","import {\n  FilteringOptions,\n  useCollection,\n  UseCollectionOptions,\n  UseCollectionResult,\n} from '@awsui/collection-hooks';\nimport { useEffect, useState } from 'react';\nimport { TableProps } from '@awsui/components-react/table';\nimport { ITreeNode, TreeMap } from '../Model/TreeNode';\nimport {\n  buildTreeNodes,\n  buildTreePrefix,\n  expandOrCollapseChildren,\n  filteringFunction,\n  flatTree,\n  sortTree,\n} from '../utils';\n\nexport interface UseTreeCollection<T>\n  extends UseCollectionOptions<ITreeNode<T>> {\n  keyPropertyName: string;\n  parentKeyPropertyName: string;\n  columnDefinitions: ReadonlyArray<TableProps.ColumnDefinition<T>>;\n}\n\nexport interface UseTreeCollectionResult<T>\n  extends UseCollectionResult<ITreeNode<T>> {\n  expandNode: (node: ITreeNode<T>) => void;\n  reset: () => void;\n}\n\nexport const useTreeCollection = <T>(\n  items: T[],\n  props: UseTreeCollection<T>,\n  expanded = false\n): UseTreeCollectionResult<T> => {\n  const {\n    keyPropertyName,\n    parentKeyPropertyName,\n    columnDefinitions,\n    ...collectionProps\n  } = props;\n  const [treeMap, setTreeMap] = useState<TreeMap<T>>(new Map());\n  const [nodes, setNodes] = useState<ITreeNode<T>[]>([]);\n  const [sortState, setSortState] = useState<TableProps.SortingState<T>>({\n    ...(collectionProps.sorting?.defaultState || {}),\n  } as TableProps.SortingState<T>);\n  const [columnsDefinitions] = useState(columnDefinitions);\n  const [nodesExpanded, addNodesExpanded] = useState<{\n    [key: string]: boolean;\n  }>({});\n\n  useEffect(() => {\n    const treeNodes = buildTreeNodes(\n      items,\n      treeMap,\n      keyPropertyName,\n      parentKeyPropertyName\n    );\n    sortTree(treeNodes, sortState, columnsDefinitions);\n    // only builds prefix after building and sorting the tree\n    const tree = buildTreePrefix(treeNodes);\n    setNodes(flatTree(tree));\n  }, [\n    items,\n    keyPropertyName,\n    parentKeyPropertyName,\n    sortState,\n    columnsDefinitions,\n    treeMap,\n  ]);\n\n  const expandNode = (node: ITreeNode<T>) => {\n    if (node) {\n      const key = (node as any)[keyPropertyName];\n      const internalNode = nodes.find(\n        (n) => (n as any)[keyPropertyName] === key\n      );\n      if (internalNode) {\n        internalNode.toggleExpandCollapse();\n        expandOrCollapseChildren(internalNode, treeMap, keyPropertyName);\n        treeMap.set(key, internalNode);\n      }\n      const updatedNodes = nodes.concat([]);\n      setNodes(updatedNodes);\n      setTreeMap(treeMap);\n    }\n  };\n\n  const reset = () => {\n    setNodes([]);\n    setTreeMap(new Map());\n  };\n\n  const internalCollectionProps = {\n    ...collectionProps,\n    sorting: undefined, // disable useCollection sort in favor of sortTree\n    filtering: {\n      ...(collectionProps.filtering || {}),\n      filteringFunction: (\n        item: ITreeNode<T>,\n        filteringText: string,\n        filteringFields?: string[]\n      ) =>\n        filteringFunction(\n          item as ITreeNode<Record<string, unknown>>,\n          filteringText,\n          filteringFields,\n          collectionProps.filtering?.filteringFunction as FilteringOptions<\n            ITreeNode<Record<string, unknown>>\n          >['filteringFunction']\n        ),\n    },\n  };\n\n  useEffect(() => {\n    if (expanded) {\n      const newNodesExpanded: { [key: string]: boolean } = {};\n\n      nodes.forEach((node) => {\n        if (!nodesExpanded[node.id]) {\n          if (!node.isExpanded()) {\n            node.toggleExpandCollapse();\n          }\n          node.setVisible(true);\n          newNodesExpanded[node.id] = true;\n        }\n      });\n\n      if (Object.keys(newNodesExpanded).length > 0) {\n        addNodesExpanded({ ...nodesExpanded, ...newNodesExpanded });\n      }\n    }\n  }, [nodesExpanded, nodes, expanded]);\n\n  const collectionResult = useCollection(nodes, internalCollectionProps);\n  const useCollectionResult = {\n    ...collectionResult,\n    collectionProps: {\n      ...collectionResult.collectionProps,\n      sortingColumn: sortState.sortingColumn,\n      sortingDescending: sortState.isDescending,\n      onSortingChange: (event: CustomEvent<TableProps.SortingState<T>>) => {\n        setSortState(event.detail);\n        const customOnSortingChange =\n          collectionResult.collectionProps.onSortingChange;\n        if (customOnSortingChange) {\n          customOnSortingChange(event);\n        }\n      },\n    },\n  } as UseCollectionResult<ITreeNode<T>>;\n\n  return {\n    expandNode,\n    reset,\n    ...useCollectionResult,\n  };\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div<{ height: number }>`\n  position: relative;\n  margin-top: -1rem;\n  margin-bottom: -1rem;\n  margin-left: -1rem;\n  height: ${(props) => props.height}%;\n`;\n\nexport const LeftPad = styled.div<{ length: number }>`\n  display: flex;\n  align-items: center;\n  margin-left: ${({ length }) => length || 0}rem;\n`;\n\nexport const EmptySpace = styled.span<{ width: number; height: number }>`\n  position: relative;\n  width: ${(props) => props.width}rem;\n  height: ${(props) => props.height}rem;\n`;\n\nexport const ButtonWrapper = styled.div`\n  align-self: flex-start;\n`;\n","/* eslint-disable react/no-array-index-key */\nimport * as awsui from '@awsui/design-tokens';\nimport React from 'react';\nimport { ITreeNode, LinePrefixTypes } from '../../Model/TreeNode';\n\nconst TABLE_ROW_HEIGHT_PERCENT = 100;\nconst WRAPPER_EXTRA_HEIGHT_PERCENT = 25;\nconst WRAPPER_VERTICAL_MARGIN_DIFF = 0.5;\nconst BUTTON_PADDING_DIFF = 0.3;\nconst ICON_BUTTON_WIDTH_PERCENT = 100;\nconst ICON_BUTTON_MIDPOINT_X = ICON_BUTTON_WIDTH_PERCENT / 2;\nconst ICON_BUTTON_MIDPOINT_Y = TABLE_ROW_HEIGHT_PERCENT / 2;\nconst SVG_WIDTH_IN_REM = 2.0;\n\nconst AWSUI_TOP_MARGIN_DIFF = 0.2;\nconst AWSUI_SVG_WIDTH_IN_REM = 1.7;\n\nexport enum Theme {\n  INTERNAL = 'INTERNAL',\n  AWSUI = 'AWSUI',\n}\n\nenum Dir {\n  Top,\n  Bottom,\n  LittleBottom,\n  Right,\n}\n\nconst getLines = (directions: Dir[]): JSX.Element[] =>\n  directions.map((dir, index) => {\n    let y1 = TABLE_ROW_HEIGHT_PERCENT;\n    let y2 = ICON_BUTTON_MIDPOINT_Y;\n\n    if (dir === Dir.Top) {\n      y1 = 0;\n    }\n    if (dir === Dir.Right) {\n      y1 = ICON_BUTTON_MIDPOINT_Y;\n    }\n    if (dir === Dir.LittleBottom) {\n      y2 = 0;\n    }\n\n    let x2 = ICON_BUTTON_MIDPOINT_X;\n    if (dir === Dir.Right) {\n      x2 = ICON_BUTTON_WIDTH_PERCENT;\n    }\n\n    return (\n      <line\n        style={{\n          stroke: awsui.colorBorderDividerDefault,\n          strokeWidth: 2,\n          vectorEffect: 'non-scaling-stroke',\n        }}\n        key={`Line${index}`}\n        x1={`${ICON_BUTTON_MIDPOINT_X}%`}\n        x2={`${x2}%`}\n        y1={`${y1}%`}\n        y2={`${y2}%`}\n      />\n    );\n  });\n\nconst getTopMargin = (isLittleBottom: boolean, theme: Theme) => {\n  const topMarginInternal = isLittleBottom\n    ? 1.5 + WRAPPER_VERTICAL_MARGIN_DIFF\n    : `-${WRAPPER_VERTICAL_MARGIN_DIFF}`;\n  const topMarginOpenSource = isLittleBottom\n    ? 1.3 + AWSUI_TOP_MARGIN_DIFF\n    : `-${AWSUI_TOP_MARGIN_DIFF}`;\n  return theme === Theme.INTERNAL ? topMarginInternal : topMarginOpenSource;\n};\n\nconst getHeight = (width: number, hasRightLine: boolean, theme: Theme) => {\n  const heightInternal = hasRightLine\n    ? `${width * 2}rem`\n    : `${TABLE_ROW_HEIGHT_PERCENT + WRAPPER_EXTRA_HEIGHT_PERCENT}%`;\n  const heightOpenSource = hasRightLine\n    ? `${width + 0.7}rem`\n    : `${TABLE_ROW_HEIGHT_PERCENT + WRAPPER_EXTRA_HEIGHT_PERCENT}%`;\n  return theme === Theme.INTERNAL ? heightInternal : heightOpenSource;\n};\n\nconst createLinesSvg = (directions: Dir[], theme: Theme, index: number) => {\n  const width =\n    theme === Theme.INTERNAL ? SVG_WIDTH_IN_REM : AWSUI_SVG_WIDTH_IN_REM;\n  const leftPos = (index - 1) * 2;\n  const rightPos = leftPos + width;\n  const rightLine = directions.find((dir) => dir === Dir.Right);\n  const lines = [directions.filter((dir) => dir !== Dir.Right)];\n\n  if (rightLine) {\n    lines.push([rightLine]);\n  }\n\n  return lines.map((lineDirections) => {\n    const isLittleBottom =\n      lineDirections.length === 1 && lineDirections[0] === Dir.LittleBottom;\n    const isRightLineOnly =\n      lineDirections.length === 1 && lineDirections[0] === Dir.Right;\n    const isTopWithRightLine =\n      lineDirections.length === 1 &&\n      lineDirections[0] === Dir.Top &&\n      !!rightLine;\n\n    const paddingLeft =\n      theme === Theme.INTERNAL ? `${BUTTON_PADDING_DIFF}rem` : '';\n    const topMargin = getTopMargin(isLittleBottom, theme);\n    const height = getHeight(\n      width,\n      isRightLineOnly || isTopWithRightLine,\n      theme\n    );\n    const viewBox =\n      isRightLineOnly || isTopWithRightLine\n        ? `0 0 ${width} ${width * 2}`\n        : `0 0 ${width} ${TABLE_ROW_HEIGHT_PERCENT}`;\n    return (\n      <svg\n        key={`${leftPos}${lineDirections.join('_')}${index}`}\n        style={{\n          margin: `${topMargin}rem 0 0 0`,\n          paddingLeft,\n          position: 'absolute',\n          top: 0,\n          left: `${leftPos}rem`,\n          right: `${rightPos}rem`,\n          bottom: 0,\n          width: `${width}rem`,\n          height,\n        }}\n        viewBox={viewBox}\n        preserveAspectRatio='none'\n      >\n        {getLines(lineDirections)}\n      </svg>\n    );\n  });\n};\n\nexport function createPrefixLines<T>(\n  node: ITreeNode<T>,\n  theme: Theme,\n  alwaysExpanded = false\n) {\n  const prefixSequence: JSX.Element[] = [];\n  node.getPrefix().forEach((prefix, index) => {\n    switch (prefix) {\n      case LinePrefixTypes.Indentation: // Fallthrough, used for external readability\n      case LinePrefixTypes.ChildOfLastChild:\n        break;\n      case LinePrefixTypes.LastChild:\n        prefixSequence.splice(\n          index,\n          0,\n          ...createLinesSvg([Dir.Top, Dir.Right], theme, index)\n        );\n        break;\n      case LinePrefixTypes.ChildOfMiddleChild:\n        prefixSequence.splice(\n          index,\n          0,\n          ...createLinesSvg([Dir.Top, Dir.Bottom], theme, index)\n        );\n        break;\n      case LinePrefixTypes.MiddleChild:\n        prefixSequence.splice(\n          index,\n          0,\n          ...createLinesSvg([Dir.Top, Dir.Bottom, Dir.Right], theme, index)\n        );\n        break;\n      default:\n        prefixSequence.push(<span key='empty' />);\n    }\n  });\n  if ((node.isExpanded() || alwaysExpanded) && node.getChildren().length > 0) {\n    prefixSequence.splice(\n      prefixSequence.length - 1,\n      0,\n      ...createLinesSvg([Dir.LittleBottom], theme, node.getPrefix().length || 1)\n    );\n  }\n  return prefixSequence;\n}\n","export const THEME = 'AWSUI';\n","import Button from '@awsui/components-react/button';\nimport React, { ReactNode, memo } from 'react';\nimport {\n  EmptySpace,\n  LeftPad,\n  Wrapper,\n  ButtonWrapper,\n} from './Common/StyledComponents';\nimport { ExpandableTableNodeStatus, ITreeNode } from '../Model/TreeNode';\nimport { createPrefixLines, Theme } from './Common/TreeLines';\nimport { THEME } from '../config';\n\nconst TABLE_ROW_HEIGHT_PERCENT = 100;\nconst WRAPPER_EXTRA_HEIGHT_PERCENT = 25;\nexport const MARGIN_LEFT_REM_MULTIPLICATOR = 2;\n\nconst noAction = () => {};\nconst theme = THEME as Theme;\nconst emptySpaceHeight = theme === Theme.AWSUI ? 2 : 3;\nconst emptySpaceWidth = theme === Theme.AWSUI ? 0.4 : 0.5;\n\nexport interface ButtonWithTreeLinesProps<T> {\n  node: ITreeNode<T>;\n  content: ReactNode;\n  onClick?: () => void;\n  alwaysExpanded: boolean;\n}\n\nfunction createToggleButton<T>(props: ButtonWithTreeLinesProps<T>) {\n  const { node, onClick, alwaysExpanded } = props;\n  const icon =\n    node.isExpanded() || alwaysExpanded\n      ? 'treeview-collapse'\n      : 'treeview-expand';\n  return node.getChildren().length > 0 || node.hasChildren ? (\n    <ButtonWrapper>\n      <Button\n        disabled={node.getStatus() !== ExpandableTableNodeStatus.normal}\n        variant='icon'\n        iconName={icon}\n        onClick={alwaysExpanded ? noAction : onClick}\n      />\n    </ButtonWrapper>\n  ) : (\n    <EmptySpace height={emptySpaceHeight} width={emptySpaceWidth} />\n  );\n}\n\nexport const ButtonWithTreeLines = memo(function ButtonWithTreeLinesComp<T>(\n  props: ButtonWithTreeLinesProps<T>\n) {\n  const { node, content, alwaysExpanded } = props;\n  const leftPadLength = node.getPrefix().length\n    ? MARGIN_LEFT_REM_MULTIPLICATOR * (node.getPrefix().length - 1)\n    : 0;\n  return (\n    <Wrapper height={TABLE_ROW_HEIGHT_PERCENT + WRAPPER_EXTRA_HEIGHT_PERCENT}>\n      <LeftPad length={leftPadLength}>\n        <>\n          {createPrefixLines(node, theme, alwaysExpanded)}\n          {createToggleButton(props)}\n          {content}\n        </>\n      </LeftPad>\n    </Wrapper>\n  );\n});\n","import Table, { TableProps } from '@awsui/components-react/table';\nimport React, { ReactNode } from 'react';\nimport { ITreeNode } from '../Model/TreeNode';\nimport { ButtonWithTreeLines } from './ButtonWithTreeLines';\n\nexport interface RelatedTableProps<T> extends TableProps<T> {\n  expandChildren: (node: T) => void;\n  expandColumnPosition?: number;\n  filteringText?: string;\n}\n\nexport function RelatedTable<T>(props: RelatedTableProps<ITreeNode<T>>) {\n  const {\n    columnDefinitions,\n    items = [],\n    expandChildren,\n    expandColumnPosition = 1,\n    filteringText = '',\n  } = props;\n\n  const isFiltering = filteringText !== '';\n  const zeroBasedColumnPos = expandColumnPosition - 1;\n  const columns = [...columnDefinitions];\n  const columnToExpand = columns[zeroBasedColumnPos];\n  columns[zeroBasedColumnPos] = {\n    ...columnToExpand,\n    cell: (node, ...rest) => {\n      const cell = columnToExpand?.cell(node, ...rest);\n      return (\n        <ButtonWithTreeLines\n          alwaysExpanded={isFiltering}\n          node={node}\n          content={cell as ReactNode}\n          onClick={() => {\n            expandChildren(node);\n          }}\n        />\n      );\n    },\n  };\n  return <Table {...props} columnDefinitions={columns} items={items} />;\n}\n","import Box from '@awsui/components-react/box';\nimport * as React from 'react';\n\nexport interface EmptyStateProps {\n  header?: string;\n  description?: string;\n}\n\nexport const EmptyState = (props: EmptyStateProps) => {\n  const { header, description } = props;\n  return (\n    <Box textAlign='center' color='inherit'>\n      {header && (\n        <Box variant='strong' textAlign='center' color='inherit'>\n          {header}\n        </Box>\n      )}\n      {description && (\n        <Box variant='p' padding={{ bottom: 's' }} color='inherit'>\n          {description}\n        </Box>\n      )}\n    </Box>\n  );\n};\n","import React, { FC, createElement } from 'react';\nimport TextFilter from '@awsui/components-react/text-filter';\nimport Pagination from '@awsui/components-react/pagination';\nimport { NonCancelableCustomEvent, TableProps } from '@awsui/components-react';\nimport { EmptyState, EmptyStateProps } from '../RelatedTable/EmptyState';\nimport { RelatedTableProps } from '../RelatedTable/RelatedTable';\nimport {\n  useTreeCollection,\n  UseTreeCollection,\n} from '../Hooks/useTreeCollection';\nimport { ITreeNode } from '../Model/TreeNode';\n\nexport interface RelatedTableExtendedProps<T>\n  extends Omit<RelatedTableProps<T>, 'empty'> {\n  items: T[];\n  empty: EmptyStateProps;\n  collectionOptions: UseTreeCollection<T>;\n  filterPlaceholder?: string;\n  expanded?: boolean;\n}\n\nexport const withUseTreeCollection = (RelatedTableComp: FC<any>) => {\n  return (wrapperProps: RelatedTableExtendedProps<any>) => {\n    const {\n      items,\n      empty,\n      columnDefinitions,\n      collectionOptions,\n      expandChildren,\n      filterPlaceholder,\n      onSortingChange,\n      onSelectionChange,\n      expanded,\n    } = wrapperProps;\n    const {\n      expandNode,\n      items: tree,\n      collectionProps,\n      filterProps,\n      paginationProps,\n    } = useTreeCollection(\n      items,\n      {\n        ...collectionOptions,\n        columnDefinitions,\n      },\n      expanded\n    );\n\n    const emptyComponent = createElement(EmptyState, empty);\n    const filterComponent = createElement(TextFilter, {\n      ...filterProps,\n      filteringPlaceholder: filterPlaceholder || '',\n    });\n    const paginationComponent = createElement(Pagination, paginationProps);\n\n    const hocProps = {\n      ...wrapperProps,\n      ...collectionProps,\n      ...filterProps,\n      ...paginationProps,\n      columnDefinitions,\n      items: tree,\n      empty: emptyComponent,\n      filter: filterPlaceholder ? filterComponent : null,\n      pagination: collectionOptions.pagination ? paginationComponent : null,\n      expandChildren: (node: ITreeNode<unknown>) => {\n        expandNode(node);\n        expandChildren(node);\n      },\n      onSortingChange: (\n        event: NonCancelableCustomEvent<TableProps.SortingState<unknown>>\n      ) => {\n        if (onSortingChange) {\n          onSortingChange(event);\n        }\n        if (collectionProps.onSortingChange) {\n          collectionProps.onSortingChange(event);\n        }\n      },\n      onSelectionChange: (\n        event: NonCancelableCustomEvent<\n          TableProps.SelectionChangeDetail<unknown>\n        >\n      ) => {\n        if (onSelectionChange) {\n          onSelectionChange(event);\n        }\n        if (collectionProps.onSelectionChange) {\n          collectionProps.onSelectionChange(event);\n        }\n      },\n    };\n    return <RelatedTableComp {...hocProps} />;\n  };\n};\n"],"names":["ExpandableTableNodeStatus","LinePrefixTypes","InternalTreeNode","params","metadata","hasChildren","id","uuidv4","prefix","children","status","normal","expanded","visible","Object","assign","_extends","_proto","prototype","addChild","child","push","removeAllChildren","getChildren","getParent","parent","toggleExpandCollapse","isExpanded","isVisible","getMetadata","getPrefix","getStatus","setStatus","setVisible","setParentNode","parentNode","buildPrefix","lastChild","parentLastChildPath","Indentation","LastChild","MiddleChild","i","length","isParentLastChild","treeLineMode","ChildOfLastChild","ChildOfMiddleChild","splice","TreeNode","removeNode","node","keyPropertyName","treeMap","key","_node$getParent","parentChildren","childIndex","findIndex","undefined","forEach","cleanupTree","staleNodeKeys","get","createOrSetParentNode","parentKeyPropertyName","parentKey","_TreeNode","set","updateNode","newData","keys","prop","createNode","item","prepareNode","emptyChildren","buildTreeNodes","items","Set","Array","from","treeNodes","map","filter","recursiveBuildTreePrefix","index","isLastChild","concat","buildTreePrefix","tree","expandOrCollapseChildren","filteringFunction","filteringText","filteringFields","customFilteringFunction","filterMatched","fields","lowFilteringText","toLowerCase","some","String","indexOf","childrenFiltered","find","found","recursiveFlatTree","flattenTree","flatTree","defaultComparator","sortingField","row1","row2","_row1$sortingField","_row2$sortingField","value1","value2","localeCompare","sortTree","sortState","columnsDefinitions","sortingColumn","columnDefinition","column","direction","isDescending","comparator","sortingComparator","sort","a","b","useTreeCollection","props","_collectionProps$sort","columnDefinitions","collectionProps","_objectWithoutPropertiesLoose","_excluded","_useState","useState","Map","setTreeMap","_useState2","nodes","setNodes","_useState3","sorting","defaultState","setSortState","_useState4","_useState5","nodesExpanded","addNodesExpanded","useEffect","expandNode","internalNode","n","updatedNodes","reset","internalCollectionProps","filtering","_collectionProps$filt","newNodesExpanded","collectionResult","useCollection","useCollectionResult","sortingDescending","onSortingChange","event","detail","customOnSortingChange","Wrapper","styled","div","_templateObject","_taggedTemplateLiteralLoose","height","LeftPad","_templateObject2","_ref","EmptySpace","span","_templateObject3","width","ButtonWrapper","_templateObject4","TABLE_ROW_HEIGHT_PERCENT","WRAPPER_EXTRA_HEIGHT_PERCENT","WRAPPER_VERTICAL_MARGIN_DIFF","BUTTON_PADDING_DIFF","ICON_BUTTON_WIDTH_PERCENT","ICON_BUTTON_MIDPOINT_X","ICON_BUTTON_MIDPOINT_Y","SVG_WIDTH_IN_REM","AWSUI_TOP_MARGIN_DIFF","AWSUI_SVG_WIDTH_IN_REM","Theme","Dir","getLines","directions","dir","y1","y2","Top","Right","LittleBottom","x2","React","createElement","style","stroke","awsui","colorBorderDividerDefault","strokeWidth","vectorEffect","x1","getTopMargin","isLittleBottom","theme","topMarginInternal","topMarginOpenSource","INTERNAL","getHeight","hasRightLine","heightInternal","heightOpenSource","createLinesSvg","leftPos","rightPos","rightLine","lines","lineDirections","isRightLineOnly","isTopWithRightLine","paddingLeft","topMargin","viewBox","join","margin","position","top","left","right","bottom","preserveAspectRatio","createPrefixLines","alwaysExpanded","prefixSequence","apply","Bottom","THEME","MARGIN_LEFT_REM_MULTIPLICATOR","noAction","emptySpaceHeight","AWSUI","emptySpaceWidth","createToggleButton","onClick","icon","Button","disabled","variant","iconName","ButtonWithTreeLines","memo","ButtonWithTreeLinesComp","content","leftPadLength","Fragment","RelatedTable","_props$items","expandChildren","_props$expandColumnPo","expandColumnPosition","_props$filteringText","isFiltering","zeroBasedColumnPos","columns","columnToExpand","cell","slice","call","arguments","Table","EmptyState","header","description","Box","textAlign","color","padding","withUseTreeCollection","RelatedTableComp","wrapperProps","empty","collectionOptions","filterPlaceholder","onSelectionChange","_useTreeCollection","filterProps","paginationProps","emptyComponent","filterComponent","TextFilter","filteringPlaceholder","paginationComponent","Pagination","hocProps","pagination"],"mappings":"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"}