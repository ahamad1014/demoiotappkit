import { Component, Element, h, Prop } from '@stencil/core';
import tippy from 'tippy.js';
import { TIPPY_SETTINGS } from '../common/toolTipSettings';
import { Value } from '../value/Value';
export class ScGridTooltip {
    constructor() {
        this.displayToolTip = () => {
            const container = this.el.querySelector('.tooltip-container');
            const tooltip = this.el.querySelector('.cell-tooltip');
            if (tooltip != null && container != null) {
                tooltip.style.display = 'block';
                this.tooltip = tippy(container, Object.assign(Object.assign({}, TIPPY_SETTINGS), { placement: 'left', content: tooltip }));
            }
        };
    }
    componentDidLoad() {
        this.displayToolTip();
    }
    disconnectedCallback() {
        if (this.tooltip) {
            this.tooltip.destroy();
        }
    }
    render() {
        const thereIsSomeData = this.propertyPoint != null || this.alarmPoint != null;
        const color = this.breachedThreshold ? this.breachedThreshold.color : undefined;
        const displaysMoreThanTitle = thereIsSomeData && this.isEnabled;
        return (h("div", { class: "tooltip-container" },
            h("div", { class: "cell-tooltip awsui-util-container awsui" },
                h("div", { class: { 'awsui-util-container-header': true, 'awsui-util-mb-m': displaysMoreThanTitle } },
                    h("h3", null, this.title)),
                displaysMoreThanTitle && (h("div", null,
                    h("div", { class: "awsui-util-spacing-v-s" },
                        this.propertyPoint && (h("div", null,
                            h("div", { class: "awsui-util-label" }, "Latest value:"),
                            h("div", null,
                                h("strong", { style: { color } },
                                    h(Value, { value: this.propertyPoint.y })),
                                ' ',
                                "at",
                                ' ',
                                new Date(this.propertyPoint.x).toLocaleString('en-US', {
                                    hour12: true,
                                    minute: 'numeric',
                                    hour: 'numeric',
                                    year: 'numeric',
                                    month: 'numeric',
                                    day: 'numeric',
                                })))),
                        this.alarmPoint && (h("div", null,
                            h("div", { class: "awsui-util-label" }, "Status:"),
                            h("div", null,
                                h("strong", { style: { color } },
                                    h(Value, { value: this.alarmPoint.y })),
                                ' ',
                                "since",
                                ' ',
                                new Date(this.alarmPoint.x).toLocaleString('en-US', {
                                    hour12: true,
                                    minute: 'numeric',
                                    hour: 'numeric',
                                    year: 'numeric',
                                    month: 'numeric',
                                    day: 'numeric',
                                }),
                                this.breachedThreshold && this.breachedThreshold.description && (h("div", null,
                                    "(",
                                    this.breachedThreshold.description,
                                    ")"))))))))),
            h("slot", null)));
    }
    static get is() { return "sc-grid-tooltip"; }
    static get properties() { return {
        "isEnabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-enabled",
            "reflect": false
        },
        "title": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "title",
            "reflect": false
        },
        "propertyPoint": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataPoint",
                "resolved": "undefined | { x: number; y: Primitive; }",
                "references": {
                    "DataPoint": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "alarmPoint": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataPoint",
                "resolved": "undefined | { x: number; y: Primitive; }",
                "references": {
                    "DataPoint": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "breachedThreshold": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Threshold",
                "resolved": "Threshold<Primitive> | undefined",
                "references": {
                    "Threshold": {
                        "location": "import",
                        "path": "../charts/common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
