import { Component, Event, h, Prop, State, Watch } from '@stencil/core';
import throttle from 'lodash.throttle';
import { isThreshold } from '../charts/common/annotations/utils';
import { constructTableData } from './constructTableData';
import { viewportEndDate, viewportStartDate, isInLiveMode } from '../../utils/viewPort';
import { isMinimalStaticViewport } from '../../utils/predicates';
import { parseDuration } from '../../utils/time';
import { webGLRenderer } from '../sc-webgl-context/webglContext';
import { DATE_RANGE_EMIT_EVENT_MS } from '../common/constants';
export class ScTable {
    constructor() {
        this.messageOverrides = {};
        /** Active Viewport */
        this.start = viewportStartDate(this.viewport);
        this.end = viewportEndDate(this.viewport);
        this.duration = !isMinimalStaticViewport(this.viewport)
            ? parseDuration(this.viewport.duration)
            : undefined;
        this.onUpdate = ({ start, end, duration }) => {
            const hasViewPortChanged = viewportStartDate(this.viewport).getTime() !== start.getTime() ||
                viewportEndDate(this.viewport).getTime() !== end.getTime();
            const inLiveMode = isInLiveMode(this.viewport);
            if (hasViewPortChanged && !inLiveMode) {
                this.onDateRangeChange([start, end, this.viewport.group]);
            }
            // Update active viewport
            this.start = start;
            this.end = end;
            this.duration = duration;
        };
        this.onDateRangeChange = throttle(([start, end, from]) => {
            this.dateRangeChange.emit([start, end, from]);
        }, DATE_RANGE_EMIT_EVENT_MS, {
            leading: true,
            trailing: true,
        });
        this.getThresholds = () => this.annotations && this.annotations.y ? this.annotations.y.filter(isThreshold) : [];
    }
    onViewPortChange(newViewPort) {
        this.onUpdate(Object.assign(Object.assign({}, newViewPort), { duration: !isMinimalStaticViewport(newViewPort) ? parseDuration(newViewPort.duration) : undefined, start: viewportStartDate(this.viewport), end: viewportEndDate(this.viewport) }));
    }
    componentDidLoad() {
        webGLRenderer.addChartScene({
            manager: {
                id: this.widgetId,
                viewportGroup: this.viewport.group,
                updateViewPort: this.onUpdate,
            },
            duration: this.duration,
        });
    }
    disconnectedCallback() {
        // necessary to make sure that the allocated memory is released, and nothing is incorrectly rendered.
        webGLRenderer.removeChartScene(this.widgetId);
    }
    render() {
        const rows = constructTableData({
            tableColumns: this.tableColumns,
            dataStreams: this.dataStreams,
            thresholds: this.getThresholds(),
            date: this.end,
        });
        const isEnabled = this.duration != null;
        return (h("sc-table-base", { columns: this.tableColumns, rows: rows, isEnabled: isEnabled, messageOverrides: this.messageOverrides }));
    }
    static get is() { return "sc-table"; }
    static get properties() { return {
        "viewport": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MinimalViewPortConfig",
                "resolved": "MinimalLiveViewport | MinimalStaticViewport",
                "references": {
                    "MinimalViewPortConfig": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "widgetId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "widget-id",
            "reflect": false
        },
        "dataStreams": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream[]",
                "resolved": "DataStream<Primitive>[]",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "annotations": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Annotations",
                "resolved": "Annotations",
                "references": {
                    "Annotations": {
                        "location": "import",
                        "path": "../charts/common/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "trends": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Trend[]",
                "resolved": "LinearRegression[]",
                "references": {
                    "Trend": {
                        "location": "import",
                        "path": "../charts/common/trends/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "messageOverrides": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MessageOverrides",
                "resolved": "{ liveTimeFrameValueLabel?: string | undefined; historicalTimeFrameValueLabel?: string | undefined; noDataStreamsPresentHeader?: string | undefined; noDataStreamsPresentSubHeader?: string | undefined; noDataPresentHeader?: string | undefined; noDataPresentSubHeader?: string | undefined; liveModeOnly?: string | undefined; unsupportedDataTypeHeader?: string | undefined; unsupportedDataTypeSubHeader?: string | undefined; supportedTypes?: string | undefined; }",
                "references": {
                    "MessageOverrides": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "{}"
        },
        "tableColumns": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TableColumn[]",
                "resolved": "TableColumn[]",
                "references": {
                    "TableColumn": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Table column values"
            }
        }
    }; }
    static get states() { return {
        "start": {},
        "end": {},
        "duration": {}
    }; }
    static get events() { return [{
            "method": "dateRangeChange",
            "name": "dateRangeChange",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "On view port date range change, this component emits a `dateRangeChange` event.\nThis allows other data visualization components to sync to the same date range."
            },
            "complexType": {
                "original": "[Date, Date, string | undefined]",
                "resolved": "[Date, Date, string | undefined]",
                "references": {
                    "Date": {
                        "location": "global"
                    }
                }
            }
        }]; }
    static get watchers() { return [{
            "propName": "viewport",
            "methodName": "onViewPortChange"
        }]; }
}
