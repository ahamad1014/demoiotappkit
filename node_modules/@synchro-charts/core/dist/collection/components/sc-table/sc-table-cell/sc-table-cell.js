import { Component, h, Prop } from '@stencil/core';
import { Value } from '../../value/Value';
import { StatusIcon } from '../../charts/common/constants';
import { getDataPoints } from '../../../utils/getDataPoints';
export class ScTableCell {
    constructor() {
        /**
         * Return the most recent value from the data stream present.
         *
         * If no such value exists, returns `undefined`.
         */
        this.value = () => {
            const { dataStream = undefined } = this.cell || {};
            const points = dataStream ? getDataPoints(dataStream, dataStream.resolution) : [];
            if (points.length === 0) {
                return undefined;
            }
            // data is sorted chronological, from old to more recent - making this the latest value.
            return points[points.length - 1].y;
        };
    }
    render() {
        const { dataStream = undefined, color = undefined, icon = undefined } = this.cell || {};
        const error = dataStream && dataStream.error;
        const isLoading = dataStream && dataStream.isLoading;
        if (error != null) {
            /** Error */
            // If there is an error associated with the data stream, we cannot necessarily trust what
            // the data stream is telling us - i.e. it may be stale. So even if we could display some
            // existing data, error UX takes precedence.
            return (h("div", { class: "error" },
                h("sc-chart-icon", { name: StatusIcon.ERROR }),
                error));
        }
        if (isLoading) {
            /** Loading */
            // Loading is render blocking, so even if we have a value we could display, we display the spinner
            return (h("div", { class: "loading-wrapper" },
                h("sc-loading-spinner", null)));
        }
        /** Display cell value */
        return (this.cell &&
            this.cell.dataStream && (h("span", { style: { color: color || 'unset', display: 'flex' } },
            icon && h("sc-chart-icon", { name: icon }),
            h(Value, { value: this.value() }))));
    }
    static get is() { return "sc-table-cell"; }
    static get properties() { return {
        "cell": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Cell | undefined",
                "resolved": "Cell | undefined",
                "references": {
                    "Cell": {
                        "location": "import",
                        "path": "../constructTableData"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
}
