import { h, Element, Component, Prop } from '@stencil/core';
import { webGLRenderer } from './webglContext';
export class ScWebglContext {
    componentDidLoad() {
        const canvas = this.el.querySelector('canvas');
        webGLRenderer.initRendering(canvas, this.onContextInitialization, this.viewFrame);
    }
    render() {
        const viewportViewFrame = this.viewFrame === undefined || this.viewFrame instanceof Window;
        const classes = `webgl-context-canvas ${viewportViewFrame ? 'webgl-context-canvas-viewport' : ''}`;
        return h("canvas", { class: classes });
    }
    static get is() { return "sc-webgl-context"; }
    static get originalStyleUrls() { return {
        "$": ["sc-webgl-context.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-webgl-context.css"]
    }; }
    static get properties() { return {
        "onContextInitialization": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(context: WebGLRenderingContext) => void",
                "resolved": "(context: WebGLRenderingContext) => void",
                "references": {
                    "WebGLRenderingContext": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "viewFrame": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "HTMLElement | Window | undefined",
                "resolved": "HTMLElement | Window | undefined",
                "references": {
                    "HTMLElement": {
                        "location": "global"
                    },
                    "Window": {
                        "location": "global"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
    static get elementRef() { return "el"; }
}
