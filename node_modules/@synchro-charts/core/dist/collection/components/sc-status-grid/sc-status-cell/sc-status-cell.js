import { Component, h, Prop } from '@stencil/core';
import { DEFAULT_MESSAGE_OVERRIDES } from '../../../utils/dataTypes';
import { highContrastColor } from './highContrastColor';
import { Value } from '../../value/Value';
// TODO: Get exact color used at https://aws-uxdr.invisionapp.com/share/THVZU5CZY5U?redirHash=#/screens/405175804
const DEFAULT_COLOR = '#f1f1f1';
const ICON_SIZE_PX = 14;
export class ScStatusCell {
    constructor() {
        this.isEditing = false;
        /**
         * Update Name
         *
         * Given a change in the 'title' of the widget, fire off the correct data stream name change.
         */
        this.updateName = (name) => {
            if (this.propertyStream) {
                this.onChangeLabel({
                    streamId: this.propertyStream.id,
                    name,
                });
            }
            else if (this.alarmStream) {
                this.onChangeLabel({
                    streamId: this.alarmStream.id,
                    name,
                });
            }
        };
    }
    render() {
        const { icon, valueColor } = this;
        const { showName, showValue, showUnit } = this.labelsConfig;
        const backgroundColor = this.isEnabled && valueColor ? valueColor : DEFAULT_COLOR;
        /** Display Settings. We want to dynamically construct the layout dependent on what information is shown */
        const emphasizeValue = !showValue;
        const emphasizeNameAndUnit = showValue && !showName && !showUnit;
        /** If anything is emphasized, then something is emphasized */
        const somethingIsEmphasized = emphasizeValue || emphasizeNameAndUnit;
        const stream = this.alarmStream || this.propertyStream;
        const point = this.alarmStream ? this.alarmPoint : this.propertyPoint;
        const foregroundColor = highContrastColor(backgroundColor);
        return (h("div", { class: "status-cell tooltip-container", style: {
                backgroundColor,
                color: foregroundColor,
                justifyContent: somethingIsEmphasized ? 'center' : 'unset',
            } },
            showName && (h("sc-data-stream-name", { displayTooltip: false, class: { name: true, large: emphasizeValue, center: emphasizeValue }, style: { color: foregroundColor }, label: stream ? stream.name : '', detailedLabel: (stream && stream.detailedName) || '', onNameChange: this.updateName, isEditing: this.isEditing })),
            this.breachedThreshold && this.breachedThreshold.description != null && (h("div", { style: { color: foregroundColor }, class: { description: true, large: emphasizeValue, center: emphasizeValue } }, this.breachedThreshold.description)),
            !somethingIsEmphasized && h("div", { class: "divider" }),
            showValue && stream && (h("div", { class: { center: emphasizeNameAndUnit } },
                this.isEnabled && this.propertyStream && this.alarmStream && (h("div", { class: "secondary" },
                    h("span", { style: { color: foregroundColor } },
                        this.messageOverrides.liveTimeFrameValueLabel || DEFAULT_MESSAGE_OVERRIDES.liveTimeFrameValueLabel,
                        ":",
                        ' ',
                        h(Value, { value: this.propertyPoint ? this.propertyPoint.y : undefined, unit: this.propertyStream.unit })))),
                h("div", { class: { value: true, large: emphasizeNameAndUnit }, style: { color: foregroundColor } },
                    this.isEnabled &&
                        icon && [
                        h("sc-chart-icon", { name: icon, size: ICON_SIZE_PX, color: highContrastColor(backgroundColor) }),
                        h("div", { class: "spacer" }),
                    ],
                    h(Value, { unit: stream.unit, value: point ? point.y : undefined, isEnabled: this.isEnabled }))))));
    }
    static get is() { return "sc-status-cell"; }
    static get originalStyleUrls() { return {
        "$": ["sc-status-cell.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-status-cell.css"]
    }; }
    static get properties() { return {
        "messageOverrides": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MessageOverrides",
                "resolved": "{ liveTimeFrameValueLabel?: string | undefined; historicalTimeFrameValueLabel?: string | undefined; noDataStreamsPresentHeader?: string | undefined; noDataStreamsPresentSubHeader?: string | undefined; noDataPresentHeader?: string | undefined; noDataPresentSubHeader?: string | undefined; liveModeOnly?: string | undefined; unsupportedDataTypeHeader?: string | undefined; unsupportedDataTypeSubHeader?: string | undefined; supportedTypes?: string | undefined; }",
                "references": {
                    "MessageOverrides": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "breachedThreshold": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Threshold",
                "resolved": "Threshold<Primitive> | undefined",
                "references": {
                    "Threshold": {
                        "location": "import",
                        "path": "../../charts/common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "alarmStream": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream",
                "resolved": "DataStream<Primitive> | undefined",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "alarmPoint": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataPoint",
                "resolved": "undefined | { x: number; y: Primitive; }",
                "references": {
                    "DataPoint": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "propertyStream": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream",
                "resolved": "DataStream<Primitive> | undefined",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "propertyPoint": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataPoint",
                "resolved": "undefined | { x: number; y: Primitive; }",
                "references": {
                    "DataPoint": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "isEnabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-enabled",
            "reflect": false
        },
        "valueColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value-color",
            "reflect": false
        },
        "icon": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "StatusIcon",
                "resolved": "StatusIcon.ACKNOWLEDGED | StatusIcon.ACTIVE | StatusIcon.DISABLED | StatusIcon.ERROR | StatusIcon.LATCHED | StatusIcon.NORMAL | StatusIcon.SNOOZED | undefined",
                "references": {
                    "StatusIcon": {
                        "location": "import",
                        "path": "../../charts/common/constants"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "icon",
            "reflect": false
        },
        "labelsConfig": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Required<LabelsConfig>",
                "resolved": "{ showUnit: boolean; showName: boolean; showValue: boolean; }",
                "references": {
                    "Required": {
                        "location": "global"
                    },
                    "LabelsConfig": {
                        "location": "import",
                        "path": "../../common/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "isEditing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-editing",
            "reflect": false,
            "defaultValue": "false"
        },
        "onChangeLabel": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "({ streamId, name }: { streamId: string; name: string }) => void",
                "resolved": "({ streamId, name }: { streamId: string; name: string; }) => void",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
}
