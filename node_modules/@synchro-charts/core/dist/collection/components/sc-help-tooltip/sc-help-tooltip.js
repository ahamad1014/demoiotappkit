import { Component, Element, h, Prop } from '@stencil/core';
import tippy from 'tippy.js';
import { TIPPY_SETTINGS } from '../common/toolTipSettings';
import { QuestionMarkIcon } from './QuestionMarkIcon';
export class ScHelpTooltip {
    constructor() {
        this.displayToolTip = () => {
            const container = this.el.querySelector('.help-icon');
            const tooltip = this.el.querySelector('[role="tooltip"]');
            if (tooltip != null && container != null) {
                tooltip.style.display = 'block';
                this.tooltip = tippy(container, Object.assign(Object.assign({}, TIPPY_SETTINGS), { content: tooltip }));
            }
        };
    }
    disconnectedCallback() {
        if (this.tooltip) {
            this.tooltip.destroy();
        }
    }
    render() {
        return (h("div", { class: "help-icon", tabIndex: -1, onMouseOver: this.displayToolTip, onFocus: this.displayToolTip },
            h(QuestionMarkIcon, null),
            h("div", { role: "tooltip", class: "awsui-util-container awsui", style: { display: 'none' } },
                h("div", { class: "awsui-util-spacing-v-s" },
                    h("p", null, this.message)))));
    }
    static get is() { return "sc-help-tooltip"; }
    static get properties() { return {
        "message": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "message",
            "reflect": false
        }
    }; }
    static get elementRef() { return "el"; }
}
