import { Component, h, Prop } from '@stencil/core';
import { validate } from '../common/validator/validate';
const renderCell = props => h("sc-kpi-base", Object.assign({}, props));
export class ScKpi {
    constructor() {
        this.isEditing = false;
        this.messageOverrides = {};
    }
    componentWillRender() {
        validate(this);
    }
    render() {
        const { viewport, widgetId, dataStreams, annotations, isEditing, messageOverrides } = this;
        return (h("sc-widget-grid", { viewport: viewport, widgetId: widgetId, dataStreams: dataStreams, annotations: annotations, isEditing: isEditing, messageOverrides: messageOverrides, renderCell: renderCell }));
    }
    static get is() { return "sc-kpi"; }
    static get originalStyleUrls() { return {
        "$": ["sc-kpi.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-kpi.css"]
    }; }
    static get properties() { return {
        "viewport": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MinimalViewPortConfig",
                "resolved": "MinimalLiveViewport | MinimalStaticViewport",
                "references": {
                    "MinimalViewPortConfig": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "widgetId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "widget-id",
            "reflect": false
        },
        "dataStreams": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream[]",
                "resolved": "DataStream<Primitive>[]",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "annotations": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Annotations",
                "resolved": "Annotations",
                "references": {
                    "Annotations": {
                        "location": "import",
                        "path": "../charts/common/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "isEditing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-editing",
            "reflect": false,
            "defaultValue": "false"
        },
        "messageOverrides": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MessageOverrides",
                "resolved": "{ liveTimeFrameValueLabel?: string | undefined; historicalTimeFrameValueLabel?: string | undefined; noDataStreamsPresentHeader?: string | undefined; noDataStreamsPresentSubHeader?: string | undefined; noDataPresentHeader?: string | undefined; noDataPresentSubHeader?: string | undefined; liveModeOnly?: string | undefined; unsupportedDataTypeHeader?: string | undefined; unsupportedDataTypeSubHeader?: string | undefined; supportedTypes?: string | undefined; }",
                "references": {
                    "MessageOverrides": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "{}"
        }
    }; }
}
