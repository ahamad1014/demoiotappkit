import { h } from '@stencil/core';
import { Arrow } from './Arrow';
const getStreamDirection = (curr, prev) => {
    if (curr == null || prev == null) {
        return "None" /* None */;
    }
    if (curr === prev) {
        return "Flat" /* Flat */;
    }
    return curr > prev ? "Up" /* Up */ : "Down" /* Down */;
};
const computePercentage = (prevValue, currValue) => {
    if (currValue === prevValue) {
        return '0%';
    }
    if (prevValue === 0) {
        // Do not percentage if 'infinite' change
        return undefined;
    }
    const decimal = currValue / prevValue;
    const percentage = ((decimal - 1) * 100).toFixed(1);
    const absoluteValue = parseFloat(percentage) > 0 ? percentage : parseFloat(percentage) * -1;
    return `${absoluteValue}%`;
};
export const Trend = ({ previousPoint: { y: prevY }, latestPoint: { y: latestY }, miniVersion, }) => {
    const direction = getStreamDirection(latestY, prevY);
    const classes = {
        trend: true,
        large: !miniVersion,
        down: direction === "Down" /* Down */,
        flat: direction === "Flat" /* Flat */,
        up: direction === "Up" /* Up */,
    };
    return (h("div", { class: classes },
        h("div", { class: "data" },
            h("div", { class: "direction" },
                h(Arrow, null)),
            h("div", { "data-testid": "previous-value", class: "value" }, computePercentage(prevY, latestY))),
        !miniVersion && h("div", { class: "trend-description" }, "from previous value")));
};
