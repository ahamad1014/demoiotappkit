import { Component, h, Prop } from '@stencil/core';
import { Trend } from './Trend';
import { Value } from '../../value/Value';
import { DataType } from '../../../utils/dataConstants';
/** Font Colors */
// should be $color-text-form-default https://polaris.a2z.com/fundamentals/foundation/design_tokens/
const DEFAULT_FONT_COLOR = '#16191f';
// should be $color-background-control-disabled https://polaris.a2z.com/fundamentals/foundation/design_tokens/
const DISABLED_FONT_COLOR = '#d5dbdb';
const FONT_SIZE = 44;
const MINI_FONT_SIZE = 44;
const ICON_SHRINK_FACTOR = 0.7;
export class ScKpiBase {
    constructor() {
        this.isEditing = false;
        this.isEnabled = true;
        this.isLoading = false;
        this.isRefreshing = false;
        this.getValues = () => {
            if (!this.trendStream || !this.trendStream.data.length) {
                return {
                    latestPoint: undefined,
                    previousPoint: undefined,
                };
            }
            const latestPoint = this.trendStream.data[this.trendStream.data.length - 1];
            const previousPoint = this.trendStream.data[this.trendStream.data.length - 2];
            return {
                latestPoint,
                previousPoint,
            };
        };
        /**
         * Update Name
         *
         * Given a change in the 'title' of the widget, fire off the correct data stream name change.
         */
        this.updateName = (name) => {
            if (this.propertyStream) {
                this.onChangeLabel({
                    streamId: this.propertyStream.id,
                    name,
                });
            }
            else if (this.alarmStream) {
                this.onChangeLabel({
                    streamId: this.alarmStream.id,
                    name,
                });
            }
        };
        this.fontColor = (latestPoint) => {
            if (!this.isEnabled) {
                return DISABLED_FONT_COLOR;
            }
            if (latestPoint == null) {
                return DEFAULT_FONT_COLOR;
            }
            return this.valueColor || DEFAULT_FONT_COLOR;
        };
        this.fontSize = () => (this.miniVersion ? MINI_FONT_SIZE : FONT_SIZE);
        this.iconSize = () => this.fontSize() * ICON_SHRINK_FACTOR;
    }
    render() {
        const { latestPoint, previousPoint } = this.getValues();
        const shouldShowTrends = this.isEnabled &&
            previousPoint &&
            latestPoint &&
            this.trendStream &&
            this.trendStream.dataType !== DataType.STRING;
        const stream = this.propertyStream || this.alarmStream;
        const point = this.propertyStream ? this.propertyPoint : this.alarmPoint;
        const icon = this.breachedThreshold ? this.breachedThreshold.icon : undefined;
        if (stream == null) {
            return undefined;
        }
        const error = this.propertyStream && this.propertyStream.error;
        return (h("div", { class: { wrapper: true, large: !this.miniVersion } },
            h("div", null),
            h("sc-data-stream-name", { displayTooltip: false, label: stream.name, detailedLabel: stream.detailedName, pointType: "data" /* DATA */, date: point && new Date(point.x), onNameChange: this.updateName, isEditing: this.isEditing }),
            h("div", { class: "icon-container" }, this.isEnabled && icon && h("sc-chart-icon", { name: icon, size: this.iconSize(), color: this.valueColor })),
            h("div", { class: { main: true, large: !this.miniVersion } },
                error != null && h("sc-error-badge", { "data-testid": "warning" }, error),
                this.isLoading ? (h("sc-loading-spinner", { "data-testid": "loading", style: { height: `${this.fontSize()}px`, width: `${this.fontSize()}px` } })) : (h("div", { "data-testid": "current-value", class: { 'value-wrapper': true, large: !this.miniVersion }, style: { color: this.fontColor(point) } },
                    h(Value, { isEnabled: this.isEnabled, value: point ? point.y : undefined, unit: stream.unit }))),
                shouldShowTrends && this.isEnabled && (h(Trend, { previousPoint: previousPoint, latestPoint: latestPoint, miniVersion: this.miniVersion })),
                !shouldShowTrends && this.isEnabled && point && (h("div", null,
                    "at",
                    ' ',
                    new Date(point.x).toLocaleString('en-US', {
                        hour: 'numeric',
                        minute: 'numeric',
                    }))))));
    }
    static get is() { return "sc-kpi-base"; }
    static get originalStyleUrls() { return {
        "$": ["sc-kpi-base.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-kpi-base.css"]
    }; }
    static get properties() { return {
        "breachedThreshold": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Threshold",
                "resolved": "Threshold<Primitive> | undefined",
                "references": {
                    "Threshold": {
                        "location": "import",
                        "path": "../../charts/common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "alarmStream": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream",
                "resolved": "DataStream<Primitive> | undefined",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "alarmPoint": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataPoint<Primitive>",
                "resolved": "undefined | { x: number; y: Primitive; }",
                "references": {
                    "DataPoint": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    },
                    "Primitive": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "propertyStream": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream",
                "resolved": "DataStream<Primitive> | undefined",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "propertyPoint": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataPoint<Primitive>",
                "resolved": "undefined | { x: number; y: Primitive; }",
                "references": {
                    "DataPoint": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    },
                    "Primitive": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "messageOverrides": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MessageOverrides",
                "resolved": "{ liveTimeFrameValueLabel?: string | undefined; historicalTimeFrameValueLabel?: string | undefined; noDataStreamsPresentHeader?: string | undefined; noDataStreamsPresentSubHeader?: string | undefined; noDataPresentHeader?: string | undefined; noDataPresentSubHeader?: string | undefined; liveModeOnly?: string | undefined; unsupportedDataTypeHeader?: string | undefined; unsupportedDataTypeSubHeader?: string | undefined; supportedTypes?: string | undefined; }",
                "references": {
                    "MessageOverrides": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "viewport": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MinimalViewPortConfig",
                "resolved": "MinimalLiveViewport | MinimalStaticViewport",
                "references": {
                    "MinimalViewPortConfig": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "trendStream": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream | undefined",
                "resolved": "DataStream<Primitive> | undefined",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "isEditing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-editing",
            "reflect": false,
            "defaultValue": "false"
        },
        "isEnabled": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-enabled",
            "reflect": false,
            "defaultValue": "true"
        },
        "miniVersion": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "mini-version",
            "reflect": false
        },
        "onChangeLabel": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "({ streamId, name }: { streamId: string; name: string }) => void",
                "resolved": "({ streamId, name }: { streamId: string; name: string; }) => void",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "isLoading": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-loading",
            "reflect": false,
            "defaultValue": "false"
        },
        "isRefreshing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-refreshing",
            "reflect": false,
            "defaultValue": "false"
        },
        "valueColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string | undefined",
                "references": {}
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "value-color",
            "reflect": false
        }
    }; }
}
