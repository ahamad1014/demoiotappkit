import { renderXAnnotations, removeXAnnotations } from './XAnnotations/XAnnotations';
import { renderYAnnotations, removeYAnnotations, renderYAnnotationsEditable } from './YAnnotations/YAnnotations';
const withinViewport = (viewport) => {
    return ({ value }) => {
        if (typeof value === 'number') {
            return viewport.yMin <= value && viewport.yMax >= value;
        }
        return viewport.start <= value && viewport.end >= value;
    };
};
let dragHandler; // need to hold onto the dragHandle selector to dispose of it properly to prevent memory leak
export const renderAnnotations = ({ container, resolution, annotations, viewport, size, onUpdate, activeViewPort, emitUpdatedWidgetConfiguration, draggable, startStopDragging, inDragState, }) => {
    if (typeof annotations === 'object' && typeof annotations.show === 'boolean' && !annotations.show) {
        removeXAnnotations({ container });
        removeYAnnotations({ container });
        return;
    }
    // get annotations which have a value that lays within the viewport.
    const xAnnotations = annotations.x == null ? [] : annotations.x.filter(withinViewport(viewport));
    const yAnnotations = annotations.y == null ? [] : annotations.y.filter(withinViewport(viewport));
    /**
     * X Annotations
     */
    renderXAnnotations({
        container,
        xAnnotations,
        viewport,
        resolution,
        size,
    });
    /**
     * Y Annotations
     */
    renderYAnnotations({
        container,
        yAnnotations,
        viewport,
        resolution,
        size,
    });
    if (!inDragState()) {
        // do not re-render editable annotations in drag state
        /**
         * Y Annotations Editable (Draggable)
         */
        dragHandler = renderYAnnotationsEditable({
            container,
            yAnnotations,
            viewport,
            resolution,
            size,
        });
        // prevents more event listeners from being attached when we drag
        draggable({
            container,
            size,
            onUpdate,
            activeViewPort,
            emitUpdatedWidgetConfiguration,
            startStopDragging,
            resolution,
            dragHandle: dragHandler,
        });
    }
};
