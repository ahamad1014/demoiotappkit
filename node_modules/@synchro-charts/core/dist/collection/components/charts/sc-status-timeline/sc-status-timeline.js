import { Component, h, Prop, State, Watch } from '@stencil/core';
import { chartScene, updateChartScene } from './chartScene';
import { DEFAULT_CHART_CONFIG } from '../sc-webgl-base-chart/chartDefaults';
import { HEIGHT, STATUS_MARGIN_TOP_PX } from './constants';
import { isThreshold } from '../common/annotations/utils';
import { DATA_ALIGNMENT } from '../common/constants';
import { isMinimalStaticViewport } from '../../../utils/predicates';
import { validate } from '../../common/validator/validate';
import { DataType } from '../../../constants';
// The initial size of buffers. The larger this is, the more memory allocated up front per chart.
// The lower this number is, more likely that charts will have to re-initialize there buffers which is
// a slow operation (CPU bound).
const DEFAULT_MIN_BUFFER_SIZE = 1000;
const DEFAULT_BUFFER_FACTOR = 4;
const DEFAULT_MARGINS = {
    marginLeft: 10,
    marginTop: 0,
    marginBottom: DEFAULT_CHART_CONFIG.size.marginBottom,
    marginRight: 5,
};
// Fits two rows of legend rows
const THRESHOLD_LEGEND_HEIGHT_PX = 50;
const TOP_TOOLTIP_MARGIN_PX = 4;
const tooltip = (alarms) => (props) => {
    const { size } = props;
    return (h("sc-tooltip", Object.assign({}, props, { dataAlignment: DATA_ALIGNMENT.LEFT, top: -size.height + STATUS_MARGIN_TOP_PX + TOP_TOOLTIP_MARGIN_PX, sortPoints: false, maxDurationFromDate: alarms ? alarms.expires : undefined, showDataStreamColor: false, showBlankTooltipRows: true, visualizesAlarms: true, supportString: true })));
};
const getComponentViewport = (viewport) => (Object.assign(Object.assign({}, viewport), { yMin: 0, yMax: HEIGHT }));
export class ScStatusTimeline {
    constructor() {
        this.gestures = true;
        /** Status */
        this.isEditing = false;
        /** Memory Management */
        this.bufferFactor = DEFAULT_BUFFER_FACTOR;
        this.minBufferSize = DEFAULT_MIN_BUFFER_SIZE;
        this.thresholds = () => {
            if (this.annotations == null || this.annotations.y == null) {
                return [];
            }
            return this.annotations.y.filter(isThreshold);
        };
    }
    componentWillRender() {
        validate(this);
    }
    componentWillLoad() {
        this.componentViewport = getComponentViewport(this.viewport);
    }
    onViewportChange() {
        this.componentViewport = getComponentViewport(this.viewport);
    }
    render() {
        return (h("sc-size-provider", { size: this.size, renderFunc: (size) => {
                const totalSize = Object.assign(Object.assign(Object.assign(Object.assign({}, DEFAULT_CHART_CONFIG.size), DEFAULT_MARGINS), this.size), size);
                const chartHeight = totalSize.height - THRESHOLD_LEGEND_HEIGHT_PX;
                const chartSize = Object.assign(Object.assign({}, totalSize), { height: chartHeight });
                return [
                    h("div", { class: "status-timeline", style: { height: `${chartSize.height}px` } },
                        h("sc-webgl-base-chart", { axis: Object.assign(Object.assign({}, this.axis), { showY: false }), gestures: this.gestures, configId: this.widgetId, annotations: Object.assign(Object.assign({}, this.annotations), { show: false, thresholdOptions: {
                                    showColor: true,
                                } }), supportedDataTypes: [DataType.NUMBER, DataType.STRING, DataType.BOOLEAN], updateChartScene: updateChartScene, createChartScene: chartScene, size: chartSize, dataStreams: this.dataStreams, alarms: this.alarms, viewport: this.componentViewport, minBufferSize: this.minBufferSize, bufferFactor: this.bufferFactor, isEditing: this.isEditing, renderTooltip: tooltip(this.alarms), displaysError: false, supportString: true, visualizesAlarms: true, displaysNoDataPresentMsg: false, messageOverrides: this.messageOverrides }),
                        h("sc-status-timeline-overlay", { isEditing: this.isEditing, thresholds: this.thresholds(), date: isMinimalStaticViewport(this.viewport) ? new Date(this.viewport.end) : new Date(), dataStreams: this.dataStreams, size: chartSize, widgetId: this.widgetId })),
                    h("div", { class: "threshold-legend-container", style: { maxHeight: `${THRESHOLD_LEGEND_HEIGHT_PX}px` } },
                        h("sc-threshold-legend", { thresholds: this.thresholds() })),
                ];
            } }));
    }
    static get is() { return "sc-status-timeline"; }
    static get originalStyleUrls() { return {
        "$": ["./sc-status-timeline.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-status-timeline.css"]
    }; }
    static get properties() { return {
        "viewport": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MinimalViewPortConfig",
                "resolved": "MinimalLiveViewport | MinimalStaticViewport",
                "references": {
                    "MinimalViewPortConfig": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Chart API"
            }
        },
        "gestures": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "gestures",
            "reflect": false,
            "defaultValue": "true"
        },
        "movement": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MovementConfig",
                "resolved": "MovementConfig | undefined",
                "references": {
                    "MovementConfig": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "scale": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ScaleConfig",
                "resolved": "ScaleConfig | undefined",
                "references": {
                    "ScaleConfig": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "layout": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "LayoutConfig",
                "resolved": "LayoutConfig | undefined",
                "references": {
                    "LayoutConfig": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "size": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MinimalSizeConfig",
                "resolved": "MinimalSizeConfig | undefined",
                "references": {
                    "MinimalSizeConfig": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "widgetId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "widget-id",
            "reflect": false
        },
        "dataStreams": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream[]",
                "resolved": "DataStream<Primitive>[]",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "annotations": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Annotations",
                "resolved": "Annotations | undefined",
                "references": {
                    "Annotations": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "axis": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Axis.Options",
                "resolved": "Options | undefined",
                "references": {
                    "Axis": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "messageOverrides": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "MessageOverrides",
                "resolved": "undefined | { liveTimeFrameValueLabel?: string | undefined; historicalTimeFrameValueLabel?: string | undefined; noDataStreamsPresentHeader?: string | undefined; noDataStreamsPresentSubHeader?: string | undefined; noDataPresentHeader?: string | undefined; noDataPresentSubHeader?: string | undefined; liveModeOnly?: string | undefined; unsupportedDataTypeHeader?: string | undefined; unsupportedDataTypeSubHeader?: string | undefined; supportedTypes?: string | undefined; }",
                "references": {
                    "MessageOverrides": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "alarms": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "AlarmsConfig",
                "resolved": "undefined | { expires?: number | undefined; }",
                "references": {
                    "AlarmsConfig": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": true,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "isEditing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Status"
            },
            "attribute": "is-editing",
            "reflect": false,
            "defaultValue": "false"
        },
        "bufferFactor": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Memory Management"
            },
            "attribute": "buffer-factor",
            "reflect": false,
            "defaultValue": "DEFAULT_BUFFER_FACTOR"
        },
        "minBufferSize": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "min-buffer-size",
            "reflect": false,
            "defaultValue": "DEFAULT_MIN_BUFFER_SIZE"
        }
    }; }
    static get states() { return {
        "componentViewport": {}
    }; }
    static get watchers() { return [{
            "propName": "viewport",
            "methodName": "onViewportChange"
        }]; }
}
