import { Component, Event, h, Prop, State } from '@stencil/core';
import { breachedThreshold } from '../../common/annotations/breachedThreshold';
import { closestPoint } from '../../sc-webgl-base-chart/activePoints';
import { updateName } from '../../../sc-data-stream-name/helper';
import { getDataPoints } from '../../../../utils/getDataPoints';
import { DATA_ALIGNMENT, StatusIcon } from '../../common/constants';
import { getDataStreamForEventing } from '../../common';
const SMUDGE_WIDTH_PX = 1; // We slice off a tiny bit of width to prevent some pixels showing under antialiasing
export class ScStatusTimelineOverlay {
    constructor() {
        /** Widget data stream names */
        this.names = [];
        /**
         * Emit the current widget configuration
         */
        this.emitUpdatedWidgetConfiguration = (dataStreams) => {
            const configUpdate = {
                movement: undefined,
                scale: undefined,
                layout: undefined,
                legend: undefined,
                annotations: undefined,
                axis: undefined,
                widgetId: this.widgetId,
                dataStreams: dataStreams ? getDataStreamForEventing(dataStreams) : this.dataStreams,
            };
            this.widgetUpdated.emit(configUpdate);
        };
        this.onChangeLabel = ({ streamId, name }) => {
            this.names = updateName(this.names, name, streamId);
            this.onWidgetUpdated();
        };
    }
    /**
     * On Widget Updated - Persist `DataStreamInfo`
     *
     * Emits an event which persists the current `NameValue[]` state into the
     * data stream info.
     */
    onWidgetUpdated() {
        // Construct the config update with the new names specified.
        const updatedDataStreams = this.dataStreams.map(info => {
            const nameValue = this.names.find(({ id: nameId }) => info.id === nameId);
            const name = nameValue != null ? nameValue.name : info.name;
            return Object.assign(Object.assign({}, info), { name });
        });
        this.emitUpdatedWidgetConfiguration(updatedDataStreams);
    }
    render() {
        const { width, height, marginLeft, marginRight, marginTop, marginBottom } = this.size;
        return (h("div", { class: "overlay-container", style: {
                width: `${width - marginRight - marginLeft - SMUDGE_WIDTH_PX}px`,
                height: `${height - marginTop - marginBottom}px`,
                left: `${marginLeft}px`,
                top: `${marginTop}px`,
            } }, this.dataStreams.map(dataStream => {
            const point = closestPoint(getDataPoints(dataStream, dataStream.resolution), this.date, DATA_ALIGNMENT.LEFT);
            const value = point ? point.y : undefined;
            const threshold = breachedThreshold({
                value,
                date: this.date,
                dataStreams: this.dataStreams,
                dataStream,
                thresholds: this.thresholds,
            });
            const { error } = dataStream;
            const displayedValue = error == null ? value : error;
            const displayedUnit = error == null ? dataStream.unit : undefined;
            const valueColor = error == null && threshold != null ? threshold.color : undefined;
            return (h("sc-status-timeline-overlay-row", { key: dataStream.id, label: dataStream.name, detailedLabel: dataStream.detailedName, value: displayedValue, unit: displayedUnit, isEditing: this.isEditing, valueColor: valueColor, icon: error == null ? threshold && threshold.icon : StatusIcon.ERROR, onNameChange: (name) => this.onChangeLabel({ streamId: dataStream.id, name }) }));
        })));
    }
    static get is() { return "sc-status-timeline-overlay"; }
    static get originalStyleUrls() { return {
        "$": ["sc-status-timeline-overlay.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-status-timeline-overlay.css"]
    }; }
    static get properties() { return {
        "size": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "SizeConfig",
                "resolved": "SizeConfig",
                "references": {
                    "SizeConfig": {
                        "location": "import",
                        "path": "../../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dataStreams": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream[]",
                "resolved": "DataStream<Primitive>[]",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "thresholds": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Threshold[]",
                "resolved": "Threshold<Primitive>[]",
                "references": {
                    "Threshold": {
                        "location": "import",
                        "path": "../../common/types"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "date": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Date",
                "resolved": "Date",
                "references": {
                    "Date": {
                        "location": "global"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "widgetId": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "widget-id",
            "reflect": false
        },
        "isEditing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-editing",
            "reflect": false
        }
    }; }
    static get states() { return {
        "names": {}
    }; }
    static get events() { return [{
            "method": "widgetUpdated",
            "name": "widgetUpdated",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": ""
            },
            "complexType": {
                "original": "WidgetConfigurationUpdate",
                "resolved": "Pick<ChartConfig, \"movement\" | \"scale\" | \"layout\" | \"legend\" | \"annotations\" | \"axis\" | \"widgetId\" | \"size\"> & { dataStreams: Pick<DataStream<Primitive>, \"id\" | \"name\" | \"detailedName\" | \"color\" | \"unit\" | \"meta\" | \"dataType\" | \"streamType\" | \"associatedStreams\" | \"isLoading\" | \"isRefreshing\" | \"error\" | \"resolution\">[]; widgetId: string; }",
                "references": {
                    "WidgetConfigurationUpdate": {
                        "location": "import",
                        "path": "../../common/types"
                    }
                }
            }
        }]; }
}
