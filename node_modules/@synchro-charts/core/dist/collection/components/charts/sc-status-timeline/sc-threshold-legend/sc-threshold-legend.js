import uniqBy from 'lodash.uniqby';
import { Component, h, Prop } from '@stencil/core';
import { COMPARISON_OPERATOR } from '../../common/constants';
const COMPARISON_SYMBOL = {
    [COMPARISON_OPERATOR.EQUAL]: '=',
    [COMPARISON_OPERATOR.LESS_THAN]: '<',
    [COMPARISON_OPERATOR.LESS_THAN_EQUAL]: '<=',
    [COMPARISON_OPERATOR.GREATER_THAN]: '>',
    [COMPARISON_OPERATOR.GREATER_THAN_EQUAL]: '>=',
};
const label = (threshold) => {
    if (threshold.comparisonOperator === COMPARISON_OPERATOR.EQUAL) {
        return String(threshold.value);
    }
    return `y ${COMPARISON_SYMBOL[threshold.comparisonOperator]} ${threshold.value}`;
};
// a key constructed to serialize all of the fields which a row depends on.
// If this key is not unique, duplicates may be rendered within the `threshold-legend`
const key = ({ value, comparisonOperator, color }) => `${value}-${comparisonOperator}-${color}`;
export class ScThresholdLegend {
    // We do not want to draw multiple 'legend rows' of identical color/label
    uniqueThresholds() {
        // NOTE: maintains order of thresholds
        return uniqBy(this.thresholds, key);
    }
    render() {
        return this.uniqueThresholds().map(threshold => (h("sc-threshold-legend-row", { key: key(threshold), color: threshold.color, label: label(threshold) })));
    }
    static get is() { return "sc-threshold-legend"; }
    static get originalStyleUrls() { return {
        "$": ["sc-threshold-legend.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-threshold-legend.css"]
    }; }
    static get properties() { return {
        "thresholds": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Threshold[]",
                "resolved": "Threshold<Primitive>[]",
                "references": {
                    "Threshold": {
                        "location": "import",
                        "path": "../../common/types"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        }
    }; }
}
