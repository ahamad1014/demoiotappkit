import { Component, h, Prop } from '@stencil/core';
import { activePoints } from '../sc-webgl-base-chart/activePoints';
import { getTrendValue } from '../common/trends/trendAnalysis';
import { getTrendLabel } from '../common/trends/trendConfig';
import { isSupportedDataType } from '../../../utils/predicates';
import { breachedThreshold } from '../common/annotations/breachedThreshold';
import { DATA_ALIGNMENT, LEGEND_POSITION } from '../common/constants';
import { StreamType } from '../../../utils/dataConstants';
const noop = () => { };
export class ScLegend {
    constructor() {
        this.isEditing = false;
        this.trendResults = [];
        this.visualizedDataStreams = () => {
            const streams = this.dataStreams.filter(isSupportedDataType(this.supportString));
            if (this.visualizesAlarms) {
                // Visualize all data streams with a valid data type
                return streams;
            }
            // Visualize only property-streams (non-alarms) with a valid data type
            return streams.filter(({ streamType }) => streamType !== StreamType.ALARM);
        };
        /**
         * Returns the given color of a breached threshold, if there is one.
         */
        this.breachedThresholdColor = (point, dataStream) => {
            const threshold = breachedThreshold({
                value: point && point.y,
                date: this.viewport.end,
                dataStreams: this.dataStreams,
                dataStream,
                thresholds: this.thresholds,
            });
            return threshold ? { color: threshold.color, icon: threshold.icon } : undefined;
        };
    }
    render() {
        const points = activePoints({
            viewport: this.viewport,
            dataStreams: this.dataStreams,
            selectedDate: this.viewport.end,
            allowMultipleDates: true,
            dataAlignment: DATA_ALIGNMENT.EITHER,
        });
        const lastDate = points.length === 0 || points[0].point == null ? this.viewport.end.getTime() : points[0].point.x;
        return (h("div", { class: "legend-container", style: { flexDirection: this.config.position === LEGEND_POSITION.RIGHT ? 'column' : 'unset' } }, this.visualizedDataStreams().map(dataStream => {
            const dataPoint = points.find(p => p.streamId === dataStream.id);
            const point = dataPoint ? dataPoint.point : undefined;
            const { color: valueColor = undefined, icon = undefined } = this.breachedThresholdColor(point, dataStream) || {};
            return [
                h("sc-legend-row", { streamId: dataStream.id, label: dataStream.name, detailedLabel: dataStream.detailedName, color: dataStream.color || 'black', valueColor: valueColor, point: point, pointType: dataPoint && "data" /* DATA */, unit: dataStream.unit, updateDataStreamName: this.updateDataStreamName, isEditing: this.isEditing, isLoading: this.isLoading, showDataStreamColor: this.showDataStreamColor, icon: icon }),
                ...this.trendResults.reduce((rows, trendResult) => {
                    if (trendResult.dataStreamId === dataStream.id) {
                        rows.push(h("sc-legend-row", { streamId: dataStream.id, label: getTrendLabel(dataStream.name, trendResult.type), detailedLabel: dataStream.detailedName && getTrendLabel(dataStream.detailedName, trendResult.type), color: trendResult.color || dataStream.color || 'black', valueColor: valueColor, point: {
                                x: lastDate,
                                y: getTrendValue(trendResult, lastDate),
                            }, pointType: "trend" /* TREND */, unit: dataStream.unit, updateDataStreamName: noop, isEditing: false, isLoading: this.isLoading, showDataStreamColor: this.showDataStreamColor }));
                    }
                    return rows;
                }, []),
            ];
        })));
    }
    static get is() { return "sc-legend"; }
    static get originalStyleUrls() { return {
        "$": ["./sc-legend.css"]
    }; }
    static get styleUrls() { return {
        "$": ["sc-legend.css"]
    }; }
    static get properties() { return {
        "config": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "LegendConfig",
                "resolved": "LegendConfig",
                "references": {
                    "LegendConfig": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "viewport": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "ViewPort",
                "resolved": "MinimalLiveViewport & { start: Date; end: Date; yMin: number; yMax: number; duration?: number | undefined; } | MinimalStaticViewport & { start: Date; end: Date; yMin: number; yMax: number; duration?: number | undefined; }",
                "references": {
                    "ViewPort": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "dataStreams": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStream[]",
                "resolved": "DataStream<Primitive>[]",
                "references": {
                    "DataStream": {
                        "location": "import",
                        "path": "../../../utils/dataTypes"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "updateDataStreamName": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "({ streamId, name }: { streamId: string; name: string }) => void",
                "resolved": "({ streamId, name }: { streamId: string; name: string; }) => void",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "visualizesAlarms": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "visualizes-alarms",
            "reflect": false
        },
        "isEditing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-editing",
            "reflect": false,
            "defaultValue": "false"
        },
        "isLoading": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "is-loading",
            "reflect": false
        },
        "thresholds": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "Threshold[]",
                "resolved": "Threshold<Primitive>[]",
                "references": {
                    "Threshold": {
                        "location": "import",
                        "path": "../common/types"
                    }
                }
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            }
        },
        "supportString": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "support-string",
            "reflect": false
        },
        "showDataStreamColor": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": true,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "show-data-stream-color",
            "reflect": false
        },
        "trendResults": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TrendResult[]",
                "resolved": "LinearRegressionResult[]",
                "references": {
                    "TrendResult": {
                        "location": "import",
                        "path": "../common/trends/types"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "[]"
        }
    }; }
}
