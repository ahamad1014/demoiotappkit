import { Component, h, Listen, Prop } from '@stencil/core';
import { SIZE, VIEWPORT as DEFAULT_VIEWPORT } from '../dynamicWidgetUtils/constants';
import { testCaseParameters } from '../dynamicWidgetUtils/testCaseParameters';
const DEFAULT_WIDTH = 700;
const DEFAULT_HEIGHT = 400;
const { 
/** Chart configurations */
alarms, messageOverrides, width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT, axis, componentTag, annotations, viewportStart, viewportEnd, duration, isEditing, dataStreams, gestures, legend, tableColumns, } = testCaseParameters();
const getSize = (value) => {
    if (typeof value === 'string') {
        return undefined;
    }
    return Object.assign(Object.assign({}, SIZE), { width,
        height });
};
const styleSize = (value) => {
    if (typeof value === 'string') {
        return value;
    }
    return `${value}px`;
};
export class WidgetTestRoute {
    constructor() {
        this.dataStreamInfos = [];
        this.component = componentTag;
    }
    onWidgetUpdated({ detail: configUpdate }) {
        if (configUpdate.dataStreamInfo) {
            this.dataStreamInfos = configUpdate.dataStreamInfo;
        }
    }
    render() {
        const viewport = Object.assign(Object.assign({}, DEFAULT_VIEWPORT), { start: viewportStart, end: viewportEnd, duration, group: 'some-viewport-group' });
        // live mode
        if (duration != null) {
            delete viewport.start;
            delete viewport.end;
        }
        return (h("div", { style: { width: styleSize(width), height: styleSize(height) } },
            h(this.component, { widgetId: "some-widget-id", dataStreams: dataStreams, isEditing: isEditing, alarms: alarms, viewport: viewport, legend: legend, size: getSize(width), axis: axis, tableColumns: tableColumns, annotations: annotations, gestures: gestures, messageOverrides: messageOverrides, 
                /** TODO: Port these over to the message overrides */
                invalidTagErrorHeader: "invalidComponentTag.header", invalidTagErrorSubheader: "invalidComponentTag.subheader", liveModeOnly: "invalidWidgetForHistoricalData.content" }),
            h("sc-webgl-context", null)));
    }
    static get is() { return "widget-test-route"; }
    static get properties() { return {
        "dataStreamInfos": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "DataStreamInfo[]",
                "resolved": "DataStreamInfo[]",
                "references": {
                    "DataStreamInfo": {
                        "location": "import",
                        "path": "../../utils/dataTypes"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "defaultValue": "[]"
        },
        "component": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": ""
            },
            "attribute": "component",
            "reflect": false,
            "defaultValue": "componentTag"
        }
    }; }
    static get listeners() { return [{
            "name": "widgetUpdated",
            "method": "onWidgetUpdated",
            "target": undefined,
            "capture": false,
            "passive": false
        }]; }
}
