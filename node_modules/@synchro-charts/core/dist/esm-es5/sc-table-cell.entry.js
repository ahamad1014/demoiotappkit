import { r as registerInstance, h } from './index-0c943849.js';
import { b as StatusIcon } from './constants-35570903.js';
import './terms-d11f73d5.js';
import './number-a7331d73.js';
import { g as getDataPoints } from './getDataPoints-6f8b4e89.js';
import { V as Value } from './Value-9ca575b7.js';
var ScTableCell = /** @class */ (function () {
    function ScTableCell(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        /**
         * Return the most recent value from the data stream present.
         *
         * If no such value exists, returns `undefined`.
         */
        this.value = function () {
            var _a = (_this.cell || {}).dataStream, dataStream = _a === void 0 ? undefined : _a;
            var points = dataStream ? getDataPoints(dataStream, dataStream.resolution) : [];
            if (points.length === 0) {
                return undefined;
            }
            // data is sorted chronological, from old to more recent - making this the latest value.
            return points[points.length - 1].y;
        };
    }
    ScTableCell.prototype.render = function () {
        var _a = this.cell || {}, _b = _a.dataStream, dataStream = _b === void 0 ? undefined : _b, _c = _a.color, color = _c === void 0 ? undefined : _c, _d = _a.icon, icon = _d === void 0 ? undefined : _d;
        var error = dataStream && dataStream.error;
        var isLoading = dataStream && dataStream.isLoading;
        if (error != null) {
            /** Error */
            // If there is an error associated with the data stream, we cannot necessarily trust what
            // the data stream is telling us - i.e. it may be stale. So even if we could display some
            // existing data, error UX takes precedence.
            return (h("div", { class: "error" }, h("sc-chart-icon", { name: StatusIcon.ERROR }), error));
        }
        if (isLoading) {
            /** Loading */
            // Loading is render blocking, so even if we have a value we could display, we display the spinner
            return (h("div", { class: "loading-wrapper" }, h("sc-loading-spinner", null)));
        }
        /** Display cell value */
        return (this.cell &&
            this.cell.dataStream && (h("span", { style: { color: color || 'unset', display: 'flex' } }, icon && h("sc-chart-icon", { name: icon }), h(Value, { value: this.value() }))));
    };
    return ScTableCell;
}());
export { ScTableCell as sc_table_cell };
