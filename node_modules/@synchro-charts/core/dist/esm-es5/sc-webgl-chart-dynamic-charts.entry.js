var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h } from './index-0c943849.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './_commonjsHelpers-1d681858.js';
import { v as v4_1 } from './v4-9366210a.js';
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2000, 0, 1);
// test data point dead center of the viewport
var TEST_DATA_POINT = {
    x: new Date((X_MIN.getTime() + X_MAX.getTime()) / 2).getTime(),
    y: (Y_MIN + Y_MAX) / 20,
};
var createData = function (point, numPoints) { return new Array(numPoints).fill(0).map(function (_, i) { return ({
    x: point.x,
    y: point.y + ((Y_MAX - Y_MIN) / 20) * i,
}); }); };
/**
 * Tests behavior with dynamically adding/removing a chart.
 */
var numPointCounter = 1;
var ScWebglChartStandard = /** @class */ (function () {
    function ScWebglChartStandard(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.chartKeys = [];
        this.width = 500;
        this.xOffset = 0;
        this.shiftLeft = function () {
            _this.xOffset -= 100;
        };
        this.shiftRight = function () {
            _this.xOffset += 100;
        };
        this.increaseWidth = function () {
            _this.width += 100;
        };
        this.decreaseWidth = function () {
            if (_this.width > 100) {
                _this.width -= 100;
            }
        };
        this.addChartAtFront = function () {
            var key = v4_1();
            _this.chartKeys = __spreadArrays([
                {
                    key: key,
                    data: [
                        {
                            id: key,
                            color: 'black',
                            name: 'test stream',
                            data: createData(TEST_DATA_POINT, numPointCounter),
                            resolution: 0,
                            dataType: DataType.NUMBER,
                        },
                    ],
                }
            ], _this.chartKeys);
            numPointCounter += 1;
        };
        this.addChartAtBack = function () {
            var key = v4_1();
            _this.chartKeys = __spreadArrays(_this.chartKeys, [
                {
                    key: key,
                    data: [
                        {
                            id: key,
                            color: 'black',
                            name: 'test stream',
                            data: createData(TEST_DATA_POINT, numPointCounter),
                            resolution: 0,
                            dataType: DataType.NUMBER,
                        },
                    ],
                },
            ]);
            numPointCounter += 1;
        };
        this.removeFrontChart = function () {
            if (_this.chartKeys.length > 0) {
                _this.chartKeys = _this.chartKeys.slice(1);
            }
        };
        this.removeBackChart = function () {
            if (_this.chartKeys.length > 0) {
                _this.chartKeys = _this.chartKeys.slice(0, -1);
            }
        };
    }
    ScWebglChartStandard.prototype.render = function () {
        var _this = this;
        return (h("div", { class: "synchro-chart-tests" }, h("button", { id: "shift-right", onClick: this.shiftRight }, "Shift Right"), h("button", { id: "shift-left", onClick: this.shiftLeft }, "Shift Left"), h("button", { id: "increase-width", onClick: this.increaseWidth }, "Increase Width"), h("button", { id: "decrease-width", onClick: this.decreaseWidth }, "Decrease Width"), h("button", { id: "add-chart-to-front", onClick: this.addChartAtFront }, "Add Chart To Front"), h("button", { id: "add-chart-to-back", onClick: this.addChartAtBack }, "Add Chart To Back"), h("button", { id: "remove-chart-from-back", onClick: this.removeBackChart }, "Remove Chart From Back"), h("button", { id: "remove-chart-from-front", onClick: this.removeFrontChart }, "Remove Chart From Front"), h("hr", null), this.chartKeys.map(function (_a) {
            var key = _a.key, data = _a.data;
            return (h("div", { key: key, style: { marginLeft: _this.xOffset + "px", width: _this.width + "px", height: '500px' } }, h("sc-line-chart", { dataStreams: data, widgetId: key, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX } })));
        }), h("sc-webgl-context", null)));
    };
    return ScWebglChartStandard;
}());
export { ScWebglChartStandard as sc_webgl_chart_dynamic_charts };
