var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h } from './index-0c943849.js';
import './constants-35570903.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import { M as MINUTE_IN_MS } from './time-b732648c.js';
import { a as Y_VALUE } from './constants-9d36da8a.js';
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2000, 0, 1);
// test data point dead center of the viewport
var VIEWPORT_WIDTH = X_MAX.getTime() - X_MIN.getTime();
var LEFT_X = new Date(X_MIN.getTime() + VIEWPORT_WIDTH * (1 / 6)).getTime();
var MIDDLE_X = new Date(X_MIN.getTime() + VIEWPORT_WIDTH * (1 / 3)).getTime();
var RIGHT_X = new Date(X_MIN.getTime() + VIEWPORT_WIDTH * (1 / 2)).getTime();
var ScWebglLineChartDynamicDataStreams = /** @class */ (function () {
    function ScWebglLineChartDynamicDataStreams(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.dataStreams = [];
        this.addStream = function () {
            var _a;
            var leftPoint = {
                x: LEFT_X,
                y: Y_VALUE,
            };
            var middlePoint = {
                x: MIDDLE_X,
                y: Y_VALUE,
            };
            var rightPoint = {
                x: RIGHT_X,
                y: Y_VALUE,
            };
            var streamId = "stream-" + (_this.dataStreams.length + 1);
            _this.dataStreams = __spreadArrays([
                {
                    id: streamId,
                    color: 'black',
                    name: streamId + "-name",
                    aggregates: (_a = {}, _a[MINUTE_IN_MS] = [leftPoint, middlePoint, rightPoint], _a),
                    data: [],
                    resolution: MINUTE_IN_MS,
                    dataType: DataType.NUMBER,
                }
            ], _this.dataStreams);
        };
        this.removeStream = function () {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            var _a = _this.dataStreams, _firstStream = _a[0], restStreams = _a.slice(1);
            _this.dataStreams = restStreams;
        };
    }
    ScWebglLineChartDynamicDataStreams.prototype.render = function () {
        return (h("div", { class: "synchro-chart-tests" }, h("button", { id: "add-stream", onClick: this.addStream }, "Add Stream"), h("button", { id: "remove-stream", onClick: this.removeStream }, "Remove Stream"), h("br", null), h("br", null), h("div", { id: "chart-container", style: { marginTop: '20px', width: '500px', height: '500px' } }, h("sc-line-chart", { widgetId: "widget-id", dataStreams: this.dataStreams, size: {
                height: 500,
                width: 500,
            }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX } })), h("sc-webgl-context", null)));
    };
    return ScWebglLineChartDynamicDataStreams;
}());
export { ScWebglLineChartDynamicDataStreams as sc_webgl_line_chart_dynamic_data_streams };
