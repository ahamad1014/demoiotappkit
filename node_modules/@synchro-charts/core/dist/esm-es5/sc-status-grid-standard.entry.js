import { r as registerInstance, h } from './index-0c943849.js';
import { C as COMPARISON_OPERATOR, b as StatusIcon } from './constants-35570903.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import { a as MONTH_IN_MS, Y as YEAR_IN_MS } from './time-b732648c.js';
import { i as isNumeric } from './number-a7331d73.js';
var parsePrimitive = function (param) {
    if (param == null || param === 'null' || param === 'undefined') {
        return null;
    }
    if (isNumeric(param)) {
        return Number.parseInt(param, 10);
    }
    return param;
};
/**
 * Parse the URL Search Query to construct models to build a test case out of.
 */
var testCaseParameters = function () {
    var urlParams = new URLSearchParams(window.location.search);
    var isEnabledParam = urlParams.get('isEnabled');
    var latestValueParam = urlParams.get('latestValue');
    var numDataStreamsParam = urlParams.get('numDataStreams');
    var showNameParam = urlParams.get('showName');
    var showValueParam = urlParams.get('showValue');
    var showUnitParam = urlParams.get('showUnit');
    var isEditingParam = urlParams.get('isEditing');
    var thresholdValue = parsePrimitive(urlParams.get('threshold'));
    var showIconParam = urlParams.get('showIcon');
    /**
     * Parse Param
     */
    var latestValue;
    if (latestValueParam == null || latestValueParam === 'null' || latestValueParam === 'undefined') {
        latestValue = null;
    }
    else if (isNumeric(latestValueParam)) {
        latestValue = Number.parseInt(latestValueParam, 10);
    }
    else {
        latestValue = latestValueParam;
    }
    var numDataStreams = numDataStreamsParam && isNumeric(numDataStreamsParam) ? Number.parseInt(numDataStreamsParam, 10) : 1;
    var isEnabled = isEnabledParam !== 'false';
    var isEditing = isEditingParam !== 'false';
    var showName = showNameParam !== 'false';
    var showValue = showValueParam !== 'false';
    var showUnit = showUnitParam !== 'false';
    var showIcon = showIconParam !== 'false';
    /** Construct threshold */
    var threshold;
    if (thresholdValue != null) {
        threshold = {
            comparisonOperator: COMPARISON_OPERATOR.EQUAL,
            color: 'red',
            value: thresholdValue,
            icon: showIcon ? StatusIcon.NORMAL : undefined,
        };
    }
    return {
        threshold: threshold,
        latestValue: latestValue,
        numDataStreams: numDataStreams,
        isEnabled: isEnabled,
        labelsConfig: { showName: showName, showValue: showValue, showUnit: showUnit },
        isEditing: isEditing,
    };
};
var _a = testCaseParameters(), threshold = _a.threshold, latestValue = _a.latestValue, numDataStreams = _a.numDataStreams, isEnabled = _a.isEnabled, labelsConfig = _a.labelsConfig, isEditing = _a.isEditing;
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2000, 0, 1);
var NUM_POINTS = 3;
var DATA_TYPE = typeof latestValue === 'string' ? DataType.STRING : DataType.NUMBER;
// test data point dead center of the viewport
var DATA = new Array(NUM_POINTS).fill(null).map(function (_, i) { return ({
    x: X_MIN.getTime() + MONTH_IN_MS * (i + 1),
    y: i === NUM_POINTS - 1 && latestValue != null ? latestValue : Y_MIN + 100 * (i + 1),
}); });
var data = new Array(numDataStreams).fill(null).map(function (_, i) { return ({
    id: i.toString(),
    data: i === 0 && latestValue != null ? DATA : [],
    color: 'black',
    unit: 'unit',
    name: "Data " + (i + 1),
    dataType: DATA_TYPE,
    resolution: 0,
}); });
var ScStatusGridStandard = /** @class */ (function () {
    function ScStatusGridStandard(hostRef) {
        registerInstance(this, hostRef);
    }
    ScStatusGridStandard.prototype.render = function () {
        var annotations = threshold ? { y: [threshold] } : undefined;
        var viewPort = isEnabled
            ? { yMin: Y_MIN, yMax: Y_MAX, duration: YEAR_IN_MS }
            : { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX };
        return (h("sc-status-grid", { widgetId: "test-widget", labelsConfig: labelsConfig, annotations: annotations, dataStreams: data, viewport: viewPort, isEditing: isEditing }));
    };
    return ScStatusGridStandard;
}());
export { ScStatusGridStandard as sc_status_grid_standard };
