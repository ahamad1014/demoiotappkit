import { b as breachedThreshold } from './breachedThreshold-500f9d58.js';
import { g as getDataPoints } from './getDataPoints-6f8b4e89.js';
var cell = function (thresholds, date, dataStreams, dataStreamId) {
    var stream = dataStreams.find(function (_a) {
        var id = _a.id;
        return id === dataStreamId;
    });
    var points = stream ? getDataPoints(stream, stream.resolution) : [];
    var value = points[points.length - 1] && points[points.length - 1].y;
    var threshold = stream &&
        breachedThreshold({
            value: value,
            date: date,
            dataStreams: dataStreams,
            dataStream: stream,
            thresholds: thresholds,
        });
    var _a = threshold || {}, color = _a.color, icon = _a.icon;
    return { dataStream: stream, color: color, icon: icon };
};
/**
 * Given the business models, output the view model representation of a table row.
 */
var constructTableData = function (_a) {
    var tableColumns = _a.tableColumns, dataStreams = _a.dataStreams, thresholds = _a.thresholds, date = _a.date;
    var numRows = Math.max.apply(Math, tableColumns.map(function (_a) {
        var rows = _a.rows;
        return rows.length;
    }));
    var table = [];
    var _loop_1 = function (r) {
        var row = {};
        tableColumns.forEach(function (column) {
            var dataStreamId = column.rows[r] || undefined;
            row[column.header] = cell(thresholds, date, dataStreams, dataStreamId);
        });
        table.push(row);
    };
    // eslint-disable-next-line no-plusplus
    for (var r = 0; r < numRows; r++) {
        _loop_1(r);
    }
    return table;
};
/**
 * Format liveModeOnlyMessage for Table disable State display
 */
var formatLiveModeOnlyMessage = function (liveModeOnlyMessage) {
    var splitIndex = liveModeOnlyMessage.indexOf('. ');
    if (splitIndex < 0) {
        return { msgHeader: liveModeOnlyMessage, msgSubHeader: '' };
    }
    var msgHeader = liveModeOnlyMessage.slice(0, splitIndex);
    var msgSubHeader = liveModeOnlyMessage.slice(splitIndex + 2);
    return { msgHeader: msgHeader, msgSubHeader: msgSubHeader };
};
export { constructTableData as c, formatLiveModeOnlyMessage as f };
