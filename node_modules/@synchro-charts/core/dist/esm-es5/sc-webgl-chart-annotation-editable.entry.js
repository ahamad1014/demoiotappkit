import { r as registerInstance, h } from './index-0c943849.js';
import { C as COMPARISON_OPERATOR } from './constants-35570903.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2001, 0, 1);
var TEST_DATA_POINT = {
    x: new Date(1999, 0, 0).getTime(),
    y: 2000,
};
var TEST_DATA_POINT_2 = {
    x: new Date(2000, 0, 0).getTime(),
    y: 4000,
};
var TEST_2_DATA_POINT = {
    x: new Date(1999, 0, 0).getTime(),
    y: 4000,
};
var TEST_2_DATA_POINT_2 = {
    x: new Date(2000, 0, 0).getTime(),
    y: 2000,
};
var Y_THRESHOLD = {
    isEditable: true,
    comparisonOperator: COMPARISON_OPERATOR.GREATER_THAN,
    value: 3800,
    label: {
        text: 'here is a y label',
        show: true,
    },
    showValue: true,
    color: 'blue',
    id: 'blue-threshold',
};
var Y_ANNOTATION = {
    isEditable: true,
    value: 3200,
    label: {
        text: 'another y label',
        show: true,
    },
    showValue: true,
    color: 'green',
    id: 'green-anotation',
};
var oldAnnotations;
var ScWebglChartAnnotationRescaling = /** @class */ (function () {
    function ScWebglChartAnnotationRescaling(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.isEditableValue = false;
        this.isShowValue = true;
        this.annotations = {
            x: [
                {
                    value: new Date((X_MAX.getTime() + X_MIN.getTime()) / 2),
                    label: {
                        text: 'here is a x label',
                        show: true,
                    },
                    showValue: true,
                    color: 'purple',
                },
            ],
            y: [
                Object.assign(Object.assign({}, Y_ANNOTATION), { isEditable: !this.isEditableValue, showValue: this.isShowValue }),
                Object.assign(Object.assign({}, Y_THRESHOLD), { isEditable: !this.isEditableValue, showValue: !this.isShowValue }),
                Object.assign(Object.assign({}, Y_ANNOTATION), { isEditable: this.isEditableValue, value: 2300, color: 'red', showValue: this.isShowValue, id: 'red-annotation' }),
            ],
        };
        this.changeValue = function () {
            // this.annotations = oldAnnotations; //passed by reference so this doesn't work since draggable will modify oldAnnotations
            // this mimics the seperate annotation state of the app and the SC layer
            var y = _this.annotations.y;
            _this.annotations = Object.assign(Object.assign({}, _this.annotations), { y: y.map(function (annotation) {
                    return Object.assign(Object.assign({}, annotation), { value: oldAnnotations.y.find(function (oldannotation) { return oldannotation.id === annotation.id; }).value });
                }) });
        };
        this.onEditableChange = function () {
            var y = _this.annotations.y;
            _this.annotations = Object.assign(Object.assign({}, _this.annotations), { y: y.map(function (annotation) {
                    return Object.assign(Object.assign({}, annotation), { isEditable: !annotation.isEditable });
                }) });
        };
        this.onShowValueChange = function () {
            var y = _this.annotations.y;
            _this.annotations = Object.assign(Object.assign({}, _this.annotations), { y: y.map(function (annotation) {
                    return Object.assign(Object.assign({}, annotation), { showValue: !annotation.showValue });
                }) });
        };
    }
    ScWebglChartAnnotationRescaling.prototype.onWidgetUpdated = function (_a) {
        var configUpdate = _a.detail;
        this.annotations = configUpdate.annotations;
        oldAnnotations = this.annotations;
    };
    ScWebglChartAnnotationRescaling.prototype.componentDidLoad = function () {
        oldAnnotations = this.annotations;
        setInterval(this.changeValue, 1000);
    };
    ScWebglChartAnnotationRescaling.prototype.render = function () {
        return (h("div", { class: "synchro-chart-tests", style: { width: '1000px', height: '1000px' } }, h("div", null, h("button", { id: "change-editable", onClick: this.onEditableChange }, "Change Editable")), h("div", null, h("button", { id: "change-showvalue", onClick: this.onShowValueChange }, "Change Show Value")), h("div", null, h("sc-line-chart", { widgetId: "widget-id", dataStreams: [
                {
                    id: 'test',
                    color: 'black',
                    name: 'test stream',
                    data: [TEST_DATA_POINT, TEST_DATA_POINT_2],
                    resolution: 0,
                    dataType: DataType.NUMBER,
                },
                {
                    id: 'test2',
                    color: 'orange',
                    name: 'test stream2',
                    data: [TEST_2_DATA_POINT, TEST_2_DATA_POINT_2],
                    resolution: 0,
                    dataType: DataType.NUMBER,
                },
            ], annotations: this.annotations, viewport: { start: X_MIN, end: X_MAX }, size: {
                height: 1000,
                width: 1000,
            } }), h("sc-webgl-context", null))));
    };
    return ScWebglChartAnnotationRescaling;
}());
export { ScWebglChartAnnotationRescaling as sc_webgl_chart_annotation_editable };
