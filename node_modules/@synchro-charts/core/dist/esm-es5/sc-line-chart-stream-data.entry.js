var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h } from './index-0c943849.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import { S as SECOND_IN_MS } from './time-b732648c.js';
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2000, 0, 1);
// test data point dead center of the viewport
var TEST_DATA_POINT = {
    x: (X_MIN.getTime() + X_MAX.getTime()) / 2,
    y: (Y_MIN + Y_MAX) / 2,
};
var urlParams = new URLSearchParams(window.location.search);
var dataPerRoundParam = urlParams.get('dataPerRound');
var roundFrequencyParam = urlParams.get('roundFrequency');
var viewportSpeedParam = urlParams.get('viewportSpeed');
var DATA_SIZE_BATCH = dataPerRoundParam ? Number.parseInt(dataPerRoundParam, 10) : 1;
var DATA_FREQUENCY_MS = roundFrequencyParam ? Number.parseInt(roundFrequencyParam, 10) : SECOND_IN_MS;
var VIEWPORT_SPEED = viewportSpeedParam ? Number.parseInt(viewportSpeedParam, 10) : 0;
var createData = function (point) { return new Array(DATA_SIZE_BATCH).fill(0).map(function (_, i) { return ({
    x: point.x,
    y: point.y + i,
}); }); };
var ScLineChartStreamData = /** @class */ (function () {
    function ScLineChartStreamData(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.dataPoints = [TEST_DATA_POINT];
        this.viewport = { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX };
        this.viewportLoop = function () { return window.requestAnimationFrame(function () {
            _this.viewport = Object.assign(Object.assign({}, _this.viewport), { start: new Date(_this.viewport.start.getTime() + VIEWPORT_SPEED), end: new Date(_this.viewport.end.getTime() + VIEWPORT_SPEED) });
            _this.viewportShifter = _this.viewportLoop();
        }); };
    }
    ScLineChartStreamData.prototype.componentWillLoad = function () {
        var _this = this;
        if (VIEWPORT_SPEED > 0) {
            this.viewportShifter = this.viewportLoop();
        }
        this.dataLoop = window.setInterval(function () {
            _this.dataPoints = __spreadArrays(_this.dataPoints, createData({
                x: (_this.dataPoints[_this.dataPoints.length - 1].x + X_MAX.getTime()) / 2,
                y: TEST_DATA_POINT.y,
            }));
        }, DATA_FREQUENCY_MS);
    };
    ScLineChartStreamData.prototype.disconnectedCallback = function () {
        clearInterval(this.dataLoop);
        if (this.viewportShifter != null) {
            window.cancelAnimationFrame(this.viewportShifter);
        }
    };
    ScLineChartStreamData.prototype.render = function () {
        return (h("div", { id: "chart-container", style: { border: '1px solid lightgray', height: '500px', width: '500px' } }, h("sc-line-chart", { widgetId: "widget-id", dataStreams: [
                {
                    id: 'test',
                    color: 'black',
                    name: 'test stream',
                    data: this.dataPoints,
                    resolution: 0,
                    dataType: DataType.NUMBER,
                },
            ], size: {
                height: 500,
                width: 500,
            }, viewport: this.viewport }), h("sc-webgl-context", null)));
    };
    return ScLineChartStreamData;
}());
export { ScLineChartStreamData as sc_line_chart_stream_data };
