import { r as registerInstance, h } from './index-0c943849.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import { a as MONTH_IN_MS, Y as YEAR_IN_MS } from './time-b732648c.js';
import { i as isNumeric } from './number-a7331d73.js';
// Dynamic on number of data points present
var urlParams = new URLSearchParams(window.location.search);
var isEnabledParam = urlParams.get('isEnabled');
var isEnabled = isEnabledParam === 'true';
var latestValueParam = urlParams.get('latestValue');
var numChartsParam = urlParams.get('numCharts');
/**
 * Parse Param
 */
var latestValue;
if (latestValueParam == null || latestValueParam === 'null' || latestValueParam === 'undefined') {
    latestValue = null;
}
else if (isNumeric(latestValueParam)) {
    latestValue = Number.parseInt(latestValueParam, 10);
}
else {
    latestValue = latestValueParam;
}
var numCharts = numChartsParam && isNumeric(numChartsParam) ? Number.parseInt(numChartsParam, 10) : 1;
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2000, 0, 1);
var NUM_POINTS = 3;
// test data point dead center of the viewport
var DATA = new Array(NUM_POINTS).fill(null).map(function (_, i) { return ({
    x: X_MIN.getTime() + MONTH_IN_MS * (i + 1),
    y: i === NUM_POINTS - 1 && latestValue != null ? latestValue : Y_MIN + 30 * (i + 1),
}); });
var DATA_TYPE = typeof latestValue === 'string' ? DataType.STRING : DataType.NUMBER;
var dataStreams = new Array(numCharts).fill(null).map(function (_, i) { return ({
    id: i.toString(),
    resolution: 0,
    data: i === 0 ? DATA : [],
    color: 'black',
    name: "Quality " + (i + 1),
    detailedName: "/BellevueWA/QualitySmogIndex-" + i,
    unit: '%',
    dataType: DATA_TYPE,
}); });
var ScKpiStandard = /** @class */ (function () {
    function ScKpiStandard(hostRef) {
        registerInstance(this, hostRef);
    }
    ScKpiStandard.prototype.render = function () {
        var viewPort = isEnabled
            ? { yMin: Y_MIN, yMax: Y_MAX, duration: YEAR_IN_MS }
            : { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX };
        return h("sc-kpi", { widgetId: "test-widget", dataStreams: dataStreams, viewport: viewPort });
    };
    return ScKpiStandard;
}());
export { ScKpiStandard as sc_kpi_standard };
