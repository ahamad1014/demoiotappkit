import { r as registerInstance, h } from './index-0c943849.js';
import { D as DATA_ALIGNMENT } from './constants-35570903.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import './time-b732648c.js';
import './utils-96fe4147.js';
import './predicates-67461267.js';
import './number-a7331d73.js';
import './getDataPoints-6f8b4e89.js';
import './three.module-06da257a.js';
import './_commonjsHelpers-1d681858.js';
import './v4-9366210a.js';
import './index-2e17ff6c.js';
import './clipSpaceConversion-8273b9c5.js';
import './pointMesh-a5aff2b1.js';
import { u as updateChartScene, c as chartScene } from './chartScene-5da77983.js';
import './common-a5fcad18.js';
import { v as validate } from './validate-b6246900.js';
import { D as DEFAULT_CHART_CONFIG } from './chartDefaults-f5689a69.js';
// The initial size of buffers. The larger this is, the more memory allocated up front per chart.
// The lower this number is, more likely that charts will have to re-initialize there buffers which is
// a slow operation (CPU bound).
var DEFAULT_MIN_BUFFER_SIZE = 1000;
var DEFAULT_BUFFER_FACTOR = 2;
var tooltip = function (props) { return (h("sc-tooltip", Object.assign({}, props, { visualizesAlarms: false, supportString: false, dataAlignment: DATA_ALIGNMENT.EITHER }))); };
var ScLineChart = /** @class */ (function () {
    function ScLineChart(hostRef) {
        registerInstance(this, hostRef);
        this.gestures = true;
        /** Status */
        this.isEditing = false;
        /** Memory Management */
        this.bufferFactor = DEFAULT_BUFFER_FACTOR;
        this.minBufferSize = DEFAULT_MIN_BUFFER_SIZE;
    }
    ScLineChart.prototype.componentWillRender = function () {
        validate(this);
    };
    ScLineChart.prototype.render = function () {
        var _this = this;
        return (h("sc-size-provider", { size: this.size, renderFunc: function (rect) { return (h("sc-webgl-base-chart", { supportedDataTypes: [DataType.NUMBER], axis: _this.axis, alarms: _this.alarms, gestures: _this.gestures, configId: _this.widgetId, legend: _this.legend, annotations: _this.annotations, trends: _this.trends, updateChartScene: updateChartScene, createChartScene: chartScene, size: Object.assign(Object.assign(Object.assign({}, DEFAULT_CHART_CONFIG.size), _this.size), rect), dataStreams: _this.dataStreams, viewport: _this.viewport, minBufferSize: _this.minBufferSize, bufferFactor: _this.bufferFactor, isEditing: _this.isEditing, renderTooltip: tooltip, supportString: false, visualizesAlarms: false, messageOverrides: _this.messageOverrides })); } }));
    };
    return ScLineChart;
}());
export { ScLineChart as sc_line_chart };
