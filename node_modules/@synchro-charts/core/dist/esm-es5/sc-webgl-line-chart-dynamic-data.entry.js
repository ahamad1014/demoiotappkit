var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h } from './index-0c943849.js';
import './constants-35570903.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import { a as Y_VALUE } from './constants-9d36da8a.js';
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2000, 0, 1);
// test data point dead center of the viewport
/**
 * Testing route for the webGL rendering without being fully coupled to the chart.
 *
 * Used to test the behavior of a line chart when adding/removing data points
 */
var WIDTH = X_MAX.getTime() - X_MIN.getTime();
var ScWebglLineChartDynamicData = /** @class */ (function () {
    function ScWebglLineChartDynamicData(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.data = [];
        this.addDataPoint = function () {
            var dataPoint = {
                x: new Date(X_MIN.getTime() + WIDTH / (2 + _this.data.length)).getTime(),
                y: Y_VALUE,
            };
            _this.data = __spreadArrays([dataPoint], _this.data);
        };
        this.removeDataPoint = function () {
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            var _a = _this.data, _firstPoint = _a[0], rest = _a.slice(1);
            _this.data = rest;
        };
    }
    ScWebglLineChartDynamicData.prototype.render = function () {
        return (h("div", { class: "synchro-chart-tests" }, h("button", { id: "add-data-point", onClick: this.addDataPoint }, "Add Data Point"), h("button", { id: "remove-data-point", onClick: this.removeDataPoint }, "Remove Data Point"), h("div", { id: "chart-container", style: { marginTop: '20px', width: '500px', height: '500px' } }, h("sc-line-chart", { widgetId: "widget-id", dataStreams: [
                {
                    id: 'test',
                    color: 'red',
                    name: 'test stream',
                    data: this.data,
                    resolution: 0,
                    dataType: DataType.NUMBER,
                },
            ], size: {
                height: 500,
                width: 500,
            }, viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX } }), h("sc-webgl-context", null))));
    };
    return ScWebglLineChartDynamicData;
}());
export { ScWebglLineChartDynamicData as sc_webgl_line_chart_dynamic_data };
