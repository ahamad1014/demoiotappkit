var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { r as registerInstance, h } from './index-0c943849.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import { a as MONTH_IN_MS } from './time-b732648c.js';
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(2000, 0);
var X_MAX = new Date(2001, 3);
var LEFT_X = new Date(2000, 3).getTime();
var MIDDLE_X = new Date(2000, 6).getTime();
var RIGHT_X = new Date(2000, 9).getTime();
var StatusTimelineDynamicDataStreams = /** @class */ (function () {
    function StatusTimelineDynamicDataStreams(hostRef) {
        var _this = this;
        registerInstance(this, hostRef);
        this.dataStreams = [];
        this.colorIndex = 0;
        this.colors = ['#264653', '#2a9d8f', '#e9c46a', '#f4a261', '#e76f51'];
        this.increaseColorIndex = function () {
            _this.colorIndex += 1;
        };
        this.getColor = function () {
            // Modding the  will cycle through the colors array when the color index becomes greater than
            // the colors array length
            return _this.colors[_this.colorIndex % _this.colors.length];
        };
        this.addStream = function () {
            var _a;
            var leftPoint = {
                x: LEFT_X,
                y: 2.5,
            };
            var middlePoint = {
                x: MIDDLE_X,
                y: 2.5,
            };
            var rightPoint = {
                x: RIGHT_X,
                y: 2.5,
            };
            var streamId = "stream-" + (_this.dataStreams.length + 1);
            _this.dataStreams = __spreadArrays(_this.dataStreams, [
                {
                    id: streamId,
                    color: _this.getColor(),
                    name: streamId + "-name",
                    aggregates: (_a = {}, _a[MONTH_IN_MS] = [leftPoint, middlePoint, rightPoint], _a),
                    data: [],
                    resolution: MONTH_IN_MS,
                    dataType: DataType.NUMBER,
                },
            ]);
            _this.increaseColorIndex();
        };
        this.removeStream = function () {
            _this.dataStreams.pop();
            _this.dataStreams = __spreadArrays(_this.dataStreams);
            _this.colorIndex -= 1;
        };
    }
    StatusTimelineDynamicDataStreams.prototype.render = function () {
        return (h("div", { class: "synchro-chart-tests" }, h("button", { id: "add-stream", onClick: this.addStream }, "Add Stream"), h("button", { id: "remove-stream", onClick: this.removeStream }, "Remove Stream"), h("br", null), h("br", null), h("div", { id: "chart-container", style: { marginTop: '20px', width: '500px', height: '500px' } }, h("sc-status-timeline", { alarms: { expires: MONTH_IN_MS }, dataStreams: this.dataStreams, size: {
                width: 500,
                height: 500,
            }, widgetId: "widget-id", viewport: {
                yMin: Y_MIN,
                yMax: Y_MAX,
                start: X_MIN,
                end: X_MAX,
            } })), h("sc-webgl-context", null)));
    };
    return StatusTimelineDynamicDataStreams;
}());
export { StatusTimelineDynamicDataStreams as status_timeline_dynamic_data_streams };
