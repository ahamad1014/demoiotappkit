var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
import { i as isValid } from './predicates-67461267.js';
import { W as WebGLRenderer } from './three.module-06da257a.js';
/**
 * A collection of shims that provide minimal functionality of the ES6 collections.
 *
 * These implementations are not meant to be used outside of the ResizeObserver
 * modules as they cover only a limited range of use cases.
 */
/* eslint-disable require-jsdoc, valid-jsdoc */
var MapShim = (function () {
    if (typeof Map !== 'undefined') {
        return Map;
    }
    /**
     * Returns index in provided array that matches the specified key.
     *
     * @param {Array<Array>} arr
     * @param {*} key
     * @returns {number}
     */
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function (entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return /** @class */ (function () {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            /**
             * @returns {boolean}
             */
            get: function () {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {*} key
         * @returns {*}
         */
        class_1.prototype.get = function (key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        /**
         * @param {*} key
         * @param {*} value
         * @returns {void}
         */
        class_1.prototype.set = function (key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) {
                this.__entries__[index][1] = value;
            }
            else {
                this.__entries__.push([key, value]);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.delete = function (key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) {
                entries.splice(index, 1);
            }
        };
        /**
         * @param {*} key
         * @returns {void}
         */
        class_1.prototype.has = function (key) {
            return !!~getIndex(this.__entries__, key);
        };
        /**
         * @returns {void}
         */
        class_1.prototype.clear = function () {
            this.__entries__.splice(0);
        };
        /**
         * @param {Function} callback
         * @param {*} [ctx=null]
         * @returns {void}
         */
        class_1.prototype.forEach = function (callback, ctx) {
            if (ctx === void 0) {
                ctx = null;
            }
            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }());
})();
/**
 * Detects whether window and document objects are available in current environment.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
// Returns global object of a current environment.
var global$1 = (function () {
    if (typeof global !== 'undefined' && global.Math === Math) {
        return global;
    }
    if (typeof self !== 'undefined' && self.Math === Math) {
        return self;
    }
    if (typeof window !== 'undefined' && window.Math === Math) {
        return window;
    }
    // eslint-disable-next-line no-new-func
    return Function('return this')();
})();
/**
 * A shim for the requestAnimationFrame which falls back to the setTimeout if
 * first one is not supported.
 *
 * @returns {number} Requests' identifier.
 */
var requestAnimationFrame$1 = (function () {
    if (typeof requestAnimationFrame === 'function') {
        // It's required to use a bounded function because IE sometimes throws
        // an "Invalid calling object" error if rAF is invoked without the global
        // object on the left hand side.
        return requestAnimationFrame.bind(global$1);
    }
    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };
})();
// Defines minimum timeout before adding a trailing call.
var trailingTimeout = 2;
/**
 * Creates a wrapper function which ensures that provided callback will be
 * invoked only once during the specified delay period.
 *
 * @param {Function} callback - Function to be invoked after the delay period.
 * @param {number} delay - Delay after which to invoke callback.
 * @returns {Function}
 */
function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    /**
     * Invokes the original callback function and schedules new invocation if
     * the "proxy" was called during current request.
     *
     * @returns {void}
     */
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) {
            proxy();
        }
    }
    /**
     * Callback invoked after the specified delay. It will further postpone
     * invocation of the original function delegating it to the
     * requestAnimationFrame.
     *
     * @returns {void}
     */
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    /**
     * Schedules invocation of the original function.
     *
     * @returns {void}
     */
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            // Reject immediately following calls.
            if (timeStamp - lastCallTime < trailingTimeout) {
                return;
            }
            // Schedule new call to be in invoked when the pending one is resolved.
            // This is important for "transitions" which never actually start
            // immediately so there is a chance that we might miss one if change
            // happens amids the pending invocation.
            trailingCall = true;
        }
        else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}
// Minimum delay before invoking the update of observers.
var REFRESH_DELAY = 20;
// A list of substrings of CSS properties used to find transition events that
// might affect dimensions of observed elements.
var transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];
// Check if MutationObserver is available.
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
/**
 * Singleton controller class which handles updates of ResizeObserver instances.
 */
var ResizeObserverController = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserverController.
     *
     * @private
     */
    function ResizeObserverController() {
        /**
         * Indicates whether DOM listeners have been added.
         *
         * @private {boolean}
         */
        this.connected_ = false;
        /**
         * Tells that controller has subscribed for Mutation Events.
         *
         * @private {boolean}
         */
        this.mutationEventsAdded_ = false;
        /**
         * Keeps reference to the instance of MutationObserver.
         *
         * @private {MutationObserver}
         */
        this.mutationsObserver_ = null;
        /**
         * A list of connected observers.
         *
         * @private {Array<ResizeObserverSPI>}
         */
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    /**
     * Adds observer to observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be added.
     * @returns {void}
     */
    ResizeObserverController.prototype.addObserver = function (observer) {
        if (!~this.observers_.indexOf(observer)) {
            this.observers_.push(observer);
        }
        // Add listeners if they haven't been added yet.
        if (!this.connected_) {
            this.connect_();
        }
    };
    /**
     * Removes observer from observers list.
     *
     * @param {ResizeObserverSPI} observer - Observer to be removed.
     * @returns {void}
     */
    ResizeObserverController.prototype.removeObserver = function (observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        // Remove observer if it's present in registry.
        if (~index) {
            observers.splice(index, 1);
        }
        // Remove listeners if controller has no connected observers.
        if (!observers.length && this.connected_) {
            this.disconnect_();
        }
    };
    /**
     * Invokes the update of observers. It will continue running updates insofar
     * it detects changes.
     *
     * @returns {void}
     */
    ResizeObserverController.prototype.refresh = function () {
        var changesDetected = this.updateObservers_();
        // Continue running updates if changes have been detected as there might
        // be future ones caused by CSS transitions.
        if (changesDetected) {
            this.refresh();
        }
    };
    /**
     * Updates every observer from observers list and notifies them of queued
     * entries.
     *
     * @private
     * @returns {boolean} Returns "true" if any observer has detected changes in
     *      dimensions of it's elements.
     */
    ResizeObserverController.prototype.updateObservers_ = function () {
        // Collect observers that have active observations.
        var activeObservers = this.observers_.filter(function (observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        // Deliver notifications in a separate cycle in order to avoid any
        // collisions between observers, e.g. when multiple instances of
        // ResizeObserver are tracking the same element and the callback of one
        // of them changes content dimensions of the observed target. Sometimes
        // this may result in notifications being blocked for the rest of observers.
        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });
        return activeObservers.length > 0;
    };
    /**
     * Initializes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.connect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already added.
        if (!isBrowser || this.connected_) {
            return;
        }
        // Subscription to the "Transitionend" event is used as a workaround for
        // delayed transitions. This way it's possible to capture at least the
        // final state of an element.
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        }
        else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    /**
     * Removes DOM listeners.
     *
     * @private
     * @returns {void}
     */
    ResizeObserverController.prototype.disconnect_ = function () {
        // Do nothing if running in a non-browser environment or if listeners
        // have been already removed.
        if (!isBrowser || !this.connected_) {
            return;
        }
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) {
            this.mutationsObserver_.disconnect();
        }
        if (this.mutationEventsAdded_) {
            document.removeEventListener('DOMSubtreeModified', this.refresh);
        }
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    /**
     * "Transitionend" event handler.
     *
     * @private
     * @param {TransitionEvent} event
     * @returns {void}
     */
    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        // Detect whether transition may affect dimensions of an element.
        var isReflowProperty = transitionKeys.some(function (key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) {
            this.refresh();
        }
    };
    /**
     * Returns instance of the ResizeObserverController.
     *
     * @returns {ResizeObserverController}
     */
    ResizeObserverController.getInstance = function () {
        if (!this.instance_) {
            this.instance_ = new ResizeObserverController();
        }
        return this.instance_;
    };
    /**
     * Holds reference to the controller's instance.
     *
     * @private {ResizeObserverController}
     */
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}());
/**
 * Defines non-writable/enumerable properties of the provided target object.
 *
 * @param {Object} target - Object for which to define properties.
 * @param {Object} props - Properties to be defined.
 * @returns {Object} Target object.
 */
var defineConfigurable = (function (target, props) {
    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
});
/**
 * Returns the global object associated with provided element.
 *
 * @param {Object} target
 * @returns {Object}
 */
var getWindowOf = (function (target) {
    // Assume that the element is an instance of Node, which means that it
    // has the "ownerDocument" property from which we can retrieve a
    // corresponding global object.
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    // Return the local global object if it's not possible extract one from
    // provided element.
    return ownerGlobal || global$1;
});
// Placeholder of an empty content rectangle.
var emptyRect = createRectInit(0, 0, 0, 0);
/**
 * Converts provided string to a number.
 *
 * @param {number|string} value
 * @returns {number}
 */
function toFloat(value) {
    return parseFloat(value) || 0;
}
/**
 * Extracts borders size from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @param {...string} positions - Borders positions (top, right, ...)
 * @returns {number}
 */
function getBordersSize(styles) {
    var positions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        positions[_i - 1] = arguments[_i];
    }
    return positions.reduce(function (size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
/**
 * Extracts paddings sizes from provided styles.
 *
 * @param {CSSStyleDeclaration} styles
 * @returns {Object} Paddings box.
 */
function getPaddings(styles) {
    var positions = ['top', 'right', 'bottom', 'left'];
    var paddings = {};
    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
/**
 * Calculates content rectangle of provided SVG element.
 *
 * @param {SVGGraphicsElement} target - Element content rectangle of which needs
 *      to be calculated.
 * @returns {DOMRectInit}
 */
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
/**
 * Calculates content rectangle of provided HTMLElement.
 *
 * @param {HTMLElement} target - Element for which to calculate the content rectangle.
 * @returns {DOMRectInit}
 */
function getHTMLElementContentRect(target) {
    // Client width & height properties can't be
    // used exclusively as they provide rounded values.
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    // By this condition we can catch all non-replaced inline, hidden and
    // detached elements. Though elements with width & height properties less
    // than 0.5 will be discarded as well.
    //
    // Without it we would need to implement separate methods for each of
    // those cases and it's not possible to perform a precise and performance
    // effective test for hidden elements. E.g. even jQuery's ':visible' filter
    // gives wrong results for elements with width & height less than 0.5.
    if (!clientWidth && !clientHeight) {
        return emptyRect;
    }
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    // Computed styles of width & height are being used because they are the
    // only dimensions available to JS that contain non-rounded values. It could
    // be possible to utilize the getBoundingClientRect if only it's data wasn't
    // affected by CSS transformations let alone paddings, borders and scroll bars.
    var width = toFloat(styles.width), height = toFloat(styles.height);
    // Width & height include paddings and borders when the 'border-box' box
    // model is applied (except for IE).
    if (styles.boxSizing === 'border-box') {
        // Following conditions are required to handle Internet Explorer which
        // doesn't include paddings and borders to computed CSS dimensions.
        //
        // We can say that if CSS dimensions + paddings are equal to the "client"
        // properties then it's either IE, and thus we don't need to subtract
        // anything, or an element merely doesn't have paddings/borders styles.
        if (Math.round(width + horizPad) !== clientWidth) {
            width -= getBordersSize(styles, 'left', 'right') + horizPad;
        }
        if (Math.round(height + vertPad) !== clientHeight) {
            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
        }
    }
    // Following steps can't be applied to the document's root element as its
    // client[Width/Height] properties represent viewport area of the window.
    // Besides, it's as well not necessary as the <html> itself neither has
    // rendered scroll bars nor it can be clipped.
    if (!isDocumentElement(target)) {
        // In some browsers (only in Firefox, actually) CSS width & height
        // include scroll bars size which can be removed at this step as scroll
        // bars are the only difference between rounded dimensions + paddings
        // and "client" properties, though that is not always true in Chrome.
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        // Chrome has a rather weird rounding of "client" properties.
        // E.g. for an element with content width of 314.2px it sometimes gives
        // the client width of 315px and for the width of 314.7px it may give
        // 314px. And it doesn't happen all the time. So just ignore this delta
        // as a non-relevant.
        if (Math.abs(vertScrollbar) !== 1) {
            width -= vertScrollbar;
        }
        if (Math.abs(horizScrollbar) !== 1) {
            height -= horizScrollbar;
        }
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
/**
 * Checks whether provided element is an instance of the SVGGraphicsElement.
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
var isSVGGraphicsElement = (function () {
    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement
    // interface.
    if (typeof SVGGraphicsElement !== 'undefined') {
        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };
    }
    // If it's so, then check that element is at least an instance of the
    // SVGElement and that it has the "getBBox" method.
    // eslint-disable-next-line no-extra-parens
    return function (target) {
        return (target instanceof getWindowOf(target).SVGElement &&
            typeof target.getBBox === 'function');
    };
})();
/**
 * Checks whether provided element is a document element (<html>).
 *
 * @param {Element} target - Element to be checked.
 * @returns {boolean}
 */
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
/**
 * Calculates an appropriate content rectangle for provided html or svg element.
 *
 * @param {Element} target - Element content rectangle of which needs to be calculated.
 * @returns {DOMRectInit}
 */
function getContentRect(target) {
    if (!isBrowser) {
        return emptyRect;
    }
    if (isSVGGraphicsElement(target)) {
        return getSVGContentRect(target);
    }
    return getHTMLElementContentRect(target);
}
/**
 * Creates rectangle with an interface of the DOMRectReadOnly.
 * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly
 *
 * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.
 * @returns {DOMRectReadOnly}
 */
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    // If DOMRectReadOnly is available use it as a prototype for the rectangle.
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    // Rectangle's properties are not writable and non-enumerable.
    defineConfigurable(rect, {
        x: x, y: y, width: width, height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
/**
 * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.
 * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit
 *
 * @param {number} x - X coordinate.
 * @param {number} y - Y coordinate.
 * @param {number} width - Rectangle's width.
 * @param {number} height - Rectangle's height.
 * @returns {DOMRectInit}
 */
function createRectInit(x, y, width, height) {
    return { x: x, y: y, width: width, height: height };
}
/**
 * Class that is responsible for computations of the content rectangle of
 * provided DOM element and for keeping track of it's changes.
 */
var ResizeObservation = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObservation.
     *
     * @param {Element} target - Element to be observed.
     */
    function ResizeObservation(target) {
        /**
         * Broadcasted width of content rectangle.
         *
         * @type {number}
         */
        this.broadcastWidth = 0;
        /**
         * Broadcasted height of content rectangle.
         *
         * @type {number}
         */
        this.broadcastHeight = 0;
        /**
         * Reference to the last observed content rectangle.
         *
         * @private {DOMRectInit}
         */
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    /**
     * Updates content rectangle and tells whether it's width or height properties
     * have changed since the last broadcast.
     *
     * @returns {boolean}
     */
    ResizeObservation.prototype.isActive = function () {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return (rect.width !== this.broadcastWidth ||
            rect.height !== this.broadcastHeight);
    };
    /**
     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data
     * from the corresponding properties of the last observed content rectangle.
     *
     * @returns {DOMRectInit} Last observed content rectangle.
     */
    ResizeObservation.prototype.broadcastRect = function () {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}());
var ResizeObserverEntry = /** @class */ (function () {
    /**
     * Creates an instance of ResizeObserverEntry.
     *
     * @param {Element} target - Element that is being observed.
     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.
     */
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        // According to the specification following properties are not writable
        // and are also not enumerable in the native implementation.
        //
        // Property accessors are not being used as they'd require to define a
        // private WeakMap storage which may cause memory leaks in browsers that
        // don't support this type of collections.
        defineConfigurable(this, { target: target, contentRect: contentRect });
    }
    return ResizeObserverEntry;
}());
var ResizeObserverSPI = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback function that is invoked
     *      when one of the observed elements changes it's content dimensions.
     * @param {ResizeObserverController} controller - Controller instance which
     *      is responsible for the updates of observer.
     * @param {ResizeObserver} callbackCtx - Reference to the public
     *      ResizeObserver instance which will be passed to callback function.
     */
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        /**
         * Collection of resize observations that have detected changes in dimensions
         * of elements.
         *
         * @private {Array<ResizeObservation>}
         */
        this.activeObservations_ = [];
        /**
         * Registry of the ResizeObservation instances.
         *
         * @private {Map<Element, ResizeObservation>}
         */
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') {
            throw new TypeError('The callback provided as parameter 1 is not a function.');
        }
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    /**
     * Starts observing provided element.
     *
     * @param {Element} target - Element to be observed.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.observe = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is already being observed.
        if (observations.has(target)) {
            return;
        }
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        // Force the update of observations.
        this.controller_.refresh();
    };
    /**
     * Stops observing provided element.
     *
     * @param {Element} target - Element to stop observing.
     * @returns {void}
     */
    ResizeObserverSPI.prototype.unobserve = function (target) {
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        // Do nothing if current environment doesn't have the Element interface.
        if (typeof Element === 'undefined' || !(Element instanceof Object)) {
            return;
        }
        if (!(target instanceof getWindowOf(target).Element)) {
            throw new TypeError('parameter 1 is not of type "Element".');
        }
        var observations = this.observations_;
        // Do nothing if element is not being observed.
        if (!observations.has(target)) {
            return;
        }
        observations.delete(target);
        if (!observations.size) {
            this.controller_.removeObserver(this);
        }
    };
    /**
     * Stops observing all elements.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.disconnect = function () {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    /**
     * Collects observation instances the associated element of which has changed
     * it's content rectangle.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.gatherActive = function () {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function (observation) {
            if (observation.isActive()) {
                _this.activeObservations_.push(observation);
            }
        });
    };
    /**
     * Invokes initial callback function with a list of ResizeObserverEntry
     * instances collected from active resize observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.broadcastActive = function () {
        // Do nothing if observer doesn't have active observations.
        if (!this.hasActive()) {
            return;
        }
        var ctx = this.callbackCtx_;
        // Create ResizeObserverEntry instance for every active observation.
        var entries = this.activeObservations_.map(function (observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    /**
     * Clears the collection of active observations.
     *
     * @returns {void}
     */
    ResizeObserverSPI.prototype.clearActive = function () {
        this.activeObservations_.splice(0);
    };
    /**
     * Tells whether observer has active observations.
     *
     * @returns {boolean}
     */
    ResizeObserverSPI.prototype.hasActive = function () {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}());
// Registry of internal observers. If WeakMap is not available use current shim
// for the Map collection as it has all required methods and because WeakMap
// can't be fully polyfilled anyway.
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
/**
 * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation
 * exposing only those methods and properties that are defined in the spec.
 */
var ResizeObserver = /** @class */ (function () {
    /**
     * Creates a new instance of ResizeObserver.
     *
     * @param {ResizeObserverCallback} callback - Callback that is invoked when
     *      dimensions of the observed elements change.
     */
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) {
            throw new TypeError('Cannot call a class as a function.');
        }
        if (!arguments.length) {
            throw new TypeError('1 argument required, but only 0 present.');
        }
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}());
// Expose public methods of ResizeObserver.
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function (method) {
    ResizeObserver.prototype[method] = function () {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});
var index = (function () {
    // Export existing implementation if available.
    if (typeof global$1.ResizeObserver !== 'undefined') {
        return global$1.ResizeObserver;
    }
    return ResizeObserver;
})();
/**
 * Convert a rect to a ClipSpaceRect
 *
 * This will return us the coordinates of a rectangle within clip space coordinates (i.e. coordinate space for webGL)
 * https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/WebGL_model_view_projection to learn more about clip space
 */
var clipSpaceRect = function (containerRect, canvasRect) {
    var density = window.devicePixelRatio;
    var left = containerRect.left, bottom = containerRect.bottom, width = containerRect.width, height = containerRect.height;
    // The coordinate y-axis is flipped between the DOM and webGL so we must correct for that.
    // Bounding client rect measures the bottom as the distance from the top, i.e.:
    // For DOM, (0, 0) is the top left.
    // In WebGL, (0, 0) is the bottom left.
    var positiveYUpBottom = canvasRect.bottom - (bottom - window.scrollY);
    // Need to account for pixel density - i.e. retina display
    var pixelLeft = (left - canvasRect.left - window.scrollX) * density;
    var pixelBottom = positiveYUpBottom * density;
    var pixelWidth = width * density;
    var pixelHeight = height * density;
    return {
        left: pixelLeft,
        bottom: pixelBottom,
        width: pixelWidth,
        height: pixelHeight,
    };
};
/**
 * Return a rect with the property of being unchanged upon scrolling.
 *
 * The reason this is desirable is because it allows us to not have to re-calculate all our
 * rect's every time a scroll event occurs. This allows for a smooth scroll to occur.
 */
var rectScrollFixed = function (el) {
    var domRect = el.getBoundingClientRect();
    return {
        width: domRect.width,
        height: domRect.height,
        left: domRect.left + window.scrollX,
        right: domRect.right + window.scrollX,
        bottom: domRect.bottom + window.scrollY,
        top: domRect.top + window.scrollY,
        x: domRect.x + window.scrollX,
        y: domRect.y + window.scrollY,
        density: window.devicePixelRatio,
    };
};
/**
 * A map of clip-space rectangles for chart scenes.
 *
 * Allows us to track what region in clip-space each chart scene should be rendered in.
 * The goal is to not have to continually make calls to `getBoundingClientRect` since it is an expsensive operation
 * which causes layouts to be re-calculated: http://dcousineau.com/blog/2013/09/03/high-performance-js-tip/
 */
var ClipSpaceRectMap = /** @class */ (function () {
    function ClipSpaceRectMap(canvas) {
        this.rectMap = {};
        this.canvas = canvas;
        this.updateCanvas();
    }
    /**
     * Update DOMRect for canvas
     */
    ClipSpaceRectMap.prototype.updateCanvas = function () {
        this.canvasRect = this.canvas.getBoundingClientRect();
    };
    /**
     * Updates the rect for the requested chart scene
     */
    ClipSpaceRectMap.prototype.updateChartScene = function (chartSceneId, rect) {
        this.rectMap[chartSceneId] = rect;
    };
    /**
     * Return clip rect for the requested chart scene
     */
    ClipSpaceRectMap.prototype.clipRect = function (chartSceneId) {
        return this.rectMap[chartSceneId] ? clipSpaceRect(this.rectMap[chartSceneId], this.canvasRect) : undefined;
    };
    /**
     * Remove chart scene from rect map
     */
    ClipSpaceRectMap.prototype.removeChartScene = function (chartSceneId) {
        delete this.rectMap[chartSceneId];
    };
    return ClipSpaceRectMap;
}());
/**
 * Handlers the syncing view port across different view port groups.
 *
 * This allows us to have defined groupings of widgets which all efficiently have their viewports synced
 * without utilizing any framework level code.
 *
 * This allows us to have performant syncing of charts.
 */
var ViewportHandler = /** @class */ (function () {
    function ViewportHandler() {
        var _this_1 = this;
        this.viewportManagers = [];
        this.viewportMap = {};
        this.viewportLiveId = {};
        this.managers = function () {
            // NOTE: Providing new reference to a array to prevent manipulation of the internal array from the outside.
            return __spreadArrays(_this_1.viewportManagers);
        };
        this.dispose = function () {
            _this_1.viewportManagers.forEach(function (_c) {
                var id = _c.id;
                return _this_1.remove(id);
            });
        };
        this.startTick = function (_c) {
            var manager = _c.manager, duration = _c.duration, chartSize = _c.chartSize;
            // If chart size is null then it is KPI or Status Grid
            // We do not have to tick for those.
            if (chartSize == null) {
                return;
            }
            var initStart = new Date(new Date().getTime() - duration);
            var initEnd = new Date();
            var viewPortMapKey = manager.viewportGroup != null ? manager.viewportGroup : manager.id;
            var liveIdKey = manager.id;
            var tickRate = (1 / chartSize.width) * duration;
            // If we are adding a chart into an existing group
            // we do nothing because we have one clock for the whole group
            if (liveIdKey in _this_1.viewportLiveId) {
                return;
            }
            _this_1.viewportLiveId[liveIdKey] = {
                viewportGroup: manager.viewportGroup,
            };
            _this_1.viewportLiveId[liveIdKey].intervalId = setInterval(function () {
                var newStart = new Date(Date.now() - duration);
                var newEnd = new Date();
                // Sets the new start and end in the viewport live id for the current manager
                _this_1.viewportMap[viewPortMapKey] = { start: newStart, end: newEnd };
                // Have manager update its own viewport, preventing 'dateRangeChange' events when in live mode
                var isInLiveMode = Boolean(duration);
                manager.updateViewPort({
                    start: newStart,
                    end: newEnd,
                    duration: duration,
                    shouldBlockDateRangeChangedEvent: isInLiveMode,
                });
            }, tickRate);
            _this_1.viewportMap[viewPortMapKey] = { start: initStart, end: initEnd };
            // Sync the chart to the new viewport so we dont need to delay the sync by wait for the interval tick
            _this_1.syncViewPortGroup({
                start: initStart,
                end: initEnd,
                manager: manager,
                duration: duration,
            });
        };
        this.stopTick = function (_c) {
            var manager = _c.manager, viewportGroup = _c.viewportGroup;
            if (manager == null && viewportGroup == null) {
                return;
            }
            var clearInternalClock = function (liveId) {
                if (_this_1.viewportLiveId[liveId] == null)
                    return;
                clearInterval(_this_1.viewportLiveId[liveId].intervalId);
                delete _this_1.viewportLiveId[liveId];
            };
            // Clear the internal clock for all viewports in a group
            if (viewportGroup != null) {
                Object.entries(_this_1.viewportLiveId)
                    .filter(function (_c) {
                    var item = _c[1];
                    return item.viewportGroup === viewportGroup;
                })
                    .forEach(function (_c) {
                    var liveId = _c[0];
                    return clearInternalClock(liveId);
                });
            }
            else if (manager != null) {
                // Clears an internal clock for a single viewport
                clearInternalClock(manager.id);
            }
        };
        this.add = function (_c) {
            var manager = _c.manager, chartSize = _c.chartSize, duration = _c.duration, _d = _c.shouldSync, shouldSync = _d === void 0 ? true : _d;
            _this_1.viewportManagers = __spreadArrays(_this_1.viewportManagers, [manager]);
            /**
             * If the added chart scene is part of a view port group, sync it's viewport to
             * the current viewport groups time span.
             */
            if (manager.viewportGroup && _this_1.viewportMap[manager.viewportGroup] && shouldSync) {
                var shouldBlockDateRangeChangedEvent = Boolean(duration);
                manager.updateViewPort(Object.assign(Object.assign({}, _this_1.viewportMap[manager.viewportGroup]), { duration: duration,
                    shouldBlockDateRangeChangedEvent: shouldBlockDateRangeChangedEvent }));
            }
            // If duration is not null, this means that we want to have live mode
            if (duration != null) {
                _this_1.startTick({ manager: manager, duration: duration, chartSize: chartSize });
            }
        };
        this.remove = function (managerId) {
            var v = _this_1.viewportManagers.find(function (_c) {
                var id = _c.id;
                return id === managerId;
            });
            // Dispose of the chart scene to ensure that the memory is released
            if (v && v.dispose) {
                _this_1.stopTick({ manager: v });
                v.dispose();
            }
            // Remove manager from list of registered view port managers
            _this_1.viewportManagers = _this_1.viewportManagers.filter(function (_c) {
                var id = _c.id;
                return id !== managerId;
            });
        };
        /**
         * Sync all viewports sharing the group of the given chart scene, to have their viewport being at `start`,
         * and ending at `end`.
         *
         * manager - the manager which is the source of this syncing
         */
        this.syncViewPortGroup = function (_c) {
            var start = _c.start, end = _c.end, manager = _c.manager, duration = _c.duration;
            var key = manager.viewportGroup ? manager.viewportGroup : manager.id;
            // Either you are in a group or you are a single chart
            _this_1.viewportMap[key] = { start: start, end: end };
            if (duration == null) {
                _this_1.stopTick({ manager: manager, viewportGroup: manager.viewportGroup });
            }
            var updateViewPort = function (v) {
                var isInLiveMode = Boolean(duration);
                v.updateViewPort({ start: start, end: end, duration: duration, shouldBlockDateRangeChangedEvent: isInLiveMode });
            };
            if (manager.viewportGroup) {
                /** Get all of the groups which belong within the viewport group */
                var managers = _this_1.viewportManagers.filter(function (_c) {
                    var group = _c.viewportGroup;
                    return manager.viewportGroup === group;
                });
                /**  Sync all of the chart scenes within the viewport group. */
                managers.forEach(updateViewPort);
            }
            else {
                /**
                 * No view port group defined, so only update the camera associated with the
                 * scene which emitted the event (no syncing of other charts.)
                 */
                updateViewPort(manager);
            }
        };
    }
    return ViewportHandler;
}());
/* eslint-disable @typescript-eslint/no-use-before-define */
var isChartScene = isValid(function (v) { return v.camera != null; });
/**
 * Render Scene Info
 *
 * Renders a single chart scene, which will represent a single, rectangular view of data
 * within the shared WebGL context.
 *
 * This technique is inspired by https://threejsfundamentals.org/threejs/lessons/threejs-multiple-scenes.html
 * In summary, each chart scene has an HTML element  - and the associated scene is rendered to overlay on the
 * rectangle defined by the given HTML element.
 */
var renderChartScene = function (renderer, _c, _d) {
    var scene = _c.scene, camera = _c.camera;
    var left = _d.left, bottom = _d.bottom, width = _d.width, height = _d.height;
    renderer.setScissor(left, bottom, width, height);
    renderer.setViewport(left, bottom, width, height);
    renderer.render(scene, camera);
};
/**
 * Set the renderer to the size of the screen, adjust for resolution.
 *
 * Needs to be called every time the display size, or resolution changes.
 */
function resizeRendererToDisplaySize(renderer) {
    var canvas = renderer.domElement;
    var width = Math.floor(canvas.clientWidth * window.devicePixelRatio) || 0;
    var height = Math.floor(canvas.clientHeight * window.devicePixelRatio) || 0;
    var needResize = canvas.width !== width || canvas.height !== height;
    if (needResize) {
        renderer.setSize(width, height, false);
    }
    return needResize;
}
/**
 * Create a webGL renderer
 *
 * Creates a single webGL rendering context which can be shared across different visualizations.
 * The primary motivator for sharing a single WebGL context is due to the overhead and limitations on making multiple WebGL Context.
 * Resources such as buffered data and textures cannot be shared across WebGL Contexts, and furthermore, due to performance considerations
 * of have many WebGL Contexts, certain browsers have a hard limit on the number of active WebGL Contexts.
 *
 * Refer to https://stackoverflow.com/questions/59140439/allowing-more-webgl-contexts for additional context.
 */
var createWebGLRenderer = function (viewportHandler) {
    var rectMap;
    /**
     * Add Chart Scene
     *
     * Adds a chart scene to be rendered within the webGL context.
     * Once added, the given `ChartScene` will be part of the animation loop until explicitly removed.
     *
     * shouldSync - determines whether the new scene should sync to the existing view port, or if it
     *                     should instead use the viewport provided with the chart
     */
    var addChartScene = function (_c) {
        var manager = _c.manager, chartSize = _c.chartSize, duration = _c.duration, _d = _c.shouldSync, shouldSync = _d === void 0 ? true : _d;
        return viewportHandler.add({ manager: manager, chartSize: chartSize, duration: duration, shouldSync: shouldSync });
    };
    /**
     * Remove Chart Scene
     *
     * Remove and dispose of a given scene.
     */
    var removeChartScene = function (chartSceneId) {
        mustBeInitialized();
        viewportHandler.remove(chartSceneId);
        rectMap.removeChartScene(chartSceneId);
        fullClearAndRerender();
    };
    /**
     * Initiate Rendering Loop
     *
     * Begins a rendering loop to render all chart streams onto the provided canvas
     */
    var renderer;
    var canvas;
    var viewFrame;
    var viewFrameSizeObserver;
    var fullClearAndRerender = function () {
        if (renderer) {
            // Turn off scissor test to make the clear effect the entire canvas
            renderer.setScissorTest(false);
            // Important to set the clear color again, since the webGL context may have been lost, causing
            // the clear color to be reset to the default.
            renderer.setClearColor(0xffffff, 0);
            renderer.clear();
            renderer.setScissorTest(true);
            // Re-render every chart scene. Necessary since entire canvas has been cleared
            var chartScenes = viewportHandler.managers().filter(isChartScene);
            chartScenes.forEach(render);
        }
    };
    var onScroll = function () {
        if (renderer && canvas) {
            var x = 0;
            var y = 0;
            if (!viewFrame)
                return;
            if ('scrollX' in viewFrame) {
                x = viewFrame.scrollX;
                y = viewFrame.scrollY;
            }
            else {
                x = viewFrame.scrollLeft;
                y = viewFrame.scrollTop;
            }
            var transform = "translate(" + x + "px, " + y + "px)";
            // eslint-disable-next-line no-param-reassign
            renderer.domElement.style.transform = transform;
            rectMap.updateCanvas();
            fullClearAndRerender();
        }
    };
    var onResize = function () {
        mustBeInitialized();
        if (renderer && canvas) {
            resizeRendererToDisplaySize(renderer);
            rectMap.updateCanvas();
            fullClearAndRerender();
        }
    };
    var initRendering = function (renderCanvas, onContextInitialization, viewFrameRef) {
        if (onContextInitialization === void 0) { onContextInitialization = function () { }; }
        rectMap = new ClipSpaceRectMap(renderCanvas);
        canvas = renderCanvas;
        renderer = new WebGLRenderer({ canvas: canvas, alpha: true, antialias: true, preserveDrawingBuffer: true });
        viewFrame = viewFrameRef || window;
        onContextInitialization(renderer.getContext());
        // Enable scissor test, which allows us to render our visualizations to a subset of the canvas
        // https://threejs.org/docs/#api/en/renderers/WebGLRenderer.setScissor
        // https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/scissor
        renderer.setScissorTest(true);
        renderer.setClearColor(0x000000, 0); // transparent clear
        onScroll();
        onResize();
        // setup viewframe size and scroll events
        viewFrame.addEventListener('scroll', onScroll);
        if (viewFrame instanceof Element) {
            viewFrameSizeObserver = new index(onResize);
            viewFrameSizeObserver.observe(viewFrame);
        }
        else {
            viewFrame.addEventListener('resize', onResize);
        }
    };
    /**
     * Enforces that the webgl context must first be initialized.
     *
     * Throws an error when the initialized has failed to occur.
     */
    var mustBeInitialized = function () {
        if (rectMap == null) {
            throw new Error('webgl context must be initialized before it can be utilized. ' +
                'Please refer to https://synchrocharts.com/#/Setup to learn more about how to setup Synchro Charts.');
        }
    };
    var render = function (chartScene) {
        mustBeInitialized();
        var clipSpaceRect = rectMap.clipRect(chartScene.id);
        if (renderer && canvas && clipSpaceRect) {
            renderChartScene(renderer, chartScene, clipSpaceRect);
        }
    };
    var dispose = function () {
        if (renderer) {
            renderer.dispose();
        }
        viewportHandler.dispose();
        /** Release event listeners */
        if (viewFrame) {
            viewFrame.removeEventListener('scroll', onScroll);
            viewFrame.removeEventListener('resize', onResize);
        }
        if (viewFrameSizeObserver) {
            viewFrameSizeObserver.disconnect();
        }
    };
    /**
     * Registers the position and dimension of where the requested chart scene renders to.
     * Clears the previous renderer location if it exists.
     */
    var setChartRect = function (sceneId, rect) {
        mustBeInitialized();
        rectMap.updateChartScene(sceneId, rect);
        fullClearAndRerender();
    };
    /**
     * This must be called every time resolution has changed.
     */
    var onResolutionChange = function () {
        onResize();
    };
    return {
        initRendering: initRendering,
        dispose: dispose,
        render: render,
        addChartScene: addChartScene,
        removeChartScene: removeChartScene,
        setChartRect: setChartRect,
        updateViewPorts: viewportHandler.syncViewPortGroup,
        startTick: viewportHandler.startTick,
        stopTick: viewportHandler.stopTick,
        onResolutionChange: onResolutionChange,
    };
};
// TODO: Rather than exposing this as a singleton, it would be preferred to expose it as
//  a shared context within a component sub-tree.
var webGLRenderer = createWebGLRenderer(new ViewportHandler());
export { index as i, rectScrollFixed as r, webGLRenderer as w };
