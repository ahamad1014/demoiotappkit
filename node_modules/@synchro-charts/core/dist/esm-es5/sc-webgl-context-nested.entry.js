import { r as registerInstance, h } from './index-0c943849.js';
import { D as DataType } from './dataConstants-856cb1e9.js';
// viewport boundaries
var Y_MIN = 0;
var Y_MAX = 5000;
var X_MIN = new Date(1998, 0, 0);
var X_MAX = new Date(2001, 0, 1);
var TEST_DATA_POINT = {
    x: new Date(2001, 0, 0).getTime(),
    y: 0,
};
var TEST_DATA_POINT_2 = {
    x: new Date(2001, 0, 0).getTime(),
    y: 4000,
};
var TEST_2DATA_POINT = {
    x: new Date(1998, 0, 0).getTime(),
    y: 0,
};
var TEST_2DATA_POINT_2 = {
    x: new Date(1998, 0, 0).getTime(),
    y: 4000,
};
var TOOLBAR_HEIGHT = 30;
var SIDE_PANEL_WIDTH = 30;
var FULL_WIDTH_PX = '100vw';
var FULL_HEIGHT_PX = '100vh';
var TOOLBAR_HEIGHT_PX = TOOLBAR_HEIGHT + "px";
var SIDE_PANEL_WIDTH_PX = SIDE_PANEL_WIDTH + "px";
var BODY_HEIGHT_PX = "calc(" + FULL_HEIGHT_PX + " - " + TOOLBAR_HEIGHT_PX + ")";
var ScWebglContextNested = /** @class */ (function () {
    function ScWebglContextNested(hostRef) {
        registerInstance(this, hostRef);
        this.contextPlacement = 'viewport';
    }
    ScWebglContextNested.prototype.render = function () {
        var _this = this;
        var chart = function (x, y) { return (h("div", { style: {
                position: 'absolute',
                left: x + "px",
                top: y + "px",
                height: '500px',
                width: '500px',
            } }, h("sc-line-chart", { widgetId: x + y + "id", dataStreams: [
                {
                    id: 'test',
                    color: 'black',
                    name: 'test stream',
                    data: [TEST_2DATA_POINT, TEST_2DATA_POINT_2, TEST_DATA_POINT, TEST_DATA_POINT_2],
                    resolution: 0,
                    dataType: DataType.NUMBER,
                },
            ], viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX } }))); };
        var selectOption = function (o) { return (h("option", { value: o, selected: o === _this.contextPlacement }, o)); };
        var toolbar = (h("div", { style: { height: TOOLBAR_HEIGHT_PX, width: FULL_WIDTH_PX, borderBottom: '1px solid black' } }, h("label", { htmlFor: "context" }, "Select context placement:"), h("select", { id: "context", name: "context", ref: function (el) {
                _this.selectList = el;
            }, onChange: function () {
                var _a;
                _this.contextPlacement = (_a = _this.selectList) === null || _a === void 0 ? void 0 : _a.value;
            } }, selectOption('viewport'), selectOption('element'))));
        var sidePanel = (h("div", { style: {
                width: SIDE_PANEL_WIDTH_PX,
                background: 'white',
                position: 'relative',
                resize: 'horizontal',
                overflow: 'auto',
            } }, "Resizeable Side Panel"));
        return (h("div", { style: {
                height: FULL_HEIGHT_PX,
                width: FULL_WIDTH_PX,
            }, key: this.contextPlacement }, toolbar, h("div", { style: {
                display: 'grid',
                width: '100%',
                gridTemplateColumns: 'max-content auto max-content',
                gridGap: '1px',
                background: 'black',
                height: BODY_HEIGHT_PX,
            } }, sidePanel, h("div", { style: {
                overflow: 'scroll',
                position: 'relative',
                height: '100%',
                width: '100%',
                background: 'white',
            }, ref: function (el) {
                _this.elementRef = el;
            } }, h("div", null, h("div", null, h("div", null, h("div", { style: {
                position: 'absolute',
                height: '2000px',
                width: '2000px',
            } }, chart(0, 0), chart(500, 500), chart(1000, 1000))), h("div", null)), this.contextPlacement === 'element' && h("sc-webgl-context", { viewFrame: this.elementRef }))), sidePanel), this.contextPlacement === 'viewport' && h("sc-webgl-context", null)));
    };
    return ScWebglContextNested;
}());
export { ScWebglContextNested as sc_webgl_context_nested };
