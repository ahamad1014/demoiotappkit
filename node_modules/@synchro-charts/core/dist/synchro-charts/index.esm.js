export{a as COMPARATOR_MAP,C as COMPARISON_OPERATOR,D as DATA_ALIGNMENT,L as LEGEND_POSITION,c as STATUS_ICONS,S as ScaleType,b as StatusIcon}from"./p-063edcd0.js";export{C as ChartType,D as DataType,S as StreamType,T as TREND_TYPE}from"./p-7e2c0687.js";export{c as NO_DATA_PRESENT_HEADER,d as NO_DATA_PRESENT_SUB_HEADER,a as NO_DATA_STREAMS_PRESENT_HEADER,b as NO_DATA_STREAMS_PRESENT_SUB_HEADER,N as NO_VALUE_PRESENT}from"./p-7747df38.js";import"./p-2e85d2ee.js";import{S as e}from"./p-fe9c1440.js";export{g as getThresholds}from"./p-aa8712f2.js";import"./p-45352c6b.js";import"./p-6b1d36dc.js";import"./p-e2758593.js";export{b as breachedThreshold}from"./p-d4ada2ef.js";import"./p-89fc07b9.js";const s=()=>{let a=[],s=Date.now(),t=Date.now(),r=0;const p=setInterval(()=>{r+=1},e/80),E=setInterval(()=>{t=Date.now(),a.push(r/Math.max((t-s)/e,.005)),s=t,r=0},e/4);return{reset:()=>{r=0,t=Date.now(),s=Date.now(),a=[]},fps:()=>{const e=[...a].sort(),s=e.length,t=Math.ceil(s/2),r=s%2==0?(e[t]+e[t-1])/2:e[t-1],p=e.reduce((a,e)=>a+e,0);return a=[],{average:p/s,median:r}},stop:()=>{clearInterval(p),clearInterval(E)}}};export{s as initFPSMetering}