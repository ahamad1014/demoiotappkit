import{c as t}from"./p-fe9c1440.js";import{c as n,u as e}from"./p-b18ab5ec.js";const r=e(n((function(t,n){function e(t){return"object"!=typeof t||"toString"in t?t:Object.prototype.toString.call(t).slice(8,-1)}Object.defineProperty(n,"__esModule",{value:!0});var r="object"==typeof process&&!0;function o(t,n){if(!t){if(r)throw new Error("Invariant failed");throw new Error(n())}}n.invariant=o;var u=Object.prototype.hasOwnProperty,a=Array.prototype.splice,c=Object.prototype.toString;function i(t){return c.call(t).slice(8,-1)}var f=Object.assign||function(t,n){return p(n).forEach((function(e){u.call(n,e)&&(t[e]=n[e])})),t},p="function"==typeof Object.getOwnPropertySymbols?function(t){return Object.keys(t).concat(Object.getOwnPropertySymbols(t))}:function(t){return Object.keys(t)};function s(t){return Array.isArray(t)?f(t.constructor(t.length),t):"Map"===i(t)?new Map(t):"Set"===i(t)?new Set(t):t&&"object"==typeof t?f(Object.create(Object.getPrototypeOf(t)),t):t}var d=function(){function t(){this.commands=f({},y),this.update=this.update.bind(this),this.update.extend=this.extend=this.extend.bind(this),this.update.isEquals=function(t,n){return t===n},this.update.newContext=function(){return(new t).update}}return Object.defineProperty(t.prototype,"isEquals",{get:function(){return this.update.isEquals},set:function(t){this.update.isEquals=t},enumerable:!0,configurable:!0}),t.prototype.extend=function(t,n){this.commands[t]=n},t.prototype.update=function(t,n){var e=this,r="function"==typeof n?{$apply:n}:n;Array.isArray(t)&&Array.isArray(r)||o(!Array.isArray(r),(function(){return"update(): You provided an invalid spec to update(). The spec may not contain an array except as the value of $set, $push, $unshift, $splice or any custom command allowing an array value."})),o("object"==typeof r&&null!==r,(function(){return"update(): You provided an invalid spec to update(). The spec and every included key path must be plain objects containing one of the following commands: "+Object.keys(e.commands).join(", ")+"."}));var a=t;return p(r).forEach((function(n){if(u.call(e.commands,n)){var o=t===a;a=e.commands[n](r[n],a,r,t),o&&e.isEquals(a,t)&&(a=t)}else{var c="Map"===i(t)?e.update(t.get(n),r[n]):e.update(t[n],r[n]),f="Map"===i(a)?a.get(n):a[n];e.isEquals(c,f)&&(void 0!==c||u.call(t,n))||(a===t&&(a=s(t)),"Map"===i(a)?a.set(n,c):a[n]=c)}})),a},t}();n.Context=d;var y={$push:function(t,n,e){return b(n,e,"$push"),t.length?n.concat(t):n},$unshift:function(t,n,e){return b(n,e,"$unshift"),t.length?t.concat(n):n},$splice:function(t,n,r,u){return function(t,n){o(Array.isArray(t),(function(){return"Expected $splice target to be an array; got "+e(t)})),l(n.$splice)}(n,r),t.forEach((function(t){l(t),n===u&&t.length&&(n=s(u)),a.apply(n,t)})),n},$set:function(t,n,e){return function(t){o(1===Object.keys(t).length,(function(){return"Cannot have more than one key in an object with $set"}))}(e),t},$toggle:function(t,n){h(t,"$toggle");var e=t.length?s(n):n;return t.forEach((function(t){e[t]=!n[t]})),e},$unset:function(t,n,e,r){return h(t,"$unset"),t.forEach((function(t){Object.hasOwnProperty.call(n,t)&&(n===r&&(n=s(r)),delete n[t])})),n},$add:function(t,n,e,r){return g(n,"$add"),h(t,"$add"),"Map"===i(n)?t.forEach((function(t){var e=t[0],o=t[1];n===r&&n.get(e)!==o&&(n=s(r)),n.set(e,o)})):t.forEach((function(t){n!==r||n.has(t)||(n=s(r)),n.add(t)})),n},$remove:function(t,n,e,r){return g(n,"$remove"),h(t,"$remove"),t.forEach((function(t){n===r&&n.has(t)&&(n=s(r)),n.delete(t)})),n},$merge:function(t,n,r,u){var a,c;return a=n,o((c=t)&&"object"==typeof c,(function(){return"update(): $merge expects a spec of type 'object'; got "+e(c)})),o(a&&"object"==typeof a,(function(){return"update(): $merge expects a target of type 'object'; got "+e(a)})),p(t).forEach((function(e){t[e]!==n[e]&&(n===u&&(n=s(u)),n[e]=t[e])})),n},$apply:function(t,n){var r;return o("function"==typeof(r=t),(function(){return"update(): expected spec of $apply to be a function; got "+e(r)+"."})),t(n)}},$=new d;function b(t,n,r){o(Array.isArray(t),(function(){return"update(): expected target of "+e(r)+" to be an array; got "+e(t)+"."})),h(n[r],r)}function h(t,n){o(Array.isArray(t),(function(){return"update(): expected spec of "+e(n)+" to be an array; got "+e(t)+". Did you forget to wrap your parameter in an array?"}))}function l(t){o(Array.isArray(t),(function(){return"update(): expected spec of $splice to be an array of arrays; got "+e(t)+". Did you forget to wrap your parameters in an array?"}))}function g(t,n){var r=i(t);o("Map"===r||"Set"===r,(function(){return"update(): "+e(n)+" expects a target of type Set or Map; got "+e(r)}))}n.isEquals=$.update.isEquals,n.extend=$.extend,n.default=$.update,n.default.default=t.exports=f(n.default,n)}))),o=(n,e)=>{if(0===n)return"raw data";const{day:r,hour:o,minute:u,seconds:a}=t(n),c=t=>t>1?"s":"";return 0!==r?`${r} day${c(r)} ${e}`:0!==o?`${o} hour${c(o)} ${e}`:0!==u?`${u} minute${c(u)} ${e}`:0!==a?`${a} second${c(a)} ${e}`:"N/A"},u=(t,n,e)=>{const o=t.findIndex(t=>t.id===e);return o>=0?r(t,{[o]:{$set:{id:e,name:n}}}):[...t,{name:n,id:e}]};export{o as g,u}