'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0b3ed36d.js');
const dataConstants = require('./dataConstants-02642889.js');

// viewport boundaries
const Y_MIN = 0;
const Y_MAX = 5000;
const X_MIN = new Date(1998, 0, 0);
const X_MAX = new Date(2001, 0, 1);
const TEST_DATA_POINT = {
    x: new Date(2001, 0, 0).getTime(),
    y: 0,
};
const TEST_DATA_POINT_2 = {
    x: new Date(2001, 0, 0).getTime(),
    y: 4000,
};
const TEST_2DATA_POINT = {
    x: new Date(1998, 0, 0).getTime(),
    y: 0,
};
const TEST_2DATA_POINT_2 = {
    x: new Date(1998, 0, 0).getTime(),
    y: 4000,
};
const TOOLBAR_HEIGHT = 30;
const SIDE_PANEL_WIDTH = 30;
const FULL_WIDTH_PX = '100vw';
const FULL_HEIGHT_PX = '100vh';
const TOOLBAR_HEIGHT_PX = `${TOOLBAR_HEIGHT}px`;
const SIDE_PANEL_WIDTH_PX = `${SIDE_PANEL_WIDTH}px`;
const BODY_HEIGHT_PX = `calc(${FULL_HEIGHT_PX} - ${TOOLBAR_HEIGHT_PX})`;
const ScWebglContextNested = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.contextPlacement = 'viewport';
    }
    render() {
        const chart = (x, y) => (index.h("div", { style: {
                position: 'absolute',
                left: `${x}px`,
                top: `${y}px`,
                height: '500px',
                width: '500px',
            } }, index.h("sc-line-chart", { widgetId: `${x + y}id`, dataStreams: [
                {
                    id: 'test',
                    color: 'black',
                    name: 'test stream',
                    data: [TEST_2DATA_POINT, TEST_2DATA_POINT_2, TEST_DATA_POINT, TEST_DATA_POINT_2],
                    resolution: 0,
                    dataType: dataConstants.DataType.NUMBER,
                },
            ], viewport: { start: X_MIN, end: X_MAX, yMin: Y_MIN, yMax: Y_MAX } })));
        const selectOption = (o) => (index.h("option", { value: o, selected: o === this.contextPlacement }, o));
        const toolbar = (index.h("div", { style: { height: TOOLBAR_HEIGHT_PX, width: FULL_WIDTH_PX, borderBottom: '1px solid black' } }, index.h("label", { htmlFor: "context" }, "Select context placement:"), index.h("select", { id: "context", name: "context", ref: el => {
                this.selectList = el;
            }, onChange: () => {
                var _a;
                this.contextPlacement = (_a = this.selectList) === null || _a === void 0 ? void 0 : _a.value;
            } }, selectOption('viewport'), selectOption('element'))));
        const sidePanel = (index.h("div", { style: {
                width: SIDE_PANEL_WIDTH_PX,
                background: 'white',
                position: 'relative',
                resize: 'horizontal',
                overflow: 'auto',
            } }, "Resizeable Side Panel"));
        return (index.h("div", { style: {
                height: FULL_HEIGHT_PX,
                width: FULL_WIDTH_PX,
            }, key: this.contextPlacement }, toolbar, index.h("div", { style: {
                display: 'grid',
                width: '100%',
                gridTemplateColumns: 'max-content auto max-content',
                gridGap: '1px',
                background: 'black',
                height: BODY_HEIGHT_PX,
            } }, sidePanel, index.h("div", { style: {
                overflow: 'scroll',
                position: 'relative',
                height: '100%',
                width: '100%',
                background: 'white',
            }, ref: el => {
                this.elementRef = el;
            } }, index.h("div", null, index.h("div", null, index.h("div", null, index.h("div", { style: {
                position: 'absolute',
                height: '2000px',
                width: '2000px',
            } }, chart(0, 0), chart(500, 500), chart(1000, 1000))), index.h("div", null)), this.contextPlacement === 'element' && index.h("sc-webgl-context", { viewFrame: this.elementRef }))), sidePanel), this.contextPlacement === 'viewport' && index.h("sc-webgl-context", null)));
    }
};

exports.sc_webgl_context_nested = ScWebglContextNested;
