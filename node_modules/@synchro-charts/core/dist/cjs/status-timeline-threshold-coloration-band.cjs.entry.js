'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0b3ed36d.js');
const constants = require('./constants-d154fa06.js');
const dataConstants = require('./dataConstants-02642889.js');
require('./index-0fadf3ad.js');
const time = require('./time-3c18516e.js');
const constants$1 = require('./constants-aac4f7fd.js');

const urlParams = new URLSearchParams(window.location.search);
const isDiscreteNumericData = urlParams.get('isDiscreteNumericData');
const isStringData = urlParams.get('isStringData');
const data = constants$1.TEST_DATA_POINT_STANDARD;
const dataType = isDiscreteNumericData === '1' ? dataConstants.DataType.STRING : dataConstants.DataType.NUMBER;
data.y = 2000;
if (isDiscreteNumericData === '1') {
    data.y = 2000;
}
if (isStringData === '1') {
    data.y = 'test';
}
const StatusTimelineThresholdBand = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
    }
    render() {
        return (index.h("div", null, index.h("sc-status-timeline", { alarms: { expires: time.MINUTE_IN_MS }, dataStreams: [
                {
                    id: 'test',
                    color: 'black',
                    name: 'test stream',
                    aggregates: { [time.MINUTE_IN_MS]: [data] },
                    data: [],
                    resolution: time.MINUTE_IN_MS,
                    dataType,
                },
            ], annotations: {
                y: [
                    {
                        value: isStringData ? 'test' : 2000,
                        label: {
                            text: 'y label',
                            show: true,
                        },
                        showValue: true,
                        color: 'blue',
                        comparisonOperator: constants.COMPARISON_OPERATOR.EQUAL,
                    },
                ],
                thresholdOptions: {
                    showColor: true,
                },
            }, widgetId: "test-id", size: {
                width: 500,
                height: 500,
            }, viewport: { yMin: constants$1.Y_MIN, yMax: constants$1.Y_MAX, start: constants$1.X_MIN, end: constants$1.X_MAX } }), index.h("sc-webgl-context", null)));
    }
};

exports.status_timeline_threshold_coloration_band = StatusTimelineThresholdBand;
