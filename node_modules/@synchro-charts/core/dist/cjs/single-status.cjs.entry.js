'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0b3ed36d.js');
require('./constants-d154fa06.js');
const dataConstants = require('./dataConstants-02642889.js');
require('./index-0fadf3ad.js');
const time = require('./time-3c18516e.js');
require('./utils-43efeece.js');
require('./predicates-739d43b9.js');
require('./number-46ecc337.js');
require('./getDataPoints-726a614b.js');
require('./three.module-c70df973.js');
const webglContext = require('./webglContext-8b04e2f6.js');
const chartScene = require('./chartScene-0aa1a85b.js');
require('./_commonjsHelpers-ac2d0785.js');
require('./v4-2c909cec.js');
require('./index-64084e90.js');
require('./clipSpaceConversion-1219a501.js');
require('./getDistanceFromDuration-95575c56.js');
const chartSize = require('./chartSize-ddb61505.js');

// viewport boundaries
const X_MIN = new Date(2000, 0, 0);
const X_MAX = new Date(2000, 0, 1);
const WIDTH = X_MAX.getTime() - X_MIN.getTime();
const TEST_DATA_POINT_1 = {
    x: X_MIN.getTime() + WIDTH / 3,
    y: 12,
};
const ScSingleStatus = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
    }
    componentDidLoad() {
        const container = this.el.querySelector('#test-container');
        const scene = chartScene.chartScene({
            alarms: { expires: time.DAY_IN_MS },
            viewport: {
                start: X_MIN,
                end: X_MAX,
                yMin: 0,
                yMax: chartScene.HEIGHT,
            },
            dataStreams: [
                {
                    id: 'test-stream',
                    name: 'test-stream-name',
                    color: 'black',
                    resolution: time.DAY_IN_MS,
                    aggregates: {
                        [time.DAY_IN_MS]: [TEST_DATA_POINT_1],
                    },
                    data: [],
                    dataType: dataConstants.DataType.NUMBER,
                },
            ],
            container,
            chartSize: chartSize.CHART_SIZE,
            minBufferSize: 100,
            bufferFactor: 2,
            thresholdOptions: {
                showColor: false,
            },
            thresholds: [],
        });
        webglContext.webGLRenderer.addChartScene({ manager: scene });
        const rect = container.getBoundingClientRect();
        webglContext.webGLRenderer.setChartRect(scene.id, Object.assign({ density: 1 }, rect.toJSON()));
    }
    render() {
        return (index.h("sc-webgl-context", null, index.h("div", { id: "test-container", style: { width: `${chartSize.CHART_SIZE.width}px`, height: `${chartSize.CHART_SIZE.height}px` } })));
    }
    get el() { return index.getElement(this); }
};

exports.single_status = ScSingleStatus;
