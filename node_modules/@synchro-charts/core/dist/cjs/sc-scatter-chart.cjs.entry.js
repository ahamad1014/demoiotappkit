'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0b3ed36d.js');
const constants = require('./constants-d154fa06.js');
const dataConstants = require('./dataConstants-02642889.js');
require('./index-0fadf3ad.js');
require('./time-3c18516e.js');
const utils = require('./utils-43efeece.js');
require('./predicates-739d43b9.js');
require('./number-46ecc337.js');
require('./getDataPoints-726a614b.js');
const three_module = require('./three.module-c70df973.js');
require('./_commonjsHelpers-ac2d0785.js');
require('./v4-2c909cec.js');
require('./index-64084e90.js');
const clipSpaceConversion = require('./clipSpaceConversion-1219a501.js');
const pointMesh = require('./pointMesh-6969f0d9.js');
const validate = require('./validate-270f6bac.js');
const chartDefaults = require('./chartDefaults-b13cbd33.js');

const chartScene = ({ dataStreams, container, viewport, minBufferSize, bufferFactor, onUpdate, thresholdOptions, thresholds, }) => {
    const scene = new three_module.Scene();
    const toClipSpace = clipSpaceConversion.clipSpaceConversion(viewport);
    const numberThresholds = utils.getNumberThresholds(thresholds);
    // Create and add meshes to the chart scene
    const meshList = [];
    meshList[pointMesh.POINT_MESH_INDEX] = pointMesh.pointMesh({
        dataStreams,
        minBufferSize,
        bufferFactor,
        toClipSpace,
        thresholdOptions,
        thresholds: numberThresholds,
    });
    meshList.forEach(mesh => scene.add(mesh));
    return clipSpaceConversion.constructChartScene({ scene, viewport, container, toClipSpace, onUpdate });
};
const maxDataPointsRendered = (points) => points.geometry.attributes.position.array.length / pointMesh.NUM_POSITION_COMPONENTS;
const updateChartScene = ({ scene, dataStreams, chartSize, container, viewport, hasDataChanged, bufferFactor, minBufferSize, onUpdate, thresholdOptions, thresholds, hasAnnotationChanged, }) => {
    const points = scene.scene.children[pointMesh.POINT_MESH_INDEX];
    // If the amount of data being sent to the chart scene surpasses the size of the buffers within the
    // chart scene, we must fully recreate the chart scene. This is a costly operation.
    const isDataOverflowingBuffer = maxDataPointsRendered(points) < clipSpaceConversion.numDataPoints(dataStreams);
    if (isDataOverflowingBuffer || clipSpaceConversion.needsNewClipSpace(viewport, scene.toClipSpace) || hasAnnotationChanged) {
        return chartScene({
            dataStreams,
            chartSize,
            container,
            viewport,
            minBufferSize,
            bufferFactor,
            onUpdate,
            thresholdOptions,
            thresholds,
        });
    }
    if (hasDataChanged) {
        pointMesh.updatePointMesh(dataStreams, points, scene.toClipSpace);
    }
    // Return existing scene.
    return scene;
};

// The initial size of buffers. The larger this is, the more memory allocated up front per chart.
// The lower this number is, more likely that charts will have to re-initialize there buffers which is
// a slow operation (CPU bound).
const DEFAULT_MIN_BUFFER_SIZE = 1000;
const DEFAULT_BUFFER_FACTOR = 2;
const tooltip = (props) => (index.h("sc-tooltip", Object.assign({}, props, { visualizesAlarms: false, supportString: false, dataAlignment: constants.DATA_ALIGNMENT.EITHER })));
const ScScatterChart = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.gestures = true;
        /** Status */
        this.isEditing = false;
        /** Memory Management */
        this.bufferFactor = DEFAULT_BUFFER_FACTOR;
        this.minBufferSize = DEFAULT_MIN_BUFFER_SIZE;
    }
    componentWillRender() {
        validate.validate(this);
    }
    render() {
        return (index.h("sc-size-provider", { size: this.size, renderFunc: (rect) => (index.h("sc-webgl-base-chart", { supportedDataTypes: [dataConstants.DataType.NUMBER], axis: this.axis, gestures: this.gestures, configId: this.widgetId, legend: this.legend, annotations: this.annotations, trends: this.trends, updateChartScene: updateChartScene, createChartScene: chartScene, size: Object.assign(Object.assign(Object.assign({}, chartDefaults.DEFAULT_CHART_CONFIG.size), this.size), rect), dataStreams: this.dataStreams, alarms: this.alarms, viewport: this.viewport, minBufferSize: this.minBufferSize, bufferFactor: this.bufferFactor, isEditing: this.isEditing, renderTooltip: tooltip, supportString: false, visualizesAlarms: false, messageOverrides: this.messageOverrides })) }));
    }
};

exports.sc_scatter_chart = ScScatterChart;
