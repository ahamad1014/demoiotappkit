'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const constants = require('./constants-d154fa06.js');
const dataConstants = require('./dataConstants-02642889.js');
const terms = require('./terms-4f03f33b.js');
require('./index-0fadf3ad.js');
const time = require('./time-3c18516e.js');
const utils = require('./utils-43efeece.js');
require('./predicates-739d43b9.js');
require('./number-46ecc337.js');
require('./dataFilters-b9b845d5.js');
const breachedThreshold = require('./breachedThreshold-19580034.js');
require('./getDataPoints-726a614b.js');

const MAX_FPS_TRACKED = 80;
const initFPSMetering = () => {
    let trackedFPS = [];
    let lastLoop = Date.now();
    let thisLoop = Date.now();
    let framesProcessed = 0;
    const loop = setInterval(() => {
        framesProcessed += 1;
    }, time.SECOND_IN_MS / MAX_FPS_TRACKED);
    const updateFPS = setInterval(() => {
        thisLoop = Date.now();
        const duration = (thisLoop - lastLoop) / time.SECOND_IN_MS;
        trackedFPS.push(framesProcessed / Math.max(duration, 0.005));
        lastLoop = thisLoop;
        framesProcessed = 0;
    }, time.SECOND_IN_MS / 4);
    return {
        reset: () => {
            framesProcessed = 0;
            thisLoop = Date.now();
            lastLoop = Date.now();
            trackedFPS = [];
        },
        fps: () => {
            const sortedFPS = [...trackedFPS].sort();
            const len = sortedFPS.length;
            const mid = Math.ceil(len / 2);
            const median = len % 2 === 0 ? (sortedFPS[mid] + sortedFPS[mid - 1]) / 2 : sortedFPS[mid - 1];
            const sum = sortedFPS.reduce((total, num) => total + num, 0);
            const average = sum / len;
            trackedFPS = [];
            return { average, median };
        },
        stop: () => {
            clearInterval(loop);
            clearInterval(updateFPS);
        },
    };
};

exports.COMPARATOR_MAP = constants.COMPARATOR_MAP;
Object.defineProperty(exports, 'COMPARISON_OPERATOR', {
    enumerable: true,
    get: function () {
        return constants.COMPARISON_OPERATOR;
    }
});
Object.defineProperty(exports, 'DATA_ALIGNMENT', {
    enumerable: true,
    get: function () {
        return constants.DATA_ALIGNMENT;
    }
});
Object.defineProperty(exports, 'LEGEND_POSITION', {
    enumerable: true,
    get: function () {
        return constants.LEGEND_POSITION;
    }
});
exports.STATUS_ICONS = constants.STATUS_ICONS;
Object.defineProperty(exports, 'ScaleType', {
    enumerable: true,
    get: function () {
        return constants.ScaleType;
    }
});
Object.defineProperty(exports, 'StatusIcon', {
    enumerable: true,
    get: function () {
        return constants.StatusIcon;
    }
});
Object.defineProperty(exports, 'ChartType', {
    enumerable: true,
    get: function () {
        return dataConstants.ChartType;
    }
});
Object.defineProperty(exports, 'DataType', {
    enumerable: true,
    get: function () {
        return dataConstants.DataType;
    }
});
Object.defineProperty(exports, 'StreamType', {
    enumerable: true,
    get: function () {
        return dataConstants.StreamType;
    }
});
Object.defineProperty(exports, 'TREND_TYPE', {
    enumerable: true,
    get: function () {
        return dataConstants.TREND_TYPE;
    }
});
exports.NO_DATA_PRESENT_HEADER = terms.NO_DATA_PRESENT_HEADER;
exports.NO_DATA_PRESENT_SUB_HEADER = terms.NO_DATA_PRESENT_SUB_HEADER;
exports.NO_DATA_STREAMS_PRESENT_HEADER = terms.NO_DATA_STREAMS_PRESENT_HEADER;
exports.NO_DATA_STREAMS_PRESENT_SUB_HEADER = terms.NO_DATA_STREAMS_PRESENT_SUB_HEADER;
exports.NO_VALUE_PRESENT = terms.NO_VALUE_PRESENT;
exports.getThresholds = utils.getThresholds;
exports.breachedThreshold = breachedThreshold.breachedThreshold;
exports.initFPSMetering = initFPSMetering;
