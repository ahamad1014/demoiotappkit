'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0b3ed36d.js');
const constants = require('./constants-d154fa06.js');
require('./terms-4f03f33b.js');
require('./number-46ecc337.js');
const getDataPoints = require('./getDataPoints-726a614b.js');
const Value = require('./Value-3156abf4.js');

const ScTableCell = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        /**
         * Return the most recent value from the data stream present.
         *
         * If no such value exists, returns `undefined`.
         */
        this.value = () => {
            const { dataStream = undefined } = this.cell || {};
            const points = dataStream ? getDataPoints.getDataPoints(dataStream, dataStream.resolution) : [];
            if (points.length === 0) {
                return undefined;
            }
            // data is sorted chronological, from old to more recent - making this the latest value.
            return points[points.length - 1].y;
        };
    }
    render() {
        const { dataStream = undefined, color = undefined, icon = undefined } = this.cell || {};
        const error = dataStream && dataStream.error;
        const isLoading = dataStream && dataStream.isLoading;
        if (error != null) {
            /** Error */
            // If there is an error associated with the data stream, we cannot necessarily trust what
            // the data stream is telling us - i.e. it may be stale. So even if we could display some
            // existing data, error UX takes precedence.
            return (index.h("div", { class: "error" }, index.h("sc-chart-icon", { name: constants.StatusIcon.ERROR }), error));
        }
        if (isLoading) {
            /** Loading */
            // Loading is render blocking, so even if we have a value we could display, we display the spinner
            return (index.h("div", { class: "loading-wrapper" }, index.h("sc-loading-spinner", null)));
        }
        /** Display cell value */
        return (this.cell &&
            this.cell.dataStream && (index.h("span", { style: { color: color || 'unset', display: 'flex' } }, icon && index.h("sc-chart-icon", { name: icon }), index.h(Value.Value, { value: this.value() }))));
    }
};

exports.sc_table_cell = ScTableCell;
