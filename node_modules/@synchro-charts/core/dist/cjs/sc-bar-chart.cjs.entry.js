'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-0b3ed36d.js');
const constants = require('./constants-d154fa06.js');
const dataConstants = require('./dataConstants-02642889.js');
require('./index-0fadf3ad.js');
require('./time-3c18516e.js');
require('./utils-43efeece.js');
require('./predicates-739d43b9.js');
require('./number-46ecc337.js');
require('./getDataPoints-726a614b.js');
require('./three.module-c70df973.js');
require('./_commonjsHelpers-ac2d0785.js');
require('./v4-2c909cec.js');
require('./index-64084e90.js');
require('./clipSpaceConversion-1219a501.js');
require('./getDistanceFromDuration-95575c56.js');
const chartScene = require('./chartScene-46088477.js');
const validate = require('./validate-270f6bac.js');
const chartDefaults = require('./chartDefaults-b13cbd33.js');

// The initial size of buffers. The larger this is, the more memory allocated up front per chart.
// The lower this number is, more likely that charts will have to re-initialize there buffers which is
// a slow operation (CPU bound).
const DEFAULT_MIN_BUFFER_SIZE = 1000;
const DEFAULT_BUFFER_FACTOR = 2;
const tooltip = (props) => (index.h("sc-tooltip", Object.assign({}, props, { visualizesAlarms: false, supportString: false, dataAlignment: constants.DATA_ALIGNMENT.EITHER })));
const ScBarChart = class {
    constructor(hostRef) {
        index.registerInstance(this, hostRef);
        this.gestures = true;
        /** Status */
        this.isEditing = false;
        /** Memory Management */
        this.bufferFactor = DEFAULT_BUFFER_FACTOR;
        this.minBufferSize = DEFAULT_MIN_BUFFER_SIZE;
    }
    componentWillRender() {
        validate.validate(this);
    }
    render() {
        return (index.h("sc-size-provider", { size: this.size, renderFunc: (size) => (index.h("sc-webgl-base-chart", { supportedDataTypes: [dataConstants.DataType.NUMBER], axis: this.axis, gestures: this.gestures, configId: this.widgetId, legend: this.legend, annotations: this.annotations, trends: this.trends, updateChartScene: chartScene.updateChartScene, createChartScene: chartScene.chartScene, size: Object.assign(Object.assign(Object.assign({}, chartDefaults.DEFAULT_CHART_CONFIG.size), this.size), size), dataStreams: this.dataStreams, alarms: this.alarms, viewport: this.viewport, minBufferSize: this.minBufferSize, bufferFactor: this.bufferFactor, isEditing: this.isEditing, yRangeStartFromZero: true, renderTooltip: tooltip, supportString: false, visualizesAlarms: false, messageOverrides: this.messageOverrides })) }));
    }
};

exports.sc_bar_chart = ScBarChart;
