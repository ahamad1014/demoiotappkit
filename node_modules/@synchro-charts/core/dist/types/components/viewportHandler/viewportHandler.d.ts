import { ViewPortManager } from './types';
import { SizeConfig } from '../../utils/dataTypes';
/**
 * Handlers the syncing view port across different view port groups.
 *
 * This allows us to have defined groupings of widgets which all efficiently have their viewports synced
 * without utilizing any framework level code.
 *
 * This allows us to have performant syncing of charts.
 */
export declare class ViewportHandler<T extends ViewPortManager> {
    private viewportManagers;
    private viewportMap;
    private viewportLiveId;
    managers: () => T[];
    dispose: () => void;
    startTick: ({ manager, duration, chartSize }: {
        manager: T;
        duration: number;
        chartSize?: SizeConfig | undefined;
    }) => void;
    stopTick: ({ manager, viewportGroup }: {
        manager?: T | undefined;
        viewportGroup?: string | undefined;
    }) => void;
    add: ({ manager, chartSize, duration, shouldSync, }: {
        manager: T;
        chartSize?: SizeConfig | undefined;
        duration?: number | undefined;
        shouldSync?: boolean | undefined;
    }) => void;
    remove: (managerId: string) => void;
    /**
     * Sync all viewports sharing the group of the given chart scene, to have their viewport being at `start`,
     * and ending at `end`.
     *
     * manager - the manager which is the source of this syncing
     */
    syncViewPortGroup: ({ start, end, manager, duration, }: {
        start: Date;
        end: Date;
        manager: T;
        duration?: number | undefined;
    }) => void;
}
