import { Selection } from 'd3-selection';
import { YAnnotation } from '../../types';
import { ViewPort } from '../../../../../utils/dataTypes';
export declare const HANDLE_OFFSET_Y = -11;
export declare const HANDLE_WIDTH = 45;
export declare const SMALL_HANDLE_WIDTH = 18;
export declare const TEXT_SELECTOR = "text.y-text";
export declare const TEXT_VALUE_SELECTOR = "text.y-value-text";
export declare const ANNOTATION_GROUP_SELECTOR = "g.y-annotation";
export declare const ANNOTATION_GROUP_SELECTOR_EDITABLE = "g.y-annotation-editable";
export declare const LINE_SELECTOR = "line.y-line";
export declare const DRAGGABLE_HANDLE_SELECTOR = "rect.y-annotation";
export declare const DRAGGABLE_LINE_ONE_SELECTOR = "line.y-handle-one";
export declare const DRAGGABLE_LINE_TWO_SELECTOR = "line.y-handle-two";
export declare const ELEMENT_GROUP_SELECTOR = "g.y-elements-group";
export declare const renderYAnnotationsEditable: ({ container, yAnnotations, viewport, resolution, size: { width, height }, }: {
    container: SVGElement;
    yAnnotations: YAnnotation[];
    viewport: ViewPort;
    resolution: number;
    size: {
        width: number;
        height: number;
    };
}) => Selection<SVGRectElement, YAnnotation, SVGElement, any>;
export declare const renderYAnnotations: ({ container, yAnnotations, viewport, resolution, size: { width, height }, }: {
    container: SVGElement;
    yAnnotations: YAnnotation[];
    viewport: ViewPort;
    resolution: number;
    size: {
        width: number;
        height: number;
    };
}) => void;
export declare const removeYAnnotations: ({ container }: {
    container: SVGElement;
}) => void;
