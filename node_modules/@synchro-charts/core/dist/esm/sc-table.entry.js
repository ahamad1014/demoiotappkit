import { r as registerInstance, e as createEvent, h } from './index-0c943849.js';
import './constants-35570903.js';
import './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import { p as parseDuration } from './time-b732648c.js';
import { i as isThreshold } from './utils-96fe4147.js';
import { b as isMinimalStaticViewport } from './predicates-67461267.js';
import './number-a7331d73.js';
import './dataFilters-2772c214.js';
import './breachedThreshold-500f9d58.js';
import './getDataPoints-6f8b4e89.js';
import './three.module-06da257a.js';
import { w as webGLRenderer } from './webglContext-da311040.js';
import './_commonjsHelpers-1d681858.js';
import { l as lodash_throttle, D as DATE_RANGE_EMIT_EVENT_MS } from './constants-24b6dac6.js';
import { c as constructTableData } from './constructTableData-b239a9a1.js';
import { v as viewportStartDate, a as viewportEndDate, i as isInLiveMode } from './viewPort-8a84bb2e.js';

const ScTable = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.dateRangeChange = createEvent(this, "dateRangeChange", 7);
        this.messageOverrides = {};
        /** Active Viewport */
        this.start = viewportStartDate(this.viewport);
        this.end = viewportEndDate(this.viewport);
        this.duration = !isMinimalStaticViewport(this.viewport)
            ? parseDuration(this.viewport.duration)
            : undefined;
        this.onUpdate = ({ start, end, duration }) => {
            const hasViewPortChanged = viewportStartDate(this.viewport).getTime() !== start.getTime() ||
                viewportEndDate(this.viewport).getTime() !== end.getTime();
            const inLiveMode = isInLiveMode(this.viewport);
            if (hasViewPortChanged && !inLiveMode) {
                this.onDateRangeChange([start, end, this.viewport.group]);
            }
            // Update active viewport
            this.start = start;
            this.end = end;
            this.duration = duration;
        };
        this.onDateRangeChange = lodash_throttle(([start, end, from]) => {
            this.dateRangeChange.emit([start, end, from]);
        }, DATE_RANGE_EMIT_EVENT_MS, {
            leading: true,
            trailing: true,
        });
        this.getThresholds = () => this.annotations && this.annotations.y ? this.annotations.y.filter(isThreshold) : [];
    }
    onViewPortChange(newViewPort) {
        this.onUpdate(Object.assign(Object.assign({}, newViewPort), { duration: !isMinimalStaticViewport(newViewPort) ? parseDuration(newViewPort.duration) : undefined, start: viewportStartDate(this.viewport), end: viewportEndDate(this.viewport) }));
    }
    componentDidLoad() {
        webGLRenderer.addChartScene({
            manager: {
                id: this.widgetId,
                viewportGroup: this.viewport.group,
                updateViewPort: this.onUpdate,
            },
            duration: this.duration,
        });
    }
    disconnectedCallback() {
        // necessary to make sure that the allocated memory is released, and nothing is incorrectly rendered.
        webGLRenderer.removeChartScene(this.widgetId);
    }
    render() {
        const rows = constructTableData({
            tableColumns: this.tableColumns,
            dataStreams: this.dataStreams,
            thresholds: this.getThresholds(),
            date: this.end,
        });
        const isEnabled = this.duration != null;
        return (h("sc-table-base", { columns: this.tableColumns, rows: rows, isEnabled: isEnabled, messageOverrides: this.messageOverrides }));
    }
    static get watchers() { return {
        "viewport": ["onViewPortChange"]
    }; }
};

export { ScTable as sc_table };
