import { r as registerInstance, h } from './index-0c943849.js';
import './dataConstants-856cb1e9.js';
import './index-b3f1c3a1.js';
import './predicates-67461267.js';
import './_commonjsHelpers-1d681858.js';
import { v as validate } from './validate-b6246900.js';

const scKpiCss = "sc-kpi .align{display:-ms-flexbox;display:flex;-ms-flex-line-pack:center;align-content:center;-ms-flex-pack:center;justify-content:center}sc-kpi .container{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;height:100%;overflow:auto;position:relative;-ms-overflow-style:none;scrollbar-width:none}sc-kpi .container::-webkit-scrollbar{display:none}sc-kpi sc-chart-icon .sc-chart-icon{top:-3px}sc-kpi .large sc-chart-icon{position:relative}sc-kpi .help-icon-container{z-index:100;position:absolute;right:0;top:0}";

const renderCell = props => h("sc-kpi-base", Object.assign({}, props));
const ScKpi = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.isEditing = false;
        this.messageOverrides = {};
    }
    componentWillRender() {
        validate(this);
    }
    render() {
        const { viewport, widgetId, dataStreams, annotations, isEditing, messageOverrides } = this;
        return (h("sc-widget-grid", { viewport: viewport, widgetId: widgetId, dataStreams: dataStreams, annotations: annotations, isEditing: isEditing, messageOverrides: messageOverrides, renderCell: renderCell }));
    }
};
ScKpi.style = scKpiCss;

export { ScKpi as sc_kpi };
